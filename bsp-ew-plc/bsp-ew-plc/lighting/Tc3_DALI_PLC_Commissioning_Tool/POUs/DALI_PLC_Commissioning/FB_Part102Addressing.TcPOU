<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Part102Addressing" Id="{abc79016-f20d-4080-8338-f2f37954fe66}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Part102Addressing
VAR_INPUT
	ipDALICommunication			:	I_DALICommunication;
END_VAR
VAR_OUTPUT
	bBusy						:	BOOL;
END_VAR
VAR
	{region "Visu"}
	bScanDevices				:	BOOL;
	bStartChangeAddress			:	BOOL;
	bStartRandomAddressing		:	BOOL;
	nStartAddress				:	BYTE;
	bNewInstallation			:	BOOL;
	bOpticalFeedback			:	BOOL;
	bHideWaitSymbol				:	BOOL := TRUE;
	{endregion}
	nStep						:	INT;
	nAddress					:	INT;
	aChangeAddressList			:	ARRAY [0..63] OF ST_DALIChangeAddressList;
	aShortAddress				:	ARRAY [0..63] OF INT;
	aNoShortAddress				:	ARRAY [0..63] OF BOOL;
	nRow						:	INT;
	nHideLine					:	INT; // Variable to find out how many rows are used

	fb102Addressing				:	FB_DALI102Addressing(0);
	fb102QueryRandomAddress		:	FB_DALI102QueryRandomAddress(0);
	fb102ChangeAddresses		:	FB_DALI102ChangeAddresses(0);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[{region "Detect Commands"}
IF (bStartRandomAddressing AND (nStep = 0)) THEN
	nStep := 10;
	bStartRandomAddressing := FALSE;
	bHideWaitSymbol := FALSE;
END_IF

IF (bScanDevices AND (nStep = 0)) THEN
	nStep := 20;
	nAddress := 0;
	bScanDevices := FALSE;
	bHideWaitSymbol := FALSE;
END_IF
	 
IF (bStartChangeAddress AND (nStep = 0)) THEN
	nStep := 60;
	bStartChangeAddress := FALSE;
	bHideWaitSymbol := FALSE;
END_IF
{endregion}
{region "Manage Dialog Selection}
IF (nStep = 0) THEN
	bBusy := FALSE;
ELSE
	bBusy := TRUE;
END_IF
{endregion}	 
{region "Execute Commands"}
CASE nStep OF
0:
{region "Init"}
	bScanDevices := FALSE;
	bStartChangeAddress := FALSE;
	bStartRandomAddressing := FALSE;
	bHideWaitSymbol := TRUE;

	fb102Addressing.ipDALICommunication := ipDALICommunication;
	fb102QueryRandomAddress.ipDALICommunication := ipDALICommunication;
	fb102ChangeAddresses.ipDALICommunication := ipDALICommunication;
{endregion}

10:
{region "Random Addressing"}
	IF bNewInstallation THEN 
		fb102Addressing.nOptions := Tc3_DALI.GVL.cCompleteNewInstallation;
	END_IF

	IF bOpticalFeedback THEN
		fb102Addressing.nOptions := Tc3_DALI.GVL.cOpticalFeedback;
	END_IF

	IF bNewInstallation AND bOpticalFeedback THEN
		fb102Addressing.nOptions := Tc3_DALI.GVL.cCompleteNewInstallation OR Tc3_DALI.GVL.cOpticalFeedback;
	END_IF

	fb102Addressing(bStart := TRUE,
					nStartWithShortAddress := nStartAddress);
	IF (NOT fb102Addressing.bBusy) THEN
		fb102Addressing(bStart := FALSE);
		nStep := 0;
	END_IF
{endregion}
20:
{region "Read Existing Addresses"}
	// Query of the new random addresses to find out which short addresses are existing.
	fb102QueryRandomAddress (bStart := TRUE,
							 nAddress := TO_BYTE(nAddress),
							 eAddressType := Tc3_DALI.E_DALIAddressType.Short,
							 nRandomAddress=> aChangeAddressList[nAddress].nRandomAddress);	
	IF (NOT fb102QueryRandomAddress.bBusy) THEN
		fb102QueryRandomAddress(bStart := FALSE);
		nAddress := nAddress + 1;
		IF (nAddress > 63) THEN 
			nStep := 30;
		END_IF
	END_IF
30:
	// Write the existing short addresses into the table 
	nRow := 0;
	FOR nAddress := 0 TO 63 DO
		IF (aChangeAddressList[nAddress].nRandomAddress > 0) THEN
			aChangeAddressList[nRow].nOldAddress := TO_BYTE(nAddress);
			nRow := nRow + 1;
		END_IF
	END_FOR
	nStep := 40;
40:
	// Hide unused rows in the table
	nHideLine := 0;
	FOR nAddress := 0 TO 63 DO 
		IF (aChangeAddressList[nAddress].nRandomAddress <> 0) THEN
			aShortAddress[nHideLine] := nAddress;
			nHideLine := nHideLine + 1;
		END_IF
	END_FOR	
	FOR nAddress := nHideLine TO 63 DO 
		aNoShortAddress[nAddress] := TRUE;
	END_FOR
	FOR nAddress := 0 TO (nHideLine-1) DO
		aNoShortAddress[nAddress] := FALSE;
	END_FOR	
	aChangeAddressList[nHideLine].nOldAddress := 255;
	FOR nAddress := 0 TO nHideLine DO
		aChangeAddressList[nAddress].nNewAddress := aChangeAddressList[nAddress].nOldAddress;
	END_FOR
	nStep := 0;
{endregion}
60:
{region "Write Changed Addresses"}
	fb102ChangeAddresses(bStart := TRUE,
						 aChangeAddressList := aChangeAddressList);
	IF (NOT fb102ChangeAddresses.bBusy) THEN
		fb102ChangeAddresses(bStart := FALSE,
							 aChangeAddressList := aChangeAddressList);
		nStep := 70;
	END_IF
{endregion}
70:
{region "WriteNewAddressToOldAddress"}
	FOR nAddress := 0 TO 63 DO
		aChangeAddressList[nAddress].nOldAddress := aChangeAddressList[nAddress].nNewAddress;
	END_FOR
	nStep := 0;
{endregion}
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="FB_Part102Addressing">
      <LineId Id="44" Count="8" />
      <LineId Id="251" Count="0" />
      <LineId Id="53" Count="9" />
      <LineId Id="331" Count="5" />
      <LineId Id="63" Count="35" />
      <LineId Id="100" Count="2" />
      <LineId Id="104" Count="3" />
      <LineId Id="109" Count="5" />
      <LineId Id="240" Count="0" />
      <LineId Id="117" Count="9" />
      <LineId Id="128" Count="8" />
      <LineId Id="138" Count="2" />
      <LineId Id="142" Count="2" />
      <LineId Id="146" Count="5" />
      <LineId Id="153" Count="1" />
      <LineId Id="156" Count="4" />
      <LineId Id="255" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="297" Count="1" />
      <LineId Id="300" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="42" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>