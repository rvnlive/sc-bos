syntax = "proto3";

package vanti.bsp.ew.tenants;

option go_package = "github.com/vanti-dev/bsp-ew/pkg/gen";

import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";

message Tenant {
  string id = 1;
  string title = 2;

  google.protobuf.Timestamp create_time = 3;

  repeated string zone_names = 4;

  // Used to avoid read-modify-write conflicts
  string etag = 10;
}

message Secret {
  string id = 1;

  // The tenant the secret is associated with.
  // On output, by default only id and title will be populated.
  // On input, only populate id, which must correspond to an existing tenant.
  Tenant tenant = 2;
  // A SHA-256 hash of the secret string.
  // Output only.
  bytes secret_hash = 3;
  // The secret string that the tenant can use to authenticate themself.
  // Output only. Only present once, returned from CreateSecret or RegenerateSecret.
  string secret = 4;
  string note = 5;

  google.protobuf.Timestamp expiration_time = 6; // absent if there isn't one
  google.protobuf.Timestamp first_use_time = 7;
  google.protobuf.Timestamp last_use_time = 8;

  // Used to avoid read-modify-write conflicts
  string etag = 9;
}

service TenantApi {
  rpc ListTenants(ListTenantsRequest) returns (ListTenantsResponse);
  rpc PullTenants(PullTenantsRequest) returns (stream PullTenantsResponse);

  rpc CreateTenant(CreateTenantRequest) returns (Tenant);
  rpc GetTenant(GetTenantRequest) returns (Tenant);
  rpc UpdateTenant(UpdateTenantRequest) returns (Tenant);
  rpc DeleteTenant(DeleteTenantRequest) returns (DeleteTenantResponse);
  rpc PullTenant(PullTenantRequest) returns (stream PullTenantResponse);

  rpc AddTenantZones(AddTenantZonesRequest) returns (Tenant);
  rpc RemoveTenantZones(RemoveTenantZonesRequest) returns (Tenant);

  rpc ListSecrets(ListSecretsRequest) returns (ListSecretsResponse);
  rpc PullSecrets(PullSecretsRequest) returns (stream PullSecretsResponse);

  rpc CreateSecret(CreateSecretRequest) returns (Secret);
  rpc GetSecret(GetSecretRequest) returns (Secret);
  rpc UpdateSecret(UpdateSecretRequest) returns (Secret);
  rpc DeleteSecret(DeleteSecretRequest) returns (DeleteSecretResponse);
  rpc PullSecret(PullSecretRequest) returns (stream PullSecretResponse);

  // Creates a new hash for the secret, returns that hash. Just like CreateSecret but using an existing secret
  rpc RegenerateSecret(RegenerateSecretRequest) returns (Secret);
}

message ListTenantsRequest {
  // TODO: paging
}
message ListTenantsResponse {
  repeated Tenant tenants = 1;
}

message PullTenantsRequest {
  bool updates_only = 1;
}
message PullTenantsResponse {
  repeated Change changes = 1;

  message Change {
    google.protobuf.Timestamp change_time = 1;
    Tenant tenant = 2;
  }
}

message CreateTenantRequest {
  Tenant tenant = 1;
}

message GetTenantRequest {
  string id = 1;
}

message UpdateTenantRequest {
  Tenant tenant = 1;
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteTenantRequest {
  string id = 1;
}
message DeleteTenantResponse {}

message PullTenantRequest {
  bool updates_only = 1;
}
message PullTenantResponse {
  repeated Change changes = 1;

  message Change {
    google.protobuf.Timestamp change_time = 1;
    Tenant tenant = 2;
  }
}

message AddTenantZonesRequest {
  string tenant_id = 1;
  repeated string add_zone_names = 2;
}

message RemoveTenantZonesRequest {
  string tenant_id = 1;
  repeated string remove_zone_names = 3;
}

message ListSecretsRequest {
  bool include_hash = 1;
  // TODO: paging
}
message ListSecretsResponse {
  repeated Secret secrets = 1;
}

message PullSecretsRequest {
  bool include_hash = 1;
  bool updates_only = 2;
}
message PullSecretsResponse {
  repeated Change changes = 1;

  message Change {
    google.protobuf.Timestamp change_time = 1;
    Secret secret = 2;
  }
}

message CreateSecretRequest {
  Secret secret = 1;
}

message GetSecretRequest {
  string id = 1;
  bool include_hash = 2;
}

message UpdateSecretRequest {
  Secret secret = 1;
}

message DeleteSecretRequest {
  string id = 1;
}
message DeleteSecretResponse {}

message PullSecretRequest {
  string id = 1;
  bool include_hash = 2;
  bool updates_only = 3;
}
message PullSecretResponse {
  repeated Change changes = 1;

  message Change {
    google.protobuf.Timestamp change_time = 1;
    Secret secret = 2;
  }
}

message RegenerateSecretRequest {
  string id = 1;
}
