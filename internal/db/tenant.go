package db

import (
	"context"

	"github.com/jackc/pgx/v4"
)

// CreateTenant registers a new tenant in the database. The tenant has an autogenerated ID.
func CreateTenant(ctx context.Context, tx pgx.Tx, name string) (id string, err error) {
	// language=postgresql
	query := `
		INSERT INTO tenant (id, name) VALUES (DEFAULT, $1) RETURNING id;
	`

	row := tx.QueryRow(ctx, query, name)
	err = row.Scan(&id)
	return
}

// AssignTenantZones will store an association between the given tenant and a set of zones.
// Will fail if the tenant doesn't exist.
func AssignTenantZones(ctx context.Context, tx pgx.Tx, tenantID string, zones []string) error {
	cols := []string{"tenant", "zone"}
	var rows [][]any
	for _, zoneID := range zones {
		rows = append(rows, []any{tenantID, zoneID})
	}
	_, err := tx.CopyFrom(ctx, pgx.Identifier{"tenant_zone"}, cols, pgx.CopyFromRows(rows))
	return err
}

func DeleteTenantZone(ctx context.Context, tx pgx.Tx, tenantID string, zone string) error {
	// language=postgresql
	query := `
		DELETE FROM tenant_zone
		WHERE tenant = $1 AND zone = $2;
	`

	tag, err := tx.Exec(ctx, query, tenantID, zone)
	if err != nil {
		return err
	}
	if tag.RowsAffected() == 0 {
		return pgx.ErrNoRows
	}
	return nil
}

func DeleteAllTenantZones(ctx context.Context, tx pgx.Tx, tenantID string) (deleted int64, err error) {
	// language=postgresql
	query := `
		DELETE FROM tenant_zone
		WHERE tenant = $1;
	`

	tag, err := tx.Exec(ctx, query, tenantID)
	if err != nil {
		return 0, err
	}
	return tag.RowsAffected(), nil
}

func CreateTenantSecret(ctx context.Context, tx pgx.Tx, tenantID string, secretHash []byte) (id string, err error) {
	// language=postgresql
	query := `
		INSERT INTO tenant_secret (id, tenant, secret_hash) VALUES (DEFAULT, $1, $2)
		RETURNING id;
    `

	row := tx.QueryRow(ctx, query, tenantID, secretHash)
	err = row.Scan(&id)
	return
}

func DeleteTenantSecret(ctx context.Context, tx pgx.Tx, secretID string) error {
	// language=postgresql
	query := `
		DELETE FROM tenant_secret
		WHERE id = $1;
    `

	tag, err := tx.Exec(ctx, query, secretID)
	if err != nil {
		return err
	}
	if tag.RowsAffected() == 0 {
		return pgx.ErrNoRows
	}
	return nil
}
