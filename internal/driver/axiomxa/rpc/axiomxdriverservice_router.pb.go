// Code generated by protoc-gen-router. DO NOT EDIT.

package rpc

import (
	context "context"
	fmt "fmt"
	router "github.com/smart-core-os/sc-golang/pkg/router"
	grpc "google.golang.org/grpc"
)

// AxiomXDriverServiceRouter is a rpc.AxiomXDriverServiceServer that allows routing named requests to specific rpc.AxiomXDriverServiceClient
type AxiomXDriverServiceRouter struct {
	UnimplementedAxiomXDriverServiceServer

	router.Router
}

// compile time check that we implement the interface we need
var _ AxiomXDriverServiceServer = (*AxiomXDriverServiceRouter)(nil)

func NewAxiomXDriverServiceRouter(opts ...router.Option) *AxiomXDriverServiceRouter {
	return &AxiomXDriverServiceRouter{
		Router: router.NewRouter(opts...),
	}
}

// WithAxiomXDriverServiceClientFactory instructs the router to create a new
// client the first time Get is called for that name.
func WithAxiomXDriverServiceClientFactory(f func(name string) (AxiomXDriverServiceClient, error)) router.Option {
	return router.WithFactory(func(name string) (any, error) {
		return f(name)
	})
}

func (r *AxiomXDriverServiceRouter) Register(server *grpc.Server) {
	RegisterAxiomXDriverServiceServer(server, r)
}

// Add extends Router.Add to panic if client is not of type rpc.AxiomXDriverServiceClient.
func (r *AxiomXDriverServiceRouter) Add(name string, client any) any {
	if !r.HoldsType(client) {
		panic(fmt.Sprintf("not correct type: client of type %T is not a rpc.AxiomXDriverServiceClient", client))
	}
	return r.Router.Add(name, client)
}

func (r *AxiomXDriverServiceRouter) HoldsType(client any) bool {
	_, ok := client.(AxiomXDriverServiceClient)
	return ok
}

func (r *AxiomXDriverServiceRouter) AddAxiomXDriverServiceClient(name string, client AxiomXDriverServiceClient) AxiomXDriverServiceClient {
	res := r.Add(name, client)
	if res == nil {
		return nil
	}
	return res.(AxiomXDriverServiceClient)
}

func (r *AxiomXDriverServiceRouter) RemoveAxiomXDriverServiceClient(name string) AxiomXDriverServiceClient {
	res := r.Remove(name)
	if res == nil {
		return nil
	}
	return res.(AxiomXDriverServiceClient)
}

func (r *AxiomXDriverServiceRouter) GetAxiomXDriverServiceClient(name string) (AxiomXDriverServiceClient, error) {
	res, err := r.Get(name)
	if err != nil {
		return nil, err
	}
	if res == nil {
		return nil, nil
	}
	return res.(AxiomXDriverServiceClient), nil
}

func (r *AxiomXDriverServiceRouter) SaveQRCredential(ctx context.Context, request *SaveQRCredentialRequest) (*SaveQRCredentialResponse, error) {
	child, err := r.GetAxiomXDriverServiceClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.SaveQRCredential(ctx, request)
}
