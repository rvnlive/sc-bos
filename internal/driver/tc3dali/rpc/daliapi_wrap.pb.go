// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package rpc

import (
	"context"

	"google.golang.org/grpc"
)

// WrapDaliApi	adapts a rpc.DaliApiServer	and presents it as a rpc.DaliApiClient
func WrapDaliApi(server DaliApiServer) DaliApiClient {
	return &daliApiWrapper{server}
}

type daliApiWrapper struct {
	server DaliApiServer
}

// compile time check that we implement the interface we need
var _ DaliApiClient = (*daliApiWrapper)(nil)

// UnwrapServer returns the underlying server instance.
func (w *daliApiWrapper) UnwrapServer() DaliApiServer {
	return w.server
}

// Unwrap implements wrap.Unwrapper and returns the underlying server instance as an unknown type.
func (w *daliApiWrapper) Unwrap() interface{} {
	return w.UnwrapServer()
}

func (w *daliApiWrapper) AddToGroup(ctx context.Context, req *AddToGroupRequest, _ ...grpc.CallOption) (*AddToGroupResponse, error) {
	return w.server.AddToGroup(ctx, req)
}

func (w *daliApiWrapper) RemoveFromGroup(ctx context.Context, req *RemoveFromGroupRequest, _ ...grpc.CallOption) (*RemoveFromGroupResponse, error) {
	return w.server.RemoveFromGroup(ctx, req)
}

func (w *daliApiWrapper) GetGroupMembership(ctx context.Context, req *GetGroupMembershipRequest, _ ...grpc.CallOption) (*GetGroupMembershipResponse, error) {
	return w.server.GetGroupMembership(ctx, req)
}

func (w *daliApiWrapper) GetEmergencyStatus(ctx context.Context, req *GetEmergencyStatusRequest, _ ...grpc.CallOption) (*EmergencyStatus, error) {
	return w.server.GetEmergencyStatus(ctx, req)
}

func (w *daliApiWrapper) Identify(ctx context.Context, req *IdentifyRequest, _ ...grpc.CallOption) (*IdentifyResponse, error) {
	return w.server.Identify(ctx, req)
}

func (w *daliApiWrapper) StartTest(ctx context.Context, req *StartTestRequest, _ ...grpc.CallOption) (*StartTestResponse, error) {
	return w.server.StartTest(ctx, req)
}

func (w *daliApiWrapper) StopTest(ctx context.Context, req *StopTestRequest, _ ...grpc.CallOption) (*StopTestResponse, error) {
	return w.server.StopTest(ctx, req)
}

func (w *daliApiWrapper) GetTestResult(ctx context.Context, req *GetTestResultRequest, _ ...grpc.CallOption) (*TestResult, error) {
	return w.server.GetTestResult(ctx, req)
}

func (w *daliApiWrapper) DeleteTestResult(ctx context.Context, req *DeleteTestResultRequest, _ ...grpc.CallOption) (*TestResult, error) {
	return w.server.DeleteTestResult(ctx, req)
}
