// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package rpc

import (
	"context"

	"google.golang.org/grpc"
)

// WrapBacnetDriverService	adapts a rpc.BacnetDriverServiceServer	and presents it as a rpc.BacnetDriverServiceClient
func WrapBacnetDriverService(server BacnetDriverServiceServer) BacnetDriverServiceClient {
	return &bacnetDriverServiceWrapper{server}
}

type bacnetDriverServiceWrapper struct {
	server BacnetDriverServiceServer
}

// compile time check that we implement the interface we need
var _ BacnetDriverServiceClient = (*bacnetDriverServiceWrapper)(nil)

// UnwrapServer returns the underlying server instance.
func (w *bacnetDriverServiceWrapper) UnwrapServer() BacnetDriverServiceServer {
	return w.server
}

// Unwrap implements wrap.Unwrapper and returns the underlying server instance as an unknown type.
func (w *bacnetDriverServiceWrapper) Unwrap() any {
	return w.UnwrapServer()
}

func (w *bacnetDriverServiceWrapper) ReadProperty(ctx context.Context, req *ReadPropertyRequest, _ ...grpc.CallOption) (*ReadPropertyResponse, error) {
	return w.server.ReadProperty(ctx, req)
}

func (w *bacnetDriverServiceWrapper) ReadPropertyMultiple(ctx context.Context, req *ReadPropertyMultipleRequest, _ ...grpc.CallOption) (*ReadPropertyMultipleResponse, error) {
	return w.server.ReadPropertyMultiple(ctx, req)
}

func (w *bacnetDriverServiceWrapper) WriteProperty(ctx context.Context, req *WritePropertyRequest, _ ...grpc.CallOption) (*WritePropertyResponse, error) {
	return w.server.WriteProperty(ctx, req)
}

func (w *bacnetDriverServiceWrapper) WritePropertyMultiple(ctx context.Context, req *WritePropertyMultipleRequest, _ ...grpc.CallOption) (*WritePropertyMultipleResponse, error) {
	return w.server.WritePropertyMultiple(ctx, req)
}

func (w *bacnetDriverServiceWrapper) ListObjects(ctx context.Context, req *ListObjectsRequest, _ ...grpc.CallOption) (*ListObjectsResponse, error) {
	return w.server.ListObjects(ctx, req)
}
