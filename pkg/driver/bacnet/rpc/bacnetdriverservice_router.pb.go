// Code generated by protoc-gen-router. DO NOT EDIT.

package rpc

import (
	context "context"
	fmt "fmt"
	router "github.com/smart-core-os/sc-golang/pkg/router"
	grpc "google.golang.org/grpc"
)

// BacnetDriverServiceRouter is a rpc.BacnetDriverServiceServer that allows routing named requests to specific rpc.BacnetDriverServiceClient
type BacnetDriverServiceRouter struct {
	UnimplementedBacnetDriverServiceServer

	router.Router
}

// compile time check that we implement the interface we need
var _ BacnetDriverServiceServer = (*BacnetDriverServiceRouter)(nil)

func NewBacnetDriverServiceRouter(opts ...router.Option) *BacnetDriverServiceRouter {
	return &BacnetDriverServiceRouter{
		Router: router.NewRouter(opts...),
	}
}

// WithBacnetDriverServiceClientFactory instructs the router to create a new
// client the first time Get is called for that name.
func WithBacnetDriverServiceClientFactory(f func(name string) (BacnetDriverServiceClient, error)) router.Option {
	return router.WithFactory(func(name string) (interface{}, error) {
		return f(name)
	})
}

func (r *BacnetDriverServiceRouter) Register(server *grpc.Server) {
	RegisterBacnetDriverServiceServer(server, r)
}

// Add extends Router.Add to panic if client is not of type rpc.BacnetDriverServiceClient.
func (r *BacnetDriverServiceRouter) Add(name string, client interface{}) interface{} {
	if !r.HoldsType(client) {
		panic(fmt.Sprintf("not correct type: client of type %T is not a rpc.BacnetDriverServiceClient", client))
	}
	return r.Router.Add(name, client)
}

func (r *BacnetDriverServiceRouter) HoldsType(client interface{}) bool {
	_, ok := client.(BacnetDriverServiceClient)
	return ok
}

func (r *BacnetDriverServiceRouter) AddBacnetDriverServiceClient(name string, client BacnetDriverServiceClient) BacnetDriverServiceClient {
	res := r.Add(name, client)
	if res == nil {
		return nil
	}
	return res.(BacnetDriverServiceClient)
}

func (r *BacnetDriverServiceRouter) RemoveBacnetDriverServiceClient(name string) BacnetDriverServiceClient {
	res := r.Remove(name)
	if res == nil {
		return nil
	}
	return res.(BacnetDriverServiceClient)
}

func (r *BacnetDriverServiceRouter) GetBacnetDriverServiceClient(name string) (BacnetDriverServiceClient, error) {
	res, err := r.Get(name)
	if err != nil {
		return nil, err
	}
	if res == nil {
		return nil, nil
	}
	return res.(BacnetDriverServiceClient), nil
}

func (r *BacnetDriverServiceRouter) ReadProperty(ctx context.Context, request *ReadPropertyRequest) (*ReadPropertyResponse, error) {
	child, err := r.GetBacnetDriverServiceClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.ReadProperty(ctx, request)
}

func (r *BacnetDriverServiceRouter) ReadPropertyMultiple(ctx context.Context, request *ReadPropertyMultipleRequest) (*ReadPropertyMultipleResponse, error) {
	child, err := r.GetBacnetDriverServiceClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.ReadPropertyMultiple(ctx, request)
}

func (r *BacnetDriverServiceRouter) WriteProperty(ctx context.Context, request *WritePropertyRequest) (*WritePropertyResponse, error) {
	child, err := r.GetBacnetDriverServiceClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.WriteProperty(ctx, request)
}

func (r *BacnetDriverServiceRouter) WritePropertyMultiple(ctx context.Context, request *WritePropertyMultipleRequest) (*WritePropertyMultipleResponse, error) {
	child, err := r.GetBacnetDriverServiceClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.WritePropertyMultiple(ctx, request)
}

func (r *BacnetDriverServiceRouter) ListObjects(ctx context.Context, request *ListObjectsRequest) (*ListObjectsResponse, error) {
	child, err := r.GetBacnetDriverServiceClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.ListObjects(ctx, request)
}
