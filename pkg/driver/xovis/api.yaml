components:
  examples:
    agent_config_live_data:
      value:
        config:
          data:
            format:
              type: JSON
              version: '5.0'
            include_empty: false
            meta_data_config: REFERENCED
            meta_data_package_full: false
            meta_data_sensor_full: false
            package_size: 1
            resolution: MAX
          filters:
            filter_events_by_objects: false
            included_count_events: ALL
            included_info_events: ALL
            included_objects: ALL
            included_scene_events: ALL
          scheduler:
            retry:
              mode: DROP
            type: IMMEDIATE
        connection: 3
        enabled: true
        name: Live Data Push
        type: LIVE_DATA
    agent_config_live_data_periodic:
      value:
        config:
          data:
            format:
              pretty: false
              time: RFC3339
              type: JSON
              version: '5.0'
            package_size: 15
            resolution: ONE_SECOND
          filters:
            filter_events_by_objects: false
            included_count_events:
            - COUNT_INCREMENT
            - COUNT_DECREMENT
            - COUNT_RESET
            - WRONG_WAY_DETECTED
            included_info_events: NONE
            included_objects:
            - PERSON
            - GROUP
            included_scene_events: ALL
          scheduler:
            cron: 0/30 * * ? * *
            retry:
              mode: DROP
            type: PERIODIC
        connection: 7
        enabled: true
        name: Live Data Push
        type: LIVE_DATA
    agent_config_live_data_periodic_response:
      value:
        config:
          data:
            format:
              pretty: false
              time: RFC3339
              type: JSON
              version: '5.0'
            include_empty: false
            meta_data_config: NONE
            meta_data_package_full: false
            meta_data_sensor_full: false
            package_size: 15
            resolution: ONE_SECOND
          filters:
            filter_events_by_objects: false
            included_count_events:
            - WRONG_WAY_DETECTED
            - COUNT_INCREMENT
            - COUNT_DECREMENT
            - COUNT_RESET
            included_info_events: NONE
            included_objects:
            - GROUP
            - PERSON
            included_scene_events: ALL
          scheduler:
            cron: 0/30 * * ? * *
            retry:
              mode: DROP
            type: PERIODIC
        connection: 7
        enabled: true
        id: 21
        name: Live Data Push
        type: LIVE_DATA
    agent_config_live_data_response:
      value:
        config:
          data:
            format:
              pretty: false
              time: UNIX_TIME_MS
              type: JSON
              version: '5.0'
            include_empty: false
            meta_data_config: REFERENCED
            meta_data_package_full: false
            meta_data_sensor_full: false
            package_size: 1
            resolution: MAX
          filters:
            filter_events_by_objects: false
            included_count_events: ALL
            included_info_events: ALL
            included_objects: ALL
            included_scene_events: ALL
          scheduler:
            retry:
              mode: DROP
            type: IMMEDIATE
        connection: 3
        enabled: true
        id: 20
        name: Live Data Push
        type: LIVE_DATA
    agent_config_logics:
      value:
        config:
          data:
            format:
              pretty: true
              time: RFC3339
              type: JSON
              version: '5.0'
            package_size: 1
            resolution: ONE_MINUTE
          filters:
            included_logics:
            - 1
            - 4
            - 5
          scheduler:
            cron: '* 0/15 * ? * *'
            retry:
              mode: DROP
            type: PERIODIC
        connection: 1
        enabled: true
        name: Logic Push
        type: LOGICS
    agent_config_logics_response:
      value:
        config:
          data:
            format:
              pretty: true
              time: RFC3339
              type: JSON
              version: '5.0'
            include_empty: false
            meta_data_config: NONE
            meta_data_package_full: false
            meta_data_sensor_full: false
            package_size: 1
            resolution: ONE_MINUTE
          filters:
            included_logics:
            - 5
            - 4
            - 1
          scheduler:
            cron: '* 0/15 * ? * *'
            retry:
              mode: DROP
            type: PERIODIC
        connection: 1
        enabled: true
        id: 25
        name: Logic Push
        type: LOGICS
    agent_config_wifi_bt:
      value:
        config:
          data:
            format:
              pretty: true
              time: RFC3339
              type: JSON
              version: '5.0'
            package_size: 5
            resolution: ONE_SECOND
          scheduler:
            cron: 0/5 * * ? * *
            retry:
              mode: DROP
            type: PERIODIC
        connection: 1
        enabled: true
        id: 26
        name: Wifi/bluetooth push
        type: WIFI_BT
    agent_config_wifi_bt_response:
      value:
        config:
          data:
            format:
              pretty: true
              time: RFC3339
              type: JSON
              version: '5.0'
            include_empty: false
            meta_data_config: NONE
            meta_data_package_full: false
            meta_data_sensor_full: false
            package_size: 5
            resolution: ONE_SECOND
          filters: null
          scheduler:
            cron: 0/5 * * ? * *
            retry:
              mode: DROP
            type: PERIODIC
        connection: 1
        enabled: true
        id: 26
        name: Wifi/bluetooth push
        type: WIFI_BT
    agent_status:
      value:
        id: 1
        name: Live Data Push
        package_info:
          last_processed:
            ack: true
            index: 12345
            package_id: 1090
          no_of_dropped: 2
          no_of_sent: 861
        transmit_info:
          last_failed:
            download:
              size: 0B
              size_b: 0
              speed: 0B/s
              speed_bps: 0
            duration_ms: 1
            port: 504
            protocol: HTTP
            reason:
              code: 7
              info: 'Failed to connect to http://death-star.org port 504: Connection
                refused'
            server: http://death-star.org
            time: 2021-05-04T15:01:16.355 CET
            upload:
              size: 0B
              size_b: 0
              speed: 0B/s
              speed_bps: 0
          last_successful:
            download:
              size: 126B
              size_b: 126
              speed: 0B/s
              speed_bps: 0
            duration_ms: 2
            port: 504
            protocol: HTTP
            reason:
              code: 204
              info: No Content
            server: http://death-star.org
            time: 2021-05-04T15:02:05.688 CET
            upload:
              size: 4.73KB
              size_b: 4842
              speed: 3.27MB/s
              speed_bps: 3427631
          no_of_failed: 3
          no_of_successful: 861
          received: 109KB
          received_bytes: 112014
          received_total: 138KB
          received_total_bytes: 141372
          sent: 4.33MB
          sent_bytes: 4543262
          sent_total: 5.46MB
          sent_total_bytes: 5721464
        type: LIVE_DATA
    agent_status_all:
      value:
        agent_states:
        - id: 1
          name: Live Data Push
          package_info:
            last_processed:
              ack: true
              index: 12345
              package_id: 1090
            no_of_dropped: 2
            no_of_sent: 861
          transmit_info:
            last_failed:
              download:
                size: 0B
                size_b: 0
                speed: 0B/s
                speed_bps: 0
              duration_ms: 1
              port: 504
              protocol: HTTP
              reason:
                code: 7
                info: 'Failed to connect to http://death-star.org port 504: Connection
                  refused'
              server: http://death-star.org
              time: 2021-05-04T15:01:16.355 CET
              upload:
                size: 0B
                size_b: 0
                speed: 0B/s
                speed_bps: 0
            last_successful:
              download:
                size: 126B
                size_b: 126
                speed: 0B/s
                speed_bps: 0
              duration_ms: 2
              port: 504
              protocol: HTTP
              reason:
                code: 204
                info: No Content
              server: http://death-star.org
              time: 2021-05-04T15:02:05.688 CET
              upload:
                size: 4.73KB
                size_b: 4842
                speed: 3.27MB/s
                speed_bps: 3427631
            no_of_failed: 3
            no_of_successful: 861
            received: 109KB
            received_bytes: 112014
            received_total: 138KB
            received_total_bytes: 141372
            sent: 4.33MB
            sent_bytes: 4543262
            sent_total: 5.46MB
            sent_total_bytes: 5721464
          type: LIVE_DATA
        last_stored: 2021-05-04T15:02:00.000 CET
    agent_trigger_all:
      value:
        package_id_start: 1000
        type: ALL
    agent_trigger_dummy_data:
      value:
        file_name_prefix: dummy
        type: DUMMY_DATA
    agent_trigger_last_package:
      value:
        type: LAST_PACKAGE
    agent_trigger_now:
      value:
        type: NOW
    agent_trigger_status_busy:
      value:
        status: BUSY
        trigger_config:
          file_name_prefix: history
          package_id_start: 1000
          time_from: '2021-08-05T08:00:00Z'
          time_to: '2021-08-05T18:00:00Z'
          type: TIME_RANGE
        trigger_time: '2021-08-06T09:35:21Z'
    agent_trigger_status_idle:
      value:
        status: IDLE
    agent_trigger_time_range:
      value:
        file_name_prefix: manual
        package_id_start: 1000
        time_from: '2021-08-05T08:00:00Z'
        time_to: '2021-08-05T18:00:00Z'
        type: TIME_RANGE
    connection_ftp:
      value:
        config:
          account_info: The_rebel_alliance
          alternative_to_user: jedi power
          create_directories: true
          directory_mode: SINGLECWD
          file_mode: APPEND_MAX_SIZE
          ignore_proxy: false
          max_file_size: 1048576
          password: '!M1llenn1umF4lcon!'
          path: filedrop
          port: 2121
          ssl_enable: false
          uri: ftp://deathstar.server.org
          user: luke
        name: My fancy FTP connecion
        protocol: FTP
    connection_ftp_response:
      value:
        config:
          account_info: The_rebel_alliance
          alternative_to_user: jedi power
          connection_timeout_s: 10
          create_directories: true
          directory_mode: SINGLECWD
          file_mode: APPEND_MAX_SIZE
          ignore_proxy: false
          max_file_size: 1048576
          password: '!M1llenn1umF4lcon!'
          path: filedrop
          port: 2121
          response_timeout_s: 5
          ssl_enable: false
          uri: ftp://deathstar.server.org
          use_pret: false
          user: luke
        id: 10
        name: My fancy FTP connecion
        protocol: FTP
    connection_http:
      value:
        config:
          auth_method: BASIC
          chunked_transfer_enabled: false
          connection_timeout_s: 1138
          custom_header_fields:
          - name: Cache-Control
            value: no-cache
          - name: From
            value: han@rebelalliance.com
          - name: Max-Forwards
            value: '421'
          - name: User-Agent
            value: The Fancy Xovis Sensor with version 5.0
          ignore_proxy: false
          password: LittleWookie123!
          port: 504
          ssl_enable: false
          uri: http://deathstar.server.org
          user: HanSolo
        name: My fancy HTTP connecion
        protocol: HTTP
    connection_http_response:
      value:
        config:
          auth_method: BASIC
          chunked_transfer_enabled: false
          connection_timeout_s: 1138
          custom_header_fields:
          - name: Cache-Control
            value: no-cache
          - name: From
            value: han@rebelalliance.com
          - name: Max-Forwards
            value: '421'
          - name: User-Agent
            value: The Fancy Xovis Sensor with version 5.0
          ignore_proxy: false
          password: LittleWookie123!
          port: 504
          ssl_enable: false
          uri: http://deathstar.server.org
          user: HanSolo
        id: 94
        name: My fancy HTTP connecion
        protocol: HTTP
    connection_sftp:
      value:
        config:
          connection_timeout_s: 10
          create_directories: true
          file_mode: PACKAGE
          host_key: 89:f4:38:63:36:09:89:be:b6:73:d5:cb:8a:9c:83:1a
          max_file_size: 1048576
          new_directory_permission: rwxrw-r--
          new_file_permission: '664'
          password: w00kieeP0wer
          path: ''
          port: 2222
          ssh_compression_enable: true
          uri: sftp://localhost
          user: chewbacca
        name: The Amazing SFTP Connection 1
        protocol: SFTP
    connection_sftp_response:
      value:
        config:
          connection_timeout_s: 10
          create_directories: true
          file_mode: PACKAGE
          host_key: 89:f4:38:63:36:09:89:be:b6:73:d5:cb:8a:9c:83:1a
          max_file_size: 1048576
          new_directory_permission: rwxrw-r--
          new_file_permission: rw-rw-r--
          password: w00kieeP0wer
          path: ''
          port: 2222
          ssh_compression_enable: true
          uri: sftp://localhost
          user: chewbacca
        id: 10
        name: My fancy FTP connecion
        protocol: FTP
    connection_tcp_client:
      value:
        config:
          connection_timeout_s: 10
          mode: CLIENT
          port: 5555
        name: TCP Client Connection
        protocol: TCP
    connection_tcp_client_response:
      value:
        config:
          connection_timeout_s: 10
          mode: CLIENT
          port: 5555
          uri: tcp.server.xovis.com
        id: 119
        name: TCP Client Connection
        protocol: TCP
    connection_tcp_legacy_event_stream:
      value:
        config:
          connection_timeout_s: 10
          mode: LEGACY_EVENT_STREAM_SERVER
        name: Legacy Event Stream Connection
        protocol: TCP
    connection_tcp_legacy_event_stream_response:
      value:
        config:
          connection_timeout_s: 10
          mode: LEGACY_EVENT_STREAM_SERVER
          port: 49156
          uri: ''
        id: 120
        name: The Amazing TCP Server Connection
        protocol: TCP
    connection_test_response_nok1:
      value:
        connection_test:
          server_response:
            code: 401
            info: Unauthorized
          status: CLIENT_ERROR
    connection_test_response_nok2:
      value:
        connection_test:
          server_response:
            code: 7
            info: 'Failed to connect to localhost port 2222: Connection refused'
          status: NOT_CONNECTED
    connection_test_response_ok:
      value:
        connection_test:
          server_response:
            code: 200
            info: OK
          status: OK
    history_status:
      value:
        storage:
          capacity:
            count_records: 218453
            fill_level_percent: 0.11
            memory: 20971520
            time: 151d 16h 53min 0s
            time_s: 13107180
          stored_data:
            counts:
            - id: 1
              last_stored_total_value: 399
              logic_id: 1
              name: Forward line counter male
              reset_offset: 399
              reset_time: 2021-03-05T13:43:22.946 CET
            - id: 2
              last_stored_total_value: 0
              logic_id: 1
              name: Backward line counter male
            - id: 3
              last_stored_total_value: 0
              logic_id: 1
              name: Forward line counter female
            - id: 4
              last_stored_total_value: 0
              logic_id: 1
              name: Backward line counter female
            - id: 5
              last_stored_total_value: 0
              logic_id: 2
              name: Forward line counter male
            - id: 6
              last_stored_total_value: 0
              logic_id: 2
              name: Backward line counter male
            - id: 7
              last_stored_total_value: 0
              logic_id: 2
              name: Forward line counter female
            - id: 8
              last_stored_total_value: 0
              logic_id: 2
              name: Backward line counter female
            logics:
            - count_records: 242
              geometry_id: 1
              geometry_name: Line 1
              geometry_type: LINE
              id: 1
              info: Some optional Data
              name: Line Count Logic 1
              retention_time: 4h 2min 0s
              retention_time_s: 14520
              time_begin: 2021-03-04T14:28:00.000 CET
            - count_records: 242
              geometry_id: 2
              geometry_name: Exit Line
              geometry_type: LINE
              id: 2
              info: ''
              name: Line Count Logic 2
              retention_time: 4h 2min 0s
              retention_time_s: 14520
              time_begin: 2021-03-04T14:28:00.000 CET
            newest_count_record:
              data_size: 64
              duration_s: 60
              id: 241
              time_begin: 2021-03-05T13:42:00.000 CET
            number_of_count_records: 242
            oldest_count_record:
              data_size: 64
              duration_s: 60
              id: 0
              time_begin: 2021-03-04T14:28:00.000 CET
            retention_time: 4h 2min 0s
            retention_time_s: 14520
            time_begin: 2021-03-04T14:28:00.000 CET
            time_end: 2021-03-05T13:43:00.000 CET
    time_local_no_offset:
      value:
        time_local: '2017-07-21T17:32:28'
    time_local_with_offset:
      value:
        time_local: '2017-07-21T17:32:28+02:00'
    time_utc:
      value:
        time_utc: '2017-07-21T17:32:28Z'
  parameters:
    X-Requested-With:
      description: 'When set to `XmlHttpRequest` no `WWW-Authenticate` header will
        be sent in case of `HTTP 401`.

        Used to get rid of nasty browser popup when using in UI.

        '
      in: header
      name: X-Requested-With
      required: false
      schema:
        example: XmlHttpRequest
        type: string
  responses:
    200_blob_created:
      description: Blob created
    200_blob_deleted:
      description: Blob deleted
    400_bad_request:
      description: Bad request (malformed or invalid JSON, invalid data format, ...)
    400_bad_request_json_body:
      content:
        application/json:
          examples:
            ERROR_JSON:
              value:
                code: 11100
                info: The json couldn't be parsed.
            ERROR_JSON_DETAIL:
              value:
                code: 11100
                detail:
                - Field 'enabled' is missing.
                info: The json couldn't be parsed.
            ERROR_JSON_DETAIL_MULTILINE:
              value:
                code: 11100
                detail:
                - Validation failed.
                - 'Error #1 - <root>[type]'
                - '  description:    Failed to match against any enum values.'
                - 'Error #2 - <root>'
                - '  description:    Failed to validate against schema associated
                  with property name ''type''.'
                info: The json couldn't be parsed.
          schema:
            $ref: '#/components/schemas/error_message'
      description: Bad request (malformed or invalid JSON, invalid data format, unexpected
        empty body...)
    401_unauthorized:
      description: Unauthorized
      headers:
        WWW-Authenticate:
          schema:
            description: Request for authentication
            type: string
    403_forbidden:
      description: Forbidden
    404_blob_not_found:
      description: Blob not found
    404_id_not_found:
      content:
        application/json:
          examples:
            ERROR_ELEMENT_NOT_FOUND:
              value:
                code: 10000
                detail:
                - Element with id=1234 does not exist
                info: The json couldn't be parsed.
          schema:
            $ref: '#/components/schemas/error_message'
      description: Element with given identifier (e.g. {id}, {version}, etc.) not
        found
    409_conflict:
      description: Conflict
    413_no_space_left:
      description: No space left
    451_legal_reasons:
      description: Unavailable For Legal Reasons
    503_service_unavailable:
      content:
        application/json:
          examples:
            ERROR_NO_BACKGROUND_IMAGE:
              value:
                code: 10000
                detail:
                - Background image not available
                info: Request failed.
          schema:
            $ref: '#/components/schemas/error_message'
      description: Server error - Service Unavailable
  schemas:
    ModulesDelivery:
      properties:
        Module:
          properties:
            HardwareVersion:
              description: The hardware version of the module
              type: string
            MACAddress:
              description: "The MAC address of the module as HEX, with \u201C:\u201D\
                \ separating the bytes"
              type: string
            Manufacturer:
              description: The manufacturer of the module
              example: Xovis AG
              type: string
            Model:
              description: The model of the module
              example: PC2RL
              type: string
            SerialNumber:
              description: Serial number of the module
              type: string
            Services:
              description: Available list of services
              items:
                properties:
                  ServiceName:
                    description: Name of the implemented services
                    example: inventory
                    type: string
                  ServiceType:
                    description: Type of the implemented service
                    enum:
                    - itxpt_socket
                    - itxpt_http
                    - sntp
                    - itxpt_multicast
                    - mqtt
                    type: string
                type: object
              type: array
            SoftwareVersion:
              description: The software version installed on the module
              type: string
            Status:
              description: The last error detected during selftest
              type: string
            Type:
              description: Type of the module
              example: Passenger counting
              type: string
          type: object
      required:
      - Type
      - Model
      - Manufacturer
      - SerialNumber
      - SoftwareVersion
      - HardwareVersion
      - MACAddress
      - Status
      - Services
      title: Device Identification
      type: object
    PassengerDoorCountDelivery:
      properties:
        PassengerDoorCount:
          properties:
            DoorCountQuality:
              description: Information on the quality of counting
              enum:
              - Regular
              - Defect
              - Other
              type: string
            DoorId:
              description: Identification of the door
              type: integer
            PassengerCounting:
              items:
                properties:
                  DoorPassengerIn:
                    description: Number of passengers having boarded since power up
                    type: integer
                  DoorPassengerOut:
                    description: Number of passengers having alighted since power
                      up
                    type: integer
                  ObjectClass:
                    description: Information on the passenger type
                    enum:
                    - Adult
                    - Child
                    - Pram
                    - Bike
                    - Wheelchair
                    - Other
                    type: string
                required:
                - DoorPassengerIn
                - DoorPassengerOut
                type: object
              type: array
            RecordedAtTime:
              description: Date and time of the counting information
              example: '2022-03-07T15:00:54'
              type: string
          required:
          - RecordedAtTime
          - DoorId
          type: object
      required:
      - PassengerDoorCount
      title: Counter
      type: object
    activities_statistics_item:
      properties:
        frame_number_begin:
          example: 20
          format: uint64
          type: number
        frame_number_end:
          example: 40
          format: uint64
          type: number
        num_counting_events:
          format: uint32
          type: number
        num_tracked_objects:
          format: uint32
          type: number
    additional_information:
      properties:
        mac_address:
          description: MAC address of the sensor
          example: 00:00:00:00:00:00
          type: string
        rotation:
          description: The rotation of the sensor in degrees
          example: 90.0
          format: float
          type: number
      title: Additional Information
      type: object
    advanced_multisensor_settings:
      description: ''
      properties:
        low_latency_mode:
          example: false
          type: boolean
      title: Advanced Multisensor Settings
      type: object
    advanced_settings:
      description: ''
      properties:
        height_correction:
          example: 0.0
          format: float
          type: number
        low_latency_mode:
          example: false
          type: boolean
        sitting_persons:
          example: false
          type: boolean
        tracking_version:
          description: possible values are given by /singelsensor/settings/advanced/options
          enum:
          - default
          - 3X_COMPATIBILITY
          - V1
          - V2
          - V3
          - ULTRA_LOW
          type: string
      title: Advanced settings
      type: object
    advanced_settings_options:
      description: ''
      properties:
        tracking_version:
          items:
            enum:
            - default
            - 3X_COMPATIBILITY
            - V1
            - V2
            - V3
            - ULTRA_LOW
            type: string
          type: array
      title: Advanced settings options
      type: object
    affine_transformation2d:
      description: JSON representation of affine transformations
      example:
        linear:
        - - 1
          - 0
        - - 0
          - 1
        translation:
        - 23.3
        - 12.0
      properties:
        linear:
          $ref: '#/components/schemas/matrix2d'
        translation:
          $ref: '#/components/schemas/coord2d'
      required:
      - linear
      - translation
      title: Affine transformation 2d
      type: object
    affine_transformation3d:
      description: JSON representation of affine transformations
      properties:
        linear:
          $ref: '#/components/schemas/matrix3d'
        translation:
          $ref: '#/components/schemas/coord3d'
      title: Affine transformation 3d
      type: object
    agent_config:
      description: Configuration of a data push agent
      properties:
        config:
          properties:
            data:
              properties:
                format:
                  properties:
                    pretty:
                      type: boolean
                    time:
                      $ref: '#/components/schemas/time_formats'
                    type:
                      $ref: '#/components/schemas/formats'
                    version:
                      maxLength: 128
                      type: string
                  type: object
                include_empty:
                  type: boolean
                meta_data_config:
                  $ref: '#/components/schemas/meta_data_config'
                meta_data_package_full:
                  type: boolean
                meta_data_sensor_full:
                  type: boolean
                package_size:
                  type: integer
                resolution:
                  $ref: '#/components/schemas/resolutions'
                resources:
                  items:
                    properties:
                      method:
                        enum:
                        - GET
                        - POST
                        type: string
                      uri:
                        pattern: ^[ -~]*$
                        type: string
                    type: object
                  type: array
              required:
              - resolution
              - format
              type: object
            filters:
              oneOf:
              - properties:
                  filter_events_by_objects:
                    type: boolean
                  included_count_events:
                    $ref: '#/components/schemas/count_event_types'
                  included_info_events:
                    $ref: '#/components/schemas/info_event_types'
                  included_objects:
                    $ref: '#/components/schemas/object_types'
                  included_scene_events:
                    $ref: '#/components/schemas/scene_event_types'
                required:
                - included_objects
                - included_scene_events
                - included_count_events
                - included_info_events
                type: object
              - properties:
                  included_logics:
                    $ref: '#/components/schemas/included_logics'
                required:
                - included_logics
                type: object
            scheduler:
              properties:
                cron:
                  type: string
                interval:
                  $ref: '#/components/schemas/scheduler_intervals'
                retry:
                  properties:
                    delay_increase_const:
                      maximum: 3600.0
                      minimum: 0.0
                      type: number
                    delay_increase_factor:
                      maximum: 10.0
                      minimum: 0.0
                      type: number
                    delay_interval_max:
                      maximum: 86400.0
                      minimum: 0.0
                      type: number
                    delay_interval_min:
                      maximum: 86400.0
                      minimum: 0.0
                      type: number
                    delay_start_max:
                      maximum: 86400.0
                      minimum: 0.0
                      type: number
                    delay_start_min:
                      maximum: 86400.0
                      minimum: 0.0
                      type: number
                    max_number:
                      minimum: 0
                      type: integer
                    mode:
                      $ref: '#/components/schemas/scheduler_retry_modes'
                    reset_on_next_push_schedule:
                      type: boolean
                  required:
                  - mode
                  type: object
                type:
                  $ref: '#/components/schemas/scheduler_types'
              required:
              - type
              type: object
          required:
          - scheduler
          type: object
        connection:
          type: integer
        enabled:
          type: boolean
        id:
          type: integer
        name:
          maxLength: 128
          type: string
        type:
          $ref: '#/components/schemas/agent_types'
      title: Agent Configuration
      type: object
    agent_config_collection:
      properties:
        agents:
          items:
            $ref: '#/components/schemas/agent_config'
          type: array
      title: Collection of agent configuration
      type: object
    agent_status:
      properties:
        id:
          minimum: 1
          type: integer
        name:
          maxLength: 128
          type: string
        package_info:
          properties:
            last_processed:
              properties:
                ack:
                  type: boolean
                index:
                  minimum: -1
                  type: integer
                package_id:
                  minimum: 0
                  type: integer
              type: object
            no_of_dropped:
              minimum: 0
              type: integer
            no_of_sent:
              minimum: 0
              type: integer
          type: object
        transmit_info:
          properties:
            last_failed:
              $ref: '#/components/schemas/agent_tx_status'
            last_successful:
              $ref: '#/components/schemas/agent_tx_status'
            no_of_failed:
              minimum: 0
              type: integer
            no_of_successful:
              minimum: 0
              type: integer
            received:
              description: string representation of received_bytes
              type: string
            received_bytes:
              description: received bytes sincelast reboot or reconfiguration of the
                agent
              type: integer
            received_total:
              description: string representation of received_total_bytes
              type: string
            received_total_bytes:
              description: received bytes (e.g. connection headers, etc.) since first
                config of agent (persisted)
              type: integer
            sent:
              description: string representation of sent_bytes
              type: string
            sent_bytes:
              description: sent bytes sincelast reboot or reconfiguration of the agent
              type: integer
            sent_total:
              description: string representation of sent_total_bytes
              type: string
            sent_total_bytes:
              description: sent bytes since first config of agent (persisted)
              type: integer
          type: object
        type:
          $ref: '#/components/schemas/agent_types'
      type: object
    agent_status_all:
      properties:
        agent_states:
          items:
            $ref: '#/components/schemas/agent_status'
          type: array
        last_stored:
          format: date-time
          type: string
      type: object
    agent_trigger:
      properties:
        file_name_prefix:
          maxLength: 64
          type: string
        package_id_start:
          minimum: 0
          type: integer
        time_from:
          format: date-time
          type: string
        time_to:
          format: date-time
          type: string
        type:
          $ref: '#/components/schemas/agent_trigger_types'
      required:
      - type
      type: object
    agent_trigger_status:
      properties:
        status:
          enum:
          - IDLE
          - BUSY
          type: string
        trigger_config:
          $ref: '#/components/schemas/agent_trigger'
        trigger_time:
          format: date-time
          type: string
      type: object
    agent_trigger_types:
      enum:
      - TIME_RANGE
      - ALL
      - NOW
      - LAST_PACKAGE
      - DUMMY_DATA
      type: string
    agent_tx_status:
      properties:
        download:
          $ref: '#/components/schemas/agent_tx_status_data_stats'
        duration_ms:
          description: duration of the whole data transfer incl. connection, name
            resolving etc.
          type: integer
        port:
          maximum: 65535
          minimum: 1
          type: integer
        protocol:
          $ref: '#/components/schemas/connection_protocols'
        reason:
          properties:
            code:
              type: integer
            info:
              type: string
          type: object
        server:
          format: uri
          type: string
        time:
          format: date-time
          type: string
        upload:
          $ref: '#/components/schemas/agent_tx_status_data_stats'
      type: object
    agent_tx_status_data_stats:
      properties:
        size:
          description: "string representation of size_b (in B, KB, MB, GB, \u2026)"
          type: string
        size_b:
          description: size of transferred data in bytes (payload and most upoper
            layer header only, no TCP and IP package header bytes)
          type: integer
        speed:
          description: "string representation of speed_bps (in B/s, KB/s, MB/s, \u2026\
            )"
          type: string
        speed_bps:
          description: transfer speed in Bytes/Second
          type: integer
      type: object
    agent_types:
      enum:
      - LOGICS
      - LIVE_DATA
      - STATUS
      - WIFI_BT
      - RECORDING
      - GENERIC
      - LEGACY_LINE_COUNT
      - LEGACY_ZONE_OCCUPANCY_COUNT
      - LEGACY_ZONE_IN_OUT_COUNT
      - LEGACY_EVENT
      - LEGACY_EVENT_STREAM
      - LEGACY_COORDINATE
      - LEGACY_OBJECT_STREAM
      - LEGACY_WIFI_BT
      type: string
    all_blocked_spaces:
      description: ''
      properties:
        spaces:
          items:
            $ref: '#/components/schemas/indexed_blocked_space'
          type: array
      title: List of observed spaces
      type: object
    all_scene_masks:
      description: ''
      properties:
        scene_masks:
          items:
            $ref: '#/components/schemas/existing_scene_mask'
          type: array
      title: List of existing scene masks
      type: object
    all_view_masks:
      description: ''
      properties:
        view_masks:
          items:
            $ref: '#/components/schemas/existing_view_mask'
          type: array
      title: List of existing view masks
      type: object
    base_line_count_template_options:
      properties:
        activation_zone_id:
          format: int64
          type: integer
        count_line_id:
          format: int64
          type: integer
        deactivation_zone_id:
          format: int64
          type: integer
        door_id:
          format: int64
          type: integer
        min_dwell_time:
          format: float
          type: number
        min_dwell_zone_id:
          format: int64
          type: integer
        zone_of_interest_id:
          format: int64
          type: integer
      required:
      - count_line_id
      type: object
    base_person_line_count_template_options:
      properties:
        exclude_staff:
          type: boolean
        max_person_height:
          format: float
          type: number
        min_person_height:
          format: float
          type: number
        recognize_gender:
          type: boolean
      type: object
    base_zone_count_template_options:
      properties:
        zone_id:
          format: int64
          type: integer
        zone_of_interest_id:
          format: int64
          type: integer
      required:
      - zone_id
      type: object
    blocked_space:
      description: JSON representation of an observed space
      properties:
        lower_threshold:
          description: threshold for events
          example: 0.3
          format: float
          type: number
        name:
          example: Space 1
          type: string
        polygon:
          $ref: '#/components/schemas/polygon'
        upper_threshold:
          description: threshold for events
          example: 0.5
          format: float
          type: number
      title: Space
      type: object
    bluetooth_settings:
      description: Bluetooth monitoring settings
      properties:
        allowlist_enabled:
          description: Allowlist enabled for Bluetooth monitoring.
          example: false
          type: boolean
        denylist_enabled:
          description: Denylist enabled for Bluetooth monitoring.
          example: true
          type: boolean
        enabled:
          description: Bluetooth monitoring enabled.
          example: true
          type: boolean
      title: Bluetooth Config
      type: object
    changesets:
      properties:
        checksum:
          description: Checksum
          example: 0422d752
          type: string
        details:
          items:
            $ref: '#/components/schemas/config_endpoint'
          type: array
        last_change:
          description: Time of last change
          example: '2021-12-08T09:22:12Z'
          type: string
      required:
      - checksum
      - last_change
      - apis
      title: Configuration Changeset
      type: object
    config_endpoint:
      properties:
        checksum:
          description: Checksum
          example: 0422d752
          type: string
        content:
          additionalProperties:
            type: string
          type: object
        last_change:
          description: Time of last change
          example: '2021-12-08T09:19:39Z'
          type: string
        url:
          description: URL
          example: /api/v5/www/config
          type: string
      required:
      - url
      - checksum
      - last_change
      title: Configuration Endpoint
      type: object
    connection_config:
      oneOf:
      - $ref: '#/components/schemas/connection_config_http'
      - $ref: '#/components/schemas/connection_config_ftp'
      - $ref: '#/components/schemas/connection_config_sftp'
      - $ref: '#/components/schemas/connection_config_mqtt'
      - $ref: '#/components/schemas/connection_config_tcp'
      - $ref: '#/components/schemas/connection_config_udp'
    connection_config_collection:
      properties:
        connections:
          items:
            $ref: '#/components/schemas/connection_config'
          type: array
      title: Collection of connection configurations
      type: object
    connection_config_ftp:
      properties:
        config:
          properties:
            account_info:
              maxLength: 512
              type: string
            alternative_to_user:
              maxLength: 1024
              type: string
            connection_timeout_s:
              maximum: 86400
              minimum: 0
              type: integer
            create_directories:
              type: boolean
            directory_mode:
              enum:
              - MULTICWD
              - NOCWD
              - SINGLECWD
              type: string
            file_mode:
              enum:
              - PACKAGE
              - APPEND_INTERVAL
              - APPEND_MAX_SIZE
              type: string
            ignore_proxy:
              type: boolean
            max_file_size:
              type: integer
            password:
              maxLength: 512
              type: string
            path:
              maxLength: 1024
              type: string
            port:
              maximum: 65535
              minimum: 1
              type: integer
            response_timeout_s:
              maximum: 86400
              minimum: 0
              type: integer
            ssl_enable:
              type: boolean
            uri:
              format: uri
              maxLength: 1024
              type: string
            use_pret:
              type: boolean
            user:
              maxLength: 512
              type: string
          required:
          - uri
          - user
          type: object
        id:
          type: integer
        name:
          maxLength: 128
          type: string
        protocol:
          enum:
          - FTP
          type: string
      required:
      - name
      - protocol
      - config
      title: FTP(S) Connection Configuration
      type: object
    connection_config_http:
      properties:
        config:
          properties:
            auth_data:
              maxLength: 1024
              type: string
            auth_method:
              enum:
              - NONE
              - BASIC
              - DIGEST
              - DIGEST_IE
              - BEARER_TOKEN
              type: string
            chunked_transfer_enabled:
              type: boolean
            connection_timeout_s:
              maximum: 86400
              minimum: 0
              type: integer
            custom_header_fields:
              items:
                properties:
                  name:
                    pattern: ^[ -~]*$
                    type: string
                  value:
                    pattern: ^[ -~]*$
                    type: string
                type: object
              type: array
            ignore_proxy:
              type: boolean
            password:
              maxLength: 512
              type: string
            port:
              maximum: 65535
              minimum: 1
              type: integer
            ssl_enable:
              type: boolean
            uri:
              format: uri
              maxLength: 1024
              type: string
            user:
              maxLength: 512
              type: string
          required:
          - uri
          type: object
        id:
          type: integer
        name:
          maxLength: 128
          type: string
        protocol:
          enum:
          - HTTP
          type: string
      required:
      - name
      - protocol
      - config
      title: HTTP(S) Connection Configuration
      type: object
    connection_config_mqtt:
      properties:
        config:
          additionalProperties: false
          properties:
            auth_enable:
              type: boolean
            client_id:
              maxLength: 8192
              type: string
            connection_timeout_s:
              maximum: 86400
              minimum: 0
              type: integer
            delivery_timeout_s:
              maximum: 86400
              minimum: 0
              type: integer
            password:
              maxLength: 512
              type: string
            port:
              maximum: 65535
              minimum: 1
              type: integer
            qos_level:
              maximum: 2
              minimum: 0
              type: integer
            ssl_enable:
              type: boolean
            topic:
              maxLength: 1024
              type: string
            uri:
              format: uri
              maxLength: 1024
              type: string
            user:
              maxLength: 512
              type: string
            websocket_enable:
              type: boolean
          required:
          - uri
          - topic
          type: object
        id:
          type: integer
        name:
          maxLength: 128
          type: string
        protocol:
          enum:
          - MQTT
          type: string
      required:
      - name
      - protocol
      - config
      title: MQTT(S) Connection Configuration
      type: object
    connection_config_sftp:
      properties:
        config:
          additionalProperties: false
          description: Configuration of a SFTP connection used for data push's
          properties:
            connection_timeout_s:
              maximum: 86400
              minimum: 0
              type: integer
            create_directories:
              type: boolean
            file_mode:
              enum:
              - PACKAGE
              - APPEND_INTERVAL
              - APPEND_MAX_SIZE
              type: string
            host_key:
              maxLength: 512
              type: string
            ignore_proxy:
              type: boolean
            max_file_size:
              type: integer
            new_directory_permission:
              maxLength: 9
              pattern: ((^[0-7]{3}$)|(([r-]{1}[w-]{1}[x-]{1}){3}))
              type: string
            new_file_permission:
              maxLength: 9
              pattern: ((^[0-7]{3}$)|(([r-]{1}[w-]{1}[x-]{1}){3}))
              type: string
            password:
              maxLength: 512
              type: string
            path:
              maxLength: 512
              type: string
            port:
              maximum: 65535
              minimum: 1
              type: integer
            ssh_compression_enable:
              type: boolean
            uri:
              format: uri
              maxLength: 1024
              type: string
            user:
              maxLength: 512
              type: string
          required:
          - uri
          - user
          type: object
        id:
          type: integer
        name:
          maxLength: 128
          type: string
        protocol:
          enum:
          - SFTP
          type: string
      required:
      - name
      - protocol
      - config
      title: SFTP Connection Configuration
      type: object
    connection_config_tcp:
      properties:
        config:
          additionalProperties: false
          properties:
            connection_timeout_s:
              maximum: 86400
              minimum: 0
              type: integer
            mode:
              enum:
              - CLIENT
              - SERVER
              - LEGACY_EVENT_STREAM_SERVER
              type: string
            port:
              maximum: 65535
              minimum: 1
              type: integer
            uri:
              format: uri
              maxLength: 1024
              type: string
          required:
          - mode
          type: object
        id:
          type: integer
        name:
          maxLength: 128
          type: string
        protocol:
          enum:
          - TCP
          type: string
      required:
      - name
      - protocol
      - config
      title: TCP Connection Configuration
      type: object
    connection_config_udp:
      properties:
        config:
          additionalProperties: false
          properties:
            connection_timeout_s:
              maximum: 86400
              minimum: 0
              type: integer
            mode:
              enum:
              - CLIENT
              - LEGACY_OBJECT_STREAM_SERVER
              type: string
            port:
              maximum: 65535
              minimum: 1
              type: integer
            uri:
              format: uri
              maxLength: 1024
              type: string
          required:
          - mode
          type: object
        id:
          type: integer
        name:
          maxLength: 128
          type: string
        protocol:
          enum:
          - UDP
          type: string
      required:
      - name
      - protocol
      - config
      title: UDP Connection Configuration
      type: object
    connection_protocols:
      enum:
      - HTTP
      - FTP
      - SFTP
      - MQTT
      - TCP
      - UDP
      type: string
    connection_test_response:
      properties:
        connection_test:
          properties:
            server_response:
              properties:
                code:
                  type: integer
                info:
                  type: string
              type: object
            status:
              enum:
              - OK
              - NOT_CONNECTED
              - CLIENT_ERROR
              - SERVER_ERROR
              - UNKNOWN
              type: string
          type: object
      type: object
    coord2d:
      description: JSON representation of points
      example:
      - 23.3
      - 12.0
      items:
        format: float
        type: number
      maxItems: 2
      minItems: 2
      title: Coord2D
      type: array
    coord3d:
      description: JSON representation of vectors
      example:
      - 0.4
      - 0.1
      - 1.0
      items:
        format: float
        type: number
      maxItems: 3
      minItems: 3
      title: Coord3D
      type: array
    count_event:
      description: A count event
      properties:
        counter_id:
          description: The id of the counter which gets modified by this count event.
          format: int64
          type: integer
        type:
          enum:
          - COUNT_INCREMENT
          - COUNT_DECREMENT
          - WRONG_WAY_DETECTED
          type: string
      title: Count event
      type: object
    count_event_types:
      oneOf:
      - items:
          enum:
          - COUNT_INCREMENT
          - COUNT_DECREMENT
          - COUNT_RESET
          - WRONG_WAY_DETECTED
          type: string
          uniqueItems: true
        type: array
      - enum:
        - ALL
        - NONE
        type: string
    count_record_status:
      properties:
        data_size:
          $ref: '#/components/schemas/uint'
        duration_s:
          $ref: '#/components/schemas/uint'
        id:
          type: integer
        time_begin:
          format: date-time
          type: string
      required:
      - id
      - time_begin
      - duration_s
      - data_size
      type: object
    count_status:
      properties:
        id:
          type: integer
        last_stored_total_value:
          $ref: '#/components/schemas/uint'
        logic_id:
          type: integer
        name:
          type: string
        reset_offset:
          $ref: '#/components/schemas/uint'
        reset_time:
          format: date-time
          type: string
      required:
      - id
      - name
      - last_stored_total_value
      - logic_id
      type: object
    counter:
      description: A counter
      properties:
        logic_id:
          description: Identifiaction of logic.
          format: int64
          type: integer
        name:
          description: Name of the counter.
          type: string
        type:
          enum:
          - accumulation
          - state
          type: string
      title: Counter
      type: object
    counter_collection:
      description: A list of counters
      properties:
        counters:
          items:
            $ref: '#/components/schemas/indexed_counter'
          type: array
      title: Collection of counters
      type: object
    counting_event:
      description: JSON representation of a counting event
      properties:
        counter_id:
          format: uint32
          type: number
        event_type:
          description: Type of geometry event
          enum:
          - INVALID
          - COUNT_INCREMENT
          - COUNT_DECREMENT
          - COUNT_RESET
          - WRONG_WAY_DETECTED
          example: COUNT_INCREMENT
          type: string
      title: Counting Event
      type: object
    counting_events:
      description: JSON representation of counting events
      items:
        $ref: '#/components/schemas/counting_event'
      title: Counting Events
      type: array
    cropping_get:
      allOf:
      - $ref: '#/components/schemas/cropping_put'
      - properties:
          cropping_possible:
            type: boolean
          tracking_area:
            $ref: '#/components/schemas/polygon'
        type: object
      title: Cropping Settings
    cropping_post:
      allOf:
      - $ref: '#/components/schemas/cropping_put'
      - properties:
          tracking_area:
            $ref: '#/components/schemas/polygon'
        type: object
      title: Cropping Settings
    cropping_put:
      properties:
        horizontal_cropping:
          example: 0.5
          format: float
          type: number
        vertical_cropping:
          example: -0.2
          format: float
          type: number
      title: Cropping Settings
      type: object
    custom_logic_template:
      properties:
        type:
          enum:
          - XLT_CUSTOM
          type: string
      required:
      - type
      type: object
    detection:
      description: JSON representation of detection of a single object
      properties:
        confidence:
          description: confidence of detection
          example: 0.98
          format: float
          type: number
        detection_type:
          description: Type of detection
          enum:
          - UNKOWN
          - PEAK
          - SHAPE
          - CNN
          - SYNTHETIC
          - LABEL
          example: PEAK
          type: string
        object_type:
          description: Type of object
          enum:
          - UNKOWN
          - PERSON
          - BICYCLE
          - GROUP
          - PRAM
          - WHEELCHAIR
          example: PERSON
          type: string
        position:
          $ref: '#/components/schemas/coord3d'
          description: 3d point
      title: Detection
      type: object
    detections:
      description: JSON representation of detections
      items:
        $ref: '#/components/schemas/detection'
      title: Detections
      type: array
    device_id:
      properties:
        group:
          default: ''
          description: Sensor group
          example: group 1
          type: string
        name:
          default: ''
          description: Sensor name
          example: my sensor
          type: string
      required:
      - name
      - group
      title: Device Identification
      type: object
    device_info:
      properties:
        fw_version:
          description: Firmware version running on sensor.
          example: 5.1.0
          type: string
        hw_bom_rev:
          description: BOM revision of device.
          example: B
          type: string
        hw_id:
          type: string
        hw_pcb_rev:
          description: PCB revision of device.
          example: C
          type: string
        hw_prod_rev:
          description: Production revision
          example: AD
          type: string
        prod_code:
          description: Device model.
          example: PC2RUL
          type: string
        serial:
          description: Serial number of sensor.
          example: 00:00:34:56:2b:7c
          type: string
        type:
          description: Device type based on electronics only.
          example: PC2R
          type: string
        variant:
          description: Device variant name
          example: PRT-400
          type: string
      required:
      - fw_version
      - serial
      - prod_code
      - type
      - variant
      - hw_bom_rev
      - hw_pcb_rev
      - hw_prod_rev
      - hw_id
      title: Device Info
      type: object
    device_led_mode:
      properties:
        enabled:
          default: true
          description: Indicates whether LED is enabled or not.
          example: true
          type: boolean
      required:
      - enabled
      title: Device LED Mode
      type: object
    device_state:
      properties:
        details:
          properties:
            temperatures:
              properties:
                die:
                  description: Die temperature in degree Celsius
                  example: 62
                  type: integer
                housing:
                  description: Housing temperature in degree Celsius
                  example: 45
                  type: integer
              type: object
            uptime_sec:
              description: Seconds since last boot
              example: 12390
              type: integer
          required:
          - uptime_sec
          - temperatures
          type: object
        state:
          description: State of sensor device
          enum:
          - UNDEFINED
          - OK
          - RESCUE
          - UPDATING
          - REBOOTING
          example: OK
          type: string
      required:
      - state
      - details
      title: Device State
      type: object
    diag_bundle_state:
      properties:
        creation_date:
          description: Time of diag bundle creation (format RFC3339)
          example: 2021-03-31T09:15:53+0100
          type: string
        state:
          description: State of diag bundle package
          enum:
          - UNINITIALIZED
          - IN_PROGRESS
          - AVAILABLE
          - ERROR
          example: UNINITIALIZED
          type: string
      required:
      - state
      title: Diag Bundle state
      type: object
    digital_input_statistics_item:
      properties:
        frame_number_begin:
          example: 20
          format: uint64
          type: number
        frame_number_end:
          example: 30
          format: uint64
          type: number
        percentage:
          example: 0.5
          format: float
          type: number
        state:
          type: boolean
    discover_scan_job:
      properties:
        count:
          example: 100
          type: integer
        first_ip:
          example: 192.168.1.5
          type: string
      required:
      - first_ip
      - count
      title: Sensor discover scan job
      type: object
    discover_scan_result:
      properties:
        sensors:
          items:
            $ref: '#/components/schemas/discover_sensor'
          type: array
      required:
      - sensors
      title: Sensor discovery result list
      type: object
    discover_sensor:
      properties:
        fw_version:
          example: 5.0.1
          type: string
        group:
          example: MyGroup
          type: string
        ip:
          example: 192.168.1.10
          type: string
        ipv6:
          items:
            example: fe80::9880:e8ff:fe69:ca7e
            type: string
          type: array
        mac:
          example: 01:02:03:04:05:06
          type: string
        model:
          example: PC2RUL
          type: string
        name:
          example: MySensor
          type: string
        ports:
          items:
            properties:
              number:
                example: 443
                type: integer
              service:
                example: https
                type: string
            required:
            - service
            - number
            type: object
          type: array
      required:
      - mac
      - ip
      - ipv6
      - ports
      - model
      - name
      - group
      - fw_version
      title: Sensor discovery object
      type: object
    door:
      properties:
        ignore_timestamp:
          type: boolean
        name:
          description: Name of the door.
          type: string
        open_signal:
          enum:
          - HIGH
          - LOW
          type: string
        source:
          enum:
          - DIGITAL_IO
          - FMStoIP
          - VEHICLEtoIP
          type: string
        source_door_id:
          format: integer
          type: number
      title: Door
      type: object
    door_status:
      properties:
        id:
          format: integer
          type: number
        name:
          example: Front door
          type: string
        status:
          enum:
          - OPEN
          - CLOSED
          - NOT_AVAILABLE
          - ERROR
          - OUT_OF_SYNC
          type: string
      title: Door status
      type: object
    doors:
      properties:
        doors:
          items:
            $ref: '#/components/schemas/indexed_door'
          type: array
      title: Doors
      type: object
    doors_status:
      items:
        $ref: '#/components/schemas/door_status'
      title: Doors status
      type: array
    download_config:
      properties:
        auto_download:
          description: Allows sensor to download latest minor update available on
            the sensor automatically
          example: false
          type: boolean
        auto_refresh:
          description: Allows sensor to try to refresh updates available at least
            once per day
          example: true
          type: boolean
      title: Update service, configuration for update automation parameters
      type: object
    download_state:
      properties:
        error:
          description: Error details of the last download if failed
          properties:
            code:
              example: 1
              type: integer
            info:
              example: Failed to connect to server
              type: string
          required:
          - code
          - info
          type: object
        progress:
          description: Current progress of the active download
          example: 99.99
          type: number
        state:
          description: State of last/active download
          enum:
          - UNDEFINED
          - ACTIVE
          - COMPLETE
          - ERROR
          example: UNDEFINED
          type: string
        version:
          description: Version of last/active download
          example: 5.0.0-adsfasdf
          type: string
      required:
      - state
      title: Information about current/last download
      type: object
    embedded_ui_config:
      properties:
        path:
          description: Path to the top html file of the sandbox UI
          example: /sandbox/index.html
          type: string
        title:
          default: ''
          description: Title of link / button in main ui
          example: Sandbox UI
          type: string
      title: Embbeded sandbox UI configuration
      type: object
    error_message:
      properties:
        code:
          description: Error code
          example: 11100
          type: number
        detail:
          description: Optional detail about the error
          items:
            type: string
          type: array
        info:
          description: Short error description
          example: The json could not be parsed.
          type: string
      title: Error Message
      type: object
    existing_scene_mask:
      allOf:
      - $ref: '#/components/schemas/scene_mask'
      - properties:
          id:
            description: Identification of the mask
            example: 21
            type: integer
        type: object
      description: JSON representation of a scene mask
      title: Existing scene mask
    existing_view_mask:
      allOf:
      - $ref: '#/components/schemas/view_mask'
      - properties:
          id:
            description: Identification of the mask
            example: 21
            type: integer
        type: object
      description: JSON representation of a view mask
      title: Existing view mask
    extension_headers:
      properties:
        entries:
          items:
            properties:
              enabled:
                example: true
                type: boolean
              id:
                description: 'extension identifier: PIFMD, PIGES, PISTE, PIVID'
                example: PIFMD
                type: string
            type: object
          type: array
      required:
      - entries
      title: Extension Headers
      type: object
    extension_piges:
      properties:
        alternativeColors:
          description: Visualize gender in alternative colors
          type: boolean
        ambiguousDetectionStrategy:
          type: boolean
        genderSymbol:
          description: Visualize gender symbol
          type: boolean
        viewEnabled:
          description: Visualize gender in ui
          type: boolean
      title: Extension gender estimation ui configuration
      type: object
    extension_piste:
      properties:
        type:
          type: string
        typeSelected:
          type: string
        viewEnabled:
          description: Visualize staff in ui
          type: boolean
      title: Extension staff exclusion ui configuration
      type: object
    filter_operator:
      description: An operator.
      properties:
        type:
          enum:
          - AND
          - OR
          - NOT
          type: string
      type: object
    floor_plan_metadata:
      properties:
        distance:
          format: float
          type: number
        end:
          $ref: '#/components/schemas/coord2d'
        group:
          example: office 3
          type: string
        name:
          example: floor plan
          type: string
        origin:
          $ref: '#/components/schemas/coord2d'
        start:
          $ref: '#/components/schemas/coord2d'
      title: Floor plan metadata
      type: object
    formats:
      enum:
      - JSON
      - PROTOBUF
      - BINARY
      - XML
      - RECORDING
      type: string
    formatted_timestamp:
      anyOf:
      - $ref: '#/components/schemas/timestamp_unix_ms'
      - $ref: '#/components/schemas/timestamp_unix_s'
      - $ref: '#/components/schemas/timestamp_rfc3339'
    geometry_event:
      description: JSON representation of a geometry event
      properties:
        event_type:
          description: Type of geometry event
          enum:
          - INVALID
          - TRACK_CREATE
          - TRACK_DELETE
          - LINE_CROSS_FORWARD
          - LINE_CROSS_BACKWARD
          - ZONE_ENTRY
          - ZONE_EXIT
          example: LINE_CROSS_FORWARD
          type: string
        geometry_id:
          format: uint32
          type: number
        sequence_number:
          format: uint16
          type: number
        track_id:
          format: uint64
          type: number
      title: Geometry Event
      type: object
    gigabit_enabled:
      properties:
        gigabit_enabled:
          description: Indicates whether gigabit is enabled or disabled.
          example: false
          type: boolean
      required:
      - gigabit_enabled
      title: Gigabit Ethernet
      type: object
    group_line_count_logic_template:
      properties:
        options:
          allOf:
          - $ref: '#/components/schemas/base_line_count_template_options'
        type:
          enum:
          - XLT_GROUP_LINE_IN_OUT_COUNT
          - XLT_GROUP_LINE_LATE_COUNT
          type: string
      required:
      - type
      type: object
    groups_settings:
      description: ''
      properties:
        delay:
          description: Delay of group track in [s].
          example: 2.0
          format: float
          maximum: 10.0
          minimum: 1.0
          type: number
        max_distance:
          description: The maximum distance between two group members in [m].
          example: 1.0
          format: float
          maximum: 1000.0
          minimum: 0.0
          type: number
      title: Groups settings
      type: object
    heat_height_map:
      properties:
        data:
          items:
            items:
              example: 0.543
              format: float
              type: number
            type: array
          type: array
        info:
          $ref: '#/components/schemas/map_info'
        metadata:
          $ref: '#/components/schemas/image_metadata'
      title: Heat map
    history_logics:
      description: A list of measurements (bin) and contained counter values for a
        defined time range and resolution with corresponding config metadata
      properties:
        begin:
          $ref: '#/components/schemas/formatted_timestamp'
        begin_data:
          $ref: '#/components/schemas/formatted_timestamp'
        config:
          $ref: '#/components/schemas/history_logics_config'
        end:
          $ref: '#/components/schemas/formatted_timestamp'
        end_data:
          $ref: '#/components/schemas/formatted_timestamp'
        index_begin:
          type: integer
        index_end:
          type: integer
        measurements:
          items:
            properties:
              begin:
                $ref: '#/components/schemas/formatted_timestamp'
              counts:
                items:
                  properties:
                    id:
                      description: the id of the corresponding counter config
                      type: integer
                    value:
                      description: Either the differential count value for this measurement
                        (accumlation counter) or the absolute value at the end of
                        the measurement period (state counter)
                      type: integer
                  type: object
                type: array
              end:
                $ref: '#/components/schemas/formatted_timestamp'
              records:
                description: Number of count records found within the measurement
                  bin's time frame
                type: integer
            type: object
          type: array
        number_of_bins:
          type: integer
        number_of_bins_requested:
          type: integer
        resolution_ms:
          type: integer
      title: History logics (counts) data
    history_logics_config:
      properties:
        counts:
          items:
            properties:
              id:
                type: integer
              logic_id:
                description: id of logic the counter belongs to
                type: integer
              name:
                description: name of the counter
                type: string
              type:
                enum:
                - accumulation
                - state
                type: string
            type: object
          type: array
        geometries:
          items:
            properties:
              id:
                type: integer
              name:
                description: name of the geometry
                type: string
              type:
                enum:
                - LINE
                - ZONE
                type: string
            type: object
          type: array
        logics:
          items:
            properties:
              geometries:
                items:
                  description: id's of related geometries (main geometry is at index
                    0 if defined)
                  type: integer
                type: array
              id:
                type: integer
              last_modified:
                $ref: '#/components/schemas/formatted_timestamp'
              name:
                description: name of the logic
                type: string
              optional_data:
                description: optional string associated with the logic
                type: string
            type: object
          type: array
      type: object
    history_status:
      description: Status information for history data and data storage
      properties:
        storage:
          properties:
            capacity:
              properties:
                count_records:
                  $ref: '#/components/schemas/uint'
                fill_level_percent:
                  type: number
                memory:
                  $ref: '#/components/schemas/uint'
                time:
                  type: string
                time_s:
                  $ref: '#/components/schemas/uint'
              required:
              - memory
              - count_records
              - time_s
              - fill_level_percent
              type: object
            stored_data:
              properties:
                counts:
                  items:
                    $ref: '#/components/schemas/count_status'
                  type: array
                logics:
                  items:
                    $ref: '#/components/schemas/logic_status'
                  type: array
                newest_count_record:
                  $ref: '#/components/schemas/count_record_status'
                number_of_count_records:
                  $ref: '#/components/schemas/uint'
                oldest_count_record:
                  $ref: '#/components/schemas/count_record_status'
                retention_time:
                  type: string
                retention_time_s:
                  $ref: '#/components/schemas/uint'
                time_begin:
                  format: date-time
                  type: string
                time_end:
                  format: date-time
                  type: string
              required:
              - time_begin
              - time_end
              - retention_time_s
              - number_of_count_records
              - oldest_count_record
              - newest_count_record
              - logics
              - counts
              type: object
          required:
          - capacity
          - stored_data
          type: object
      required:
      - storage
      title: Histiry data status
      type: object
    hostname:
      properties:
        hostname:
          example: XS-SENSOR-71fbf5
          type: string
      required:
      - hostname
      title: Sensors Hostname
      type: object
    illumination_statistics_item:
      properties:
        frame_number_begin:
          example: 20
          format: uint64
          type: number
        frame_number_end:
          example: 40
          format: uint64
          type: number
        percentage:
          example: 1.0
          format: float
          type: number
        sufficient:
          type: boolean
    image_metadata:
      description: ''
      example:
        height_px: 421
        pixel_to_ref:
          $ref: '#/components/schemas/affine_transformation2d/example'
        ref_coordinate_system: SCENE
        ref_to_pixel:
          $ref: '#/components/schemas/affine_transformation2d/example'
        width_px: 234
      properties:
        height_px:
          description: Image height in pixels
          example: 421
          type: integer
        pixel_to_ref:
          $ref: '#/components/schemas/affine_transformation2d'
        ref_coordinate_system:
          description: Reference coordinate system of the image
          enum:
          - VIEW
          - SCENE
          type: string
        ref_to_pixel:
          $ref: '#/components/schemas/affine_transformation2d'
        width_px:
          description: Image width in pixels
          example: 234
          type: integer
      title: Image metadata
      type: object
    included_logics:
      oneOf:
      - items:
          type: integer
          uniqueItems: true
        type: array
      - enum:
        - ALL
        - NONE
        type: string
    indexed_blocked_space:
      allOf:
      - $ref: '#/components/schemas/blocked_space'
      - properties:
          id:
            description: Identification of the zone
            example: 21
            type: integer
          percentage:
            description: percentage of blocked space
            example: 0.13
            format: float
            type: number
          type:
            enum:
            - BLOCKED_SPACE
            type: string
        type: object
      description: JSON representation of an observed space
      title: Existing space
    indexed_counter:
      allOf:
      - $ref: '#/components/schemas/counter'
      - properties:
          id:
            description: Identifiaction of counter.
            format: int64
            type: integer
        type: object
      description: Indexed counter
      title: Indexed counter
    indexed_door:
      allOf:
      - $ref: '#/components/schemas/door'
      - properties:
          id:
            description: Identifiaction of door.
            format: int64
            type: integer
        type: object
      title: Indexed door
    indexed_logic:
      allOf:
      - $ref: '#/components/schemas/logic'
      - properties:
          id:
            description: Identifiaction of logic.
            format: int64
            type: integer
        type: object
      description: Indexed logic
      title: Indexed logic
    indexed_logic_template:
      allOf:
      - $ref: '#/components/schemas/logic_template'
      - properties:
          id:
            description: Identifiaction of logic.
            format: int64
            type: integer
        required:
        - id
        type: object
      description: Indexed logic template
      title: Indexed logic template
    indexed_modifier:
      allOf:
      - $ref: '#/components/schemas/modifier'
      - properties:
          id:
            description: Identifiaction of modifier.
            format: int64
            type: integer
        type: object
      description: Indexed modifier
      title: Indexed modifier
    indexed_recording_schedule:
      properties:
        id:
          example: 5
          format: uint64
          type: number
        singlesensor_recordings:
          items:
            $ref: '#/components/schemas/singlesensor_recording'
          type: array
        time_end:
          description: End of time interval (milliseconds since epoch in UTC).
          example: 1634832747
          format: uint64
          type: number
        time_start:
          description: Begin of time interval (milliseconds since epoch in UTC).
          example: 1634829147
          format: uint64
          type: number
      title: Indexed Recording
      type: object
    indexed_remote_connection:
      allOf:
      - $ref: '#/components/schemas/remote_connection'
      - properties:
          id:
            description: Identifier of remote connection configuration
            example: 1
            type: integer
        required:
        - id
        type: object
      title: Indexed Remote Connection
    indexed_remote_connection_state:
      allOf:
      - $ref: '#/components/schemas/remote_connection_state'
      - properties:
          id:
            description: Identifier of remote connection
            example: 1
            type: integer
        required:
        - id
        type: object
      title: Indexed Remote Connection State
    indexed_scene_geometry:
      allOf:
      - $ref: '#/components/schemas/scene_geometry'
      - properties:
          id:
            description: Identifiaction of geometry.
            format: int64
            type: integer
        type: object
      description: Indexed scene geometry
      example:
        geometry:
        - - 123
          - 133
        - - 124
          - 513
        id: 12
        name: Door
        type: LINE
      title: Indexed scene geometry
    info_event_types:
      oneOf:
      - items:
          enum:
          - SENSOR_FAILURE
          - DIGITAL_INPUT_HIGH
          - DIGITAL_INPUT_LOW
          - BLOCKED_SPACE_ABOVE
          - BLOCKED_SPACE_BELOW
          - ILLUMINATION_SUFFICIENT
          - ILLUMINATION_INSUFFICIENT
          type: string
          uniqueItems: true
        type: array
      - enum:
        - ALL
        - NONE
        type: string
    itxpt_apc_object_details:
      properties:
        in_counter_id:
          description: Identification of in counter
          format: int64
          type: integer
        logic_id:
          description: Identification of logic that counts specific object
          format: int64
          type: integer
        out_counter_id:
          description: Identification of out counter
          format: int64
          type: integer
      title: ITxPT APC Object details
      type: object
    itxpt_config:
      properties:
        apc_path:
          default: /api/v5/itxpt/services/apc/passengerdoorcount
          description: Path for APC operations (reflected in mdns record)
          type: string
        apc_push_max_resolution_ms:
          default: 1000
          description: Only required when apc_push_type = on_event. Maximal output
            rate of data published
          maximum: 5000
          minimum: 80
          type: integer
        apc_push_period_ms:
          default: 1000
          description: Only required when apc_push_type = periodic. Period of data
            published
          maximum: 60000
          minimum: 80
          type: integer
        apc_push_type:
          default: on_event
          description: APC push type configured
          enum:
          - on_event
          - periodic
          type: string
        consumed_services_timeout_s:
          default: 3600
          description: Listening timeout for all consumed services. The service listeners
            are automatically restarted after the timeout. If set to 0 no timeout
            is considered
          maximum: 86400
          minimum: 0
          type: integer
        custom_vehicle_id:
          default: ''
          description: custom id when selected vehicle id source is set to custom
          example: Batmobile
          type: string
        fmstoip_update_policy:
          default: on_change
          description: Set update policy for FMStoIP. Only applicable for versions
            2.2.0 and higher
          enum:
          - on_change
          - every_second
          type: string
        heartbeat_period_ms:
          default: 30000
          description: Only required when apc_push_type = on_event. Heartbeat when
            no event was generated
          maximum: 60000
          minimum: 1000
          type: integer
        inventory_path:
          default: /api/v5/itxpt/services/inventory/moduleinfo.xml
          description: Path for inventory operations (reflected in mdns record)
          type: string
        itxpt_enabled:
          default: false
          description: Indicates whether itxpt features are enabled or not.
          type: boolean
        nb_retries_before_expiration:
          default: 5
          description: Number of retries before unsubscribing a client
          type: integer
        protocol_version:
          default: v2.0.1
          description: Set protocol version for published services (APC and Inventory)
          enum:
          - v2.0.1
          - v2.1.0
          - v2.1.1
          type: string
        vehicle_id_source:
          default: custom
          description: Supported vehicle id source information
          enum:
          - fmstoip
          - vehicletoip
          - custom
          type: string
      required:
      - itxpt_enabled
      - protocol_version
      - apc_push_type
      - vehicle_id_source
      title: ITxPT configuration
      type: object
    itxpt_config_door:
      properties:
        adult:
          $ref: '#/components/schemas/itxpt_apc_object_details'
          description: Details for adult objects counting
        apc_door_id:
          description: Identification used for door in APC message
          format: int64
          type: integer
        bicycle:
          $ref: '#/components/schemas/itxpt_apc_object_details'
          description: Details for bicycle objects counting
        child:
          $ref: '#/components/schemas/itxpt_apc_object_details'
          description: Details for child objects counting
        id:
          description: Identification of door
          format: int64
          type: integer
        pram:
          $ref: '#/components/schemas/itxpt_apc_object_details'
          description: Details for pram objects counting
        sensor_door_id:
          description: Identification of sensor door as configured under /singlesensor/analysis/doors
          format: int64
          type: integer
        wheelchair:
          $ref: '#/components/schemas/itxpt_apc_object_details'
          description: Details for wheelchair objects counting
      required:
      - apc_door_id
      - sensor_door_id
      title: ITxPT door configuration
      type: object
    itxpt_config_door_collection:
      description: A list of apc doors
      properties:
        doors:
          items:
            $ref: '#/components/schemas/itxpt_config_door'
          type: array
      title: Collection of apc doors
      type: object
    itxpt_config_txt:
      properties:
        additionalProperties:
          type: string
      title: TXT records
      type: object
    itxpt_custom_configurations:
      properties:
        customField1:
          description: Custom free text 1
          maximum: 255
          type: string
        customField2:
          description: Custom free text 2
          maximum: 255
          type: string
      title: ITxPT custom configurations
      type: object
    itxpt_services_state:
      properties:
        apc_devices:
          description: Devices on the network also having apc service
          items:
            $ref: '#/components/schemas/mdns_state'
          type: array
        consumers:
          description: Devices consuming our services published
          items:
            properties:
              ip:
                description: IP of the device subscribed to the service
                type: string
              path:
                description: path used to access the service
                type: string
              port:
                description: port used to access the service
                type: integer
            type: object
          type: array
        services_published:
          description: Sensor services published
          items:
            $ref: '#/components/schemas/mdns_state'
          type: array
        services_subscribed:
          description: Sensor subscribed services
          items:
            $ref: '#/components/schemas/mdns_state'
          type: array
      required:
      - services_subscribed
      - services_published
      - consumers
      - apc_devices
      title: ITxPT services details
      type: object
    itxpt_state:
      properties:
        vehicle_id:
          default: Batmobile
          description: Vehicle ID
          type: string
      required:
      - vehicle_id
      title: ITxPT state
      type: object
    itxpt_state_deprecated:
      properties:
        doors:
          items:
            properties:
              door_id:
                description: Door id for ITxPT APC
                type: integer
              door_source:
                description: Supported door source information
                enum:
                - digital_io
                - fmstoip
                - vehicletoip
                type: string
              door_source_protocol_version:
                description: Actual used protocol version of the protocol source.
                enum:
                - v2.0.1
                - v2.1.0
                - v2.1.1
                - not_supported
                - unknown
                type: string
              door_state:
                default: unknown
                enum:
                - Open
                - Close
                - Error
                - NotAvailable
                - unknown
                type: string
              logic_id_adult:
                description: logic_id to read counter values of Adults
                type: integer
              logic_id_bicycle:
                description: logic_id to read counter values of Bikes
                type: integer
              logic_id_child:
                description: logic_id to read counter values of Childs
                type: integer
              logic_id_pram:
                description: logic_id to read counter values of Prams
                type: integer
              logic_id_wheelchair:
                description: logic_id to read counter values of Wheelchairs
                type: integer
            required:
            - door_id
            - door_state
            - door_source
            - door_source_protocol_version
            - logic_id_adult
            - logic_id_child
            - logic_id_bicycle
            - logic_id_pram
            - logic_id_wheelchair
            type: object
          type: array
        ready:
          description: Means APC is configured and running. Everything else could
            be reasonably defaulted.
          type: boolean
        vehicle_id:
          default: Batmobile
          description: Vehicle ID
          type: string
        vehicle_id_source:
          description: Vehicle ID source
          enum:
          - fmstoip
          - vehicletoip
          - custom
          type: string
        vehicle_id_source_protocol_version:
          description: Actual used protocol version of the vehicle id source.
          enum:
          - v2.0.1
          - v2.1.0
          - v2.1.1
          - not_supported
          - unknown
          type: string
      required:
      - ready
      - vehicle_id
      - vehicle_id_source
      - vehicle_id_source_protocol_version
      title: ITxPT state
      type: object
    itxpt_time:
      properties:
        searching:
          default: false
          description: If a time service publisher is currently looked for
          type: boolean
        sntp_server:
          default: ''
          description: Contains ip address of the sntp server found or message status
          type: string
      required:
      - searching
      - sntp_server
      title: ITxPT time discovery status
      type: object
    itxpt_time_config:
      properties:
        time_discovery:
          default: false
          description: Set discovery of a ITxPT time service
          type: boolean
      required:
      - time_discovery
      title: ITxPT time discovery configuration
      type: object
    legacy_config_get:
      properties:
        available:
          type: boolean
        enabled:
          type: boolean
        sensor_geometry:
          $ref: '#/components/schemas/sensor_geometry'
      type: object
    legacy_config_put:
      properties:
        enabled:
          type: boolean
      type: object
    legacy_mode:
      properties:
        enabled:
          description: Enable legacy support
          type: boolean
      title: Legacy support mode
      type: object
    legacy_person_line_count_logic_template:
      properties:
        options:
          allOf:
          - $ref: '#/components/schemas/base_line_count_template_options'
          - $ref: '#/components/schemas/base_person_line_count_template_options'
          - properties:
              count_face_mask:
                type: boolean
            type: object
        type:
          enum:
          - XLT_4X_LINE_IN_OUT_COUNT
          - XLT_4X_LINE_LATE_COUNT
          type: string
      required:
      - type
      type: object
    legacy_zone_in_out_count_logic_template:
      properties:
        options:
          allOf:
          - $ref: '#/components/schemas/base_zone_count_template_options'
          - properties:
              max_dwell_time:
                format: float
                type: number
              min_dwell_time:
                format: float
                type: number
            type: object
        type:
          enum:
          - XLT_4X_ZONE_COUNT
          type: string
      required:
      - type
      type: object
    license_add_response:
      properties:
        details:
          items:
            description: Details for each feature contained in the license
            properties:
              code:
                description: Code related to the error occurred
                type: integer
              details:
                description: Details about this specific feature
                example: Accepted
                type: string
              id:
                description: What id did the feature have that wanted to be included
                example: 1000
                type: integer
            type: object
          type: array
        info:
          description: Could the license be fully/partial/not at all added
          type: string
      title: License response after adding a new one
      type: object
    license_config:
      properties:
        connect:
          default: false
          description: enables communication with the license server
          type: boolean
        plugins:
          items:
            description: Deprecated - Plugin/license numbers to get a recurring license
              for
            example: 103, 104
            type: integer
          type: array
        proxy_enable:
          description: Deprecated
          type: boolean
      required:
      - connect
      title: License config
      type: object
    license_status:
      properties:
        licensed_lifetime:
          items:
            description: License ids currently licensed on sensor from fixed license
              file
            properties:
              feature:
                example: PIFLT
                type: string
              id:
                example: 104
                type: integer
            required:
            - id
            - feature
            type: object
          type: array
        licensed_recurring:
          items:
            description: License ids currently licensed on sensor (recurring licenses)
            properties:
              days:
                example: 30
                type: integer
              feature:
                example: PIGES
                type: string
              id:
                example: 112
                type: integer
            required:
            - id
            - feature
            - days
            type: object
          type: array
        licensed_test:
          items:
            description: License ids currently licensed on sensor (test licenses)
            properties:
              days:
                example: 30
                type: integer
              feature:
                example: PIGES
                type: string
              id:
                example: 112
                type: integer
            required:
            - id
            - feature
            - days
            type: object
          type: array
        test_license_available:
          description: The test license is still available for activation
          type: boolean
      required:
      - licensed_lifetime
      - licensed_recurring
      - licensed_test
      - test_license_available
      title: License status
      type: object
    license_status_detailed:
      properties:
        licenses:
          items:
            description: Details of each license of the sensor
            properties:
              feature:
                example: PIPAB
                type: string
              id:
                example: 1000
                type: integer
              remaining_days:
                description: The number of days remaining before expiration (-1 =>
                  lifetime)
                example: 10
                type: integer
              state:
                description: State of the license
                enum:
                - ENABLED
                - TEST_ENABLED
                - EXPIRED
                - NOT_LICENSED
                example: ENABLED
                type: string
              test_license_available:
                default: true
                description: The test license is still available for activation
                type: boolean
            required:
            - id
            - feature
            - state
            - test_license_available
            - remaining_days
            type: object
          type: array
      required:
      - licensed_lifetime
      - licensed_recurring
      - licensed_test
      - test_license_available
      title: License status detailed
      type: object
    light_settings:
      description: ''
      properties:
        light_frequency:
          description: Optional value. The frequency of dominant LED lights in Hz.
          example: 100.5
          format: float
          type: number
        power_frequency:
          description: The power frequency in Hz.
          example: 50.0
          format: float
          type: number
      required:
      - power_frequency
      title: Light conditions
      type: object
    line:
      description: JSON representation of lines
      example:
      - - 23.3
        - 12.0
      - - 47.2
        - 3.141
      items:
        $ref: '#/components/schemas/coord2d'
      maxItems: 2
      minItems: 2
      title: Line
      type: array
    linear_transformation2d:
      allOf:
      - $ref: '#/components/schemas/matrix2d'
      description: JSON representation of linear transformation
      example:
      - - 1
        - 0
      - - 0
        - 1
      title: Linear transformation 2d
    linear_transformation3d:
      allOf:
      - $ref: '#/components/schemas/matrix3d'
      description: JSON representation of linear transformation
      example:
      - - 1
        - 0
        - 0
      - - 0
        - 1
        - 0
      - - 0
        - 0
        - 1
      title: Linear transformation 3d
    live_count_collection:
      properties:
        counts:
          items:
            $ref: '#/components/schemas/live_count_item'
          type: array
        time:
          description: RFC3339 timestamp including timezone offset of contained measurements
          format: date-time
          type: string
      title: Live count value collection
      type: object
    live_count_item:
      properties:
        id:
          description: Identification of count
          format: int64
          type: integer
        logic_id:
          description: Identification of corresponding logic
          format: int64
          type: integer
        name:
          description: Name of count
          type: string
        value:
          description: Value of count
          format: int64
          type: integer
      title: Live count value
      type: object
    live_count_specific:
      properties:
        count:
          $ref: '#/components/schemas/live_count_item'
        time:
          description: RFC3339 timestamp including timezone offset of contained measurements
          format: date-time
          type: string
      title: Specific live count value
      type: object
    live_data:
      description: ''
      properties:
        framenumber:
          format: int64
          type: integer
        mac_address:
          description: MAC of sensor
          type: string
        time:
          $ref: '#/components/schemas/time_instant'
        tracked_objects:
          $ref: '#/components/schemas/tracked_objects'
      title: Live data
      type: object
    live_image_meta_headers:
      allOf:
      - $ref: '#/components/schemas/static_image_meta_headers'
      - properties:
          framenumber:
            format: int64
            type: integer
          time:
            $ref: '#/components/schemas/time_instant'
        type: object
      description: ''
      title: Live image meta data header
    live_logics_collection:
      properties:
        logics:
          items:
            $ref: '#/components/schemas/live_logics_item'
          type: array
        time:
          description: RFC3339 timestamp including timezone offset of contained measurements
          format: date-time
          type: string
      title: Collections of logics and corresponding counts
      type: object
    live_logics_item:
      properties:
        counts:
          items:
            $ref: '#/components/schemas/live_count_item'
          type: array
        geometries:
          items:
            properties:
              id:
                format: int64
                type: integer
              name:
                type: string
              type:
                enum:
                - LINE
                - ZONE
                type: string
            type: object
          type: array
        id:
          format: int64
          type: integer
        info:
          type: string
        name:
          type: string
      title: Live logic item
      type: object
    live_logics_specific:
      properties:
        logic:
          $ref: '#/components/schemas/live_logics_item'
        time:
          description: RFC3339 timestamp including timezone offset of contained measurements
          format: date-time
          type: string
      title: Live counts of specific logic
      type: object
    live_view_image_meta_headers:
      allOf:
      - $ref: '#/components/schemas/live_image_meta_headers'
      - properties:
          tracked_objects:
            $ref: '#/components/schemas/tracked_objects'
        type: object
      description: ''
      title: Live view image meta data header
    logic:
      description: An logic object
      properties:
        name:
          description: Name of the logic.
          type: string
        optional_data:
          description: Optional string associated with the logic.
          type: string
      required:
      - name
      title: Logic
      type: object
    logic_collection:
      description: Collection of indexed logics
      properties:
        logics:
          items:
            $ref: '#/components/schemas/indexed_logic'
          type: array
      title: Logic collection
      type: object
    logic_status:
      properties:
        count_records:
          $ref: '#/components/schemas/uint'
        geometry_id:
          type: integer
        geometry_name:
          type: string
        geometry_type:
          type: string
        id:
          $ref: '#/components/schemas/uint'
        info:
          type: string
        name:
          type: string
        retention_time:
          type: string
        retention_time_s:
          $ref: '#/components/schemas/uint'
        time_begin:
          format: date-time
          type: string
      required:
      - id
      - name
      - info
      - geometry_id
      - geometry_type
      - geometry_name
      - time_begin
      - count_records
      - retention_time_s
      type: object
    logic_template:
      description: A logic template
      properties:
        name:
          type: string
        template:
          discriminator:
            mapping:
              XLT_4X_LINE_IN_OUT_COUNT: '#/components/schemas/legacy_person_line_count_logic_template'
              XLT_4X_LINE_LATE_COUNT: '#/components/schemas/legacy_person_line_count_logic_template'
              XLT_4X_ZONE_COUNT: '#/components/schemas/legacy_zone_in_out_count_logic_template'
              XLT_BICYCLE_LINE_IN_OUT_COUNT: '#/components/schemas/object_line_count_logic_template'
              XLT_BICYCLE_LINE_LATE_COUNT: '#/components/schemas/object_line_count_logic_template'
              XLT_CUSTOM: '#/components/schemas/custom_logic_template'
              XLT_GROUP_LINE_IN_OUT_COUNT: '#/components/schemas/group_line_count_logic_template'
              XLT_GROUP_LINE_LATE_COUNT: '#/components/schemas/group_line_count_logic_template'
              XLT_LINE_IN_OUT_COUNT: '#/components/schemas/person_line_count_logic_template'
              XLT_LINE_LATE_COUNT: '#/components/schemas/person_line_count_logic_template'
              XLT_PRAM_LINE_IN_OUT_COUNT: '#/components/schemas/object_line_count_logic_template'
              XLT_PRAM_LINE_LATE_COUNT: '#/components/schemas/object_line_count_logic_template'
              XLT_WHEELCHAIR_LINE_IN_OUT_COUNT: '#/components/schemas/object_line_count_logic_template'
              XLT_WHEELCHAIR_LINE_LATE_COUNT: '#/components/schemas/object_line_count_logic_template'
              XLT_WRONG_WAY_DETECTION: '#/components/schemas/wrong_way_count_logic_template'
              XLT_ZONE_DOOR_COUNT: '#/components/schemas/zone_door_count_logic_template'
              XLT_ZONE_IN_OUT_COUNT: '#/components/schemas/zone_in_out_count_logic_template'
              XLT_ZONE_OCCUPANCY_COUNT: '#/components/schemas/zone_occupancy_count_logic_template'
            propertyName: type
          oneOf:
          - $ref: '#/components/schemas/custom_logic_template'
          - $ref: '#/components/schemas/person_line_count_logic_template'
          - $ref: '#/components/schemas/legacy_person_line_count_logic_template'
          - $ref: '#/components/schemas/group_line_count_logic_template'
          - $ref: '#/components/schemas/object_line_count_logic_template'
          - $ref: '#/components/schemas/zone_occupancy_count_logic_template'
          - $ref: '#/components/schemas/zone_in_out_count_logic_template'
          - $ref: '#/components/schemas/legacy_zone_in_out_count_logic_template'
          - $ref: '#/components/schemas/wrong_way_count_logic_template'
          - $ref: '#/components/schemas/zone_door_count_logic_template'
      title: Logic template
      type: object
    logic_template_collection:
      description: Collection logic templates
      properties:
        logics:
          items:
            $ref: '#/components/schemas/indexed_logic_template'
          type: array
      title: Logic template collection
      type: object
    map_info:
      properties:
        begin:
          $ref: '#/components/schemas/time_instant'
        end:
          $ref: '#/components/schemas/time_instant'
        max:
          format: float
          type: number
        min:
          format: float
          type: number
      type: object
    matrix2d:
      description: JSON representation of matrices
      example:
      - - 1
        - 0
      - - 0
        - 1
      items:
        $ref: '#/components/schemas/coord2d'
      maxItems: 2
      minItems: 2
      title: Matrix2D
      type: array
    matrix3d:
      description: JSON representation of matrices
      example:
      - - 1
        - 0
        - 0
      - - 0
        - 1
        - 0
      - - 0
        - 0
        - 1
      items:
        $ref: '#/components/schemas/coord3d'
      maxItems: 3
      minItems: 3
      title: Matrix3D
      type: array
    mdns_config:
      properties:
        mdns_enabled:
          default: false
          type: boolean
        scan_period_ms:
          default: 600
          type: integer
      required:
      - mdns_enabled
      title: mdns configuration
      type: object
    mdns_state:
      properties:
        services:
          items:
            properties:
              hosname:
                description: Hostname of the device providing the service
                type: string
              hostname:
                description: Hostname of the device providing the service
                type: string
              ip:
                description: IP Address of the service
                type: string
              name:
                description: Instance name
                type: string
              port:
                description: port to access the service
                type: integer
              protocol:
                description: service protocol
                type: string
              txt:
                additionalProperties:
                  type: string
                description: Dictionary of TXT records
                example:
                  txtvers: '1'
                  version: 2.1.1
                type: object
              type:
                description: service mdns type
                type: string
            required:
            - ip
            - hostname
            - port
            - name
            - type
            - protocol
            - txt
            type: object
          type: array
      required:
      - services
      title: mdns discovered services
      type: object
    meta_data_config:
      enum:
      - NONE
      - REFERENCED
      - FULL
      type: string
    modifier:
      description: A modifier
      properties:
        count_events:
          items:
            $ref: '#/components/schemas/count_event'
          type: array
        filter:
          items:
            discriminator:
              mapping:
                false: '#/components/schemas/operand'
                true: '#/components/schemas/operand'
                OR: '#/components/schemas/filter_operator'
                person_height_strictly_smaller_than: '#/components/schemas/operand_person_height'
                first_interaction_person_height_bigger_than: '#/components/schemas/operand_interaction_person_height'
                is_in_zone: '#/components/schemas/operand_zone'
                NOT: '#/components/schemas/filter_operator'
                first_interaction_person_height_strictly_bigger_than: '#/components/schemas/operand_interaction_person_height'
                has_first_interaction_face_mask: '#/components/schemas/operand_has_interaction_face_mask'
                last_line_cross_direction: '#/components/schemas/operand_line_cross_direction'
                zone_dwell_time_smaller_than: '#/components/schemas/operand_zone_dwell_time'
                has_tag: '#/components/schemas/operand_has_tag'
                number_of_zone_entries: '#/components/schemas/operand_zone_visits'
                has_gender: '#/components/schemas/operand_has_gender'
                person_height_smaller_than: '#/components/schemas/operand_person_height'
                first_line_cross_direction: '#/components/schemas/operand_line_cross_direction'
                zone_dwell_time_cumulative_strictly_smaller_than: '#/components/schemas/operand_zone_dwell_time'
                zone_dwell_time_strictly_smaller_than: '#/components/schemas/operand_zone_dwell_time'
                number_of_zone_exits: '#/components/schemas/operand_zone_visits'
                is_created_in_zone: '#/components/schemas/operand_zone'
                number_of_forward_line_crossings: '#/components/schemas/operand_line_crossings'
                zone_dwell_time_bigger_than: '#/components/schemas/operand_zone_dwell_time'
                has_crossed_line: '#/components/schemas/operand_line'
                has_visited_zone: '#/components/schemas/operand_zone'
                has_first_interaction_gender: '#/components/schemas/operand_has_interaction_gender'
                first_interaction_person_height_strictly_smaller_than: '#/components/schemas/operand_interaction_person_height'
                number_of_backward_line_crossings: '#/components/schemas/operand_line_crossings'
                has_first_interaction_tag: '#/components/schemas/operand_has_interaction_tag'
                zone_dwell_time_strictly_bigger_than: '#/components/schemas/operand_zone_dwell_time'
                first_interaction_person_height_smaller_than: '#/components/schemas/operand_interaction_person_height'
                AND: '#/components/schemas/filter_operator'
                number_of_line_crossings: '#/components/schemas/operand_line_crossings'
                zone_dwell_time_cumulative_strictly_bigger_than: '#/components/schemas/operand_zone_dwell_time'
                person_height_bigger_than: '#/components/schemas/operand_person_height'
                zone_dwell_time_cumulative_smaller_than: '#/components/schemas/operand_zone_dwell_time'
                zone_dwell_time_cumulative_bigger_than: '#/components/schemas/operand_zone_dwell_time'
                has_face_mask: '#/components/schemas/operand_has_face_mask'
                person_height_strictly_bigger_than: '#/components/schemas/operand_person_height'
              propertyName: type
            oneOf:
            - $ref: '#/components/schemas/filter_operator'
            - $ref: '#/components/schemas/operand'
            - $ref: '#/components/schemas/operand_line'
            - $ref: '#/components/schemas/operand_line_crossings'
            - $ref: '#/components/schemas/operand_line_cross_direction'
            - $ref: '#/components/schemas/operand_zone'
            - $ref: '#/components/schemas/operand_zone_visits'
            - $ref: '#/components/schemas/operand_zone_dwell_time'
            - $ref: '#/components/schemas/operand_person_height'
            - $ref: '#/components/schemas/operand_interaction_person_height'
            - $ref: '#/components/schemas/operand_has_gender'
            - $ref: '#/components/schemas/operand_has_tag'
            - $ref: '#/components/schemas/operand_has_face_mask'
            - $ref: '#/components/schemas/operand_has_interaction_gender'
            - $ref: '#/components/schemas/operand_has_interaction_tag'
            - $ref: '#/components/schemas/operand_has_interaction_face_mask'
          type: array
        logic_id:
          description: Identifiaction of logic.
          format: int64
          type: integer
        name:
          type: string
        object_type:
          enum:
          - PERSON
          - GROUP
          - BICYCLE
          - PRAM
          - WHEELCHAIR
          type: string
        trigger:
          discriminator:
            mapping:
              dwell_time_reached: '#/components/schemas/trigger_dwell_time'
              line_cross: '#/components/schemas/trigger_line'
              line_cross_backward: '#/components/schemas/trigger_line'
              line_cross_forward: '#/components/schemas/trigger_line'
              reset: '#/components/schemas/trigger_reset'
              track_created: '#/components/schemas/trigger_track'
              track_deleted: '#/components/schemas/trigger_track'
              zone_entry: '#/components/schemas/trigger_zone'
              zone_exit: '#/components/schemas/trigger_zone'
            propertyName: type
          oneOf:
          - $ref: '#/components/schemas/trigger_track'
          - $ref: '#/components/schemas/trigger_line'
          - $ref: '#/components/schemas/trigger_zone'
          - $ref: '#/components/schemas/trigger_dwell_time'
          - $ref: '#/components/schemas/trigger_reset'
        zone_of_interest:
          properties:
            enabled:
              type: boolean
            zoi_id:
              description: id of zone of interest
              type: integer
          type: object
      title: Modifier
      type: object
    modifier_collection:
      description: A list of modifiers
      properties:
        modifiers:
          items:
            $ref: '#/components/schemas/indexed_modifier'
          type: array
      title: Collection of modifiers
      type: object
    monitor_config:
      properties:
        daily_quota:
          default: 65000
          description: Number of bytes the connection is allowed to use per day
          example: 65000
          type: integer
        enabled:
          default: true
          type: boolean
      title: Monitor service configuration
      type: object
    monitor_upload:
      properties:
        could_reach_xovis:
          description: Did last attemp reach out Xovis
          type: boolean
        error:
          description: Error details of the last time an attemp to reach out Xovis
            was done
          properties:
            code:
              example: 1
              type: integer
            info:
              example: Failed to connect to server
              type: string
          required:
          - code
          - info
          type: object
        last_valid_reach_utc:
          description: Last time that Xovis could be reached out by Monitor service
          example: '2020-07-17T11:15:46'
          type: string
      required:
      - could_reach_xovis
      - last_valid_reach_utc
      title: Details about last connection to Xovis by Monitor service
      type: object
    multisensor_alignment:
      description: All relevant stitching data for the multisensor
      properties:
        custom_id:
          description: A custom id of the multisensor alignment
          example: 57
          format: int64
          type: integer
        group:
          example: my group
          type: string
        id:
          example: e33f0a1a9f6fc2f5ffa1726537357b0d546ffeea
          type: string
        name:
          example: my multisensor
          type: string
        reference:
          example: 00:00:00:00:00:00
          type: string
        sensor_alignment:
          items:
            $ref: '#/components/schemas/sensor_alignment'
          type: array
        stitching_info:
          items:
            $ref: '#/components/schemas/stitching_info'
          type: array
      title: Multisensor Stitching Data
      type: object
    multisensor_enable:
      description: ''
      properties:
        enabled:
          description: State of module
          type: boolean
      title: Multisensor enable status
      type: object
    multisensor_status:
      description: ''
      properties:
        alignment:
          description: Multisensor alignment set
          type: boolean
        alignment_id:
          description: alignment id
          example: e33f0a1a9f6fc2f5ffa1726537357b0d546ffeea
          type: string
        custom_id:
          description: A custom id of the multisensor alignment
          example: 57
          format: int64
          type: integer
        enabled:
          description: State of module
          type: boolean
        frames_processed:
          example: 57
          format: int64
          type: integer
        group:
          description: Multisensor group
          example: My Group
          type: string
        id:
          description: DEPRECATED | old alignment id
          example: 00:00:00:00:00:00
          type: string
        licenses:
          items:
            properties:
              feature:
                example: PIPAB
                type: string
              id:
                example: 1000
                type: integer
              state:
                description: State of the license
                enum:
                - ENABLED
                - TEST_ENABLED
                - EXPIRED
                - NOT_LICENSED
                example: ENABLED
                type: string
            type: object
          type: array
        mac_address:
          description: the serial number of the device
          example: 00:00:00:00:00:00
          type: string
        migrated:
          description: Multisensor alignment migrated from 3.x/4.x version
          type: boolean
        name:
          description: Multisensor name
          example: My Multisenosor
          type: string
        sensors:
          items:
            $ref: '#/components/schemas/sensor_information'
          type: array
      title: Multisensor status
      type: object
    network_ipv4_settings:
      description: IPv4 static settings
      properties:
        address:
          description: IPv4 address of sensor. Is mandatory if DHCP is disabled.
          example: 10.10.20.12
          format: ipv4
          type: string
        dhcp_enabled:
          description: Indicates whether DHCP is enabled or not. Missing properties
            defaults to false.
          example: false
          type: boolean
        dns_entries:
          description: List of DNS (domain name servers) to use. Up to three entries
            are allowed. Is mandatory if DHCP is disabled.
          example:
          - 1.1.1.1
          - 4.4.4.4
          - 8.8.8.8
          items:
            format: ipv4
            type: string
          type: array
        fallback_enabled:
          description: Enable the IPv4 address fallback to 192.168.1.168 when no DHCP
            lease is obtained
          example: true
          type: boolean
        gateway:
          description: Default route in IPv4 subnet for outbound traffic. If not specified
            a default will be calculated given IPv4 address and network mask.
          example: 10.10.20.1
          format: ipv4
          type: string
        netmask:
          description: Network mask of IPv4 subnet. Is mandatory if DHCP is disabled.
          example: 255.255.255.0
          format: ipv4
          type: string
      title: Network IPv4
      type: object
    network_ipv6_settings:
      description: IPv6 settings
      properties:
        address:
          description: IPv6 address of sensor, if DHCPv6 is disabled. Must include
            a prefix.
          example: 2001:db8:6b2:bfe7:9880:abcd:1234:5678/64
          type: string
        dhcp_enabled:
          description: Indicates whether DHCPv6 / IA_NA is enabled or not. Default
            is disabled.
          example: false
          type: boolean
        dns_entries:
          description: List of DNS servers to use.
          example:
          - 2001:db8::abcd:1234:5678
          items:
            type: string
          type: array
        gateway:
          description: Default gateway for IPv6 traffic.
          example: fe80::ae1f:abcd:1234:5678
          type: string
        ipv6_enabled:
          description: Enable the IPv6 protocol, default is disabled.
          example: false
          type: boolean
        slaac_enabled:
          description: Enable stateless IPv6 address configuration, default is enabled.
          example: true
          type: boolean
      required:
      - dhcp_enabled
      - ipv6_enabled
      - slaac_enabled
      title: Network IPv6
      type: object
    network_proxy:
      description: Current proxy configuration
      properties:
        enabled:
          description: Indicates whether proxy is enabled or not.
          example: true
          type: boolean
        pass:
          description: User password
          example: test
          maxLength: 128
          type: string
        port:
          description: Port of proxy server.
          example: 8080
          maximum: 65535
          minimum: 0
          type: integer
        server:
          description: Proxy url.
          example: www.example.com
          format: url
          maxLength: 255
          type: string
        user:
          description: User identifier
          example: root
          maxLength: 128
          type: string
      required:
      - enabled
      title: HTTP Proxy
      type: object
    network_state:
      description: Current network state
      properties:
        details:
          properties:
            ipv4:
              allOf:
              - $ref: '#/components/schemas/network_ipv4_settings'
              - properties:
                  dhcp_state:
                    description: When DHCP is enabled indicate in which state DHCP
                      client is located
                    enum:
                    - disabled
                    - init
                    - requesting
                    - bound
                    - fallback
                    - shutdown
                    - unknown
                    example: bound
                    type: string
                type: object
              description: IPv4 related status information
            ipv6:
              description: IPv4 related status information
              properties:
                addresses:
                  items:
                    example: fe80::9880:e8ff:fe69:ca7e/64
                    type: string
                  type: array
                dns_entries:
                  items:
                    example: fe80::ae1f:6bff:fe2d:ff8e
                    type: string
                  type: array
                gateways:
                  items:
                    example: fe80::ae1f:6bff:fe2d:ff8e
                    type: string
                  type: array
              type: object
            link:
              properties:
                mac:
                  description: MAC (link-layer address)
                  example: 08:80:39:5e:6c:2b
                  type: string
                mtu:
                  description: MTU (maximum transmission unit)
                  example: 1500
                  type: integer
                rx_dropped:
                  example: 0
                  type: integer
                rx_errors:
                  example: 0
                  type: integer
                rx_frame:
                  example: 0
                  type: integer
                rx_overruns:
                  example: 0
                  type: integer
                rx_packets:
                  example: 64633124
                  type: integer
                tx_errors:
                  type: integer
                tx_packets:
                  example: 123781
                  type: integer
              required:
              - mac
              - mtu
              type: object
          required:
          - ipv4
          - ipv6
          - link
          type: object
        state:
          description: State of module
          enum:
          - OK
          - WARN
          - ERROR
          type: string
      required:
      - state
      - details
      title: Network State
      type: object
    object_line_count_logic_template:
      properties:
        options:
          allOf:
          - $ref: '#/components/schemas/base_line_count_template_options'
        type:
          enum:
          - XLT_BICYCLE_LINE_IN_OUT_COUNT
          - XLT_BICYCLE_LINE_LATE_COUNT
          - XLT_WHEELCHAIR_LINE_IN_OUT_COUNT
          - XLT_WHEELCHAIR_LINE_LATE_COUNT
          - XLT_PRAM_LINE_IN_OUT_COUNT
          - XLT_PRAM_LINE_LATE_COUNT
          type: string
      required:
      - type
      type: object
    object_types:
      oneOf:
      - items:
          enum:
          - PERSON
          - BICYCLE
          - GROUP
          - PRAM
          - WHEELCHAIR
          type: string
          uniqueItems: true
        type: array
      - enum:
        - ALL
        - NONE
        type: string
    operand:
      description: A simple operand.
      example:
        type: 'true'
      properties:
        type:
          enum:
          - 'true'
          - 'false'
          type: string
      type: object
    operand_has_face_mask:
      properties:
        face_mask:
          enum:
          - MASK
          - NO_MASK
          - NOT_SURE
          type: string
        type:
          enum:
          - has_face_mask
          type: string
      type: object
    operand_has_gender:
      properties:
        gender:
          enum:
          - NOT_SURE
          - MALE
          - FEMALE
          type: string
        type:
          enum:
          - has_gender
          type: string
      type: object
    operand_has_interaction_face_mask:
      properties:
        face_mask:
          enum:
          - MASK
          - NO_MASK
          - NOT_SURE
          type: string
        geometry_id:
          format: int64
          type: integer
        type:
          enum:
          - has_first_interaction_face_mask
          type: string
      type: object
    operand_has_interaction_gender:
      properties:
        gender:
          enum:
          - NOT_SURE
          - MALE
          - FEMALE
          type: string
        geometry_id:
          format: int64
          type: integer
        type:
          enum:
          - has_first_interaction_gender
          type: string
      type: object
    operand_has_interaction_tag:
      properties:
        geometry_id:
          format: int64
          type: integer
        tag:
          enum:
          - NO_TAG
          - TAG_1
          - TAG_2
          - TAG_3
          - NOT_SURE
          type: string
        type:
          enum:
          - has_first_interaction_tag
          type: string
      type: object
    operand_has_tag:
      properties:
        tag:
          enum:
          - NO_TAG
          - TAG_1
          - TAG_2
          - TAG_3
          - NOT_SURE
          type: string
        type:
          enum:
          - has_tag
          type: string
      type: object
    operand_interaction_person_height:
      properties:
        geometry_id:
          format: int64
          type: integer
        height:
          format: float
          type: number
        type:
          enum:
          - first_interaction_person_height_bigger_than
          - first_interaction_person_height_smaller_than
          - first_interaction_person_height_strictly_bigger_than
          - first_interaction_person_height_strictly_smaller_than
          type: string
      type: object
    operand_line:
      properties:
        line_id:
          format: int64
          type: integer
        type:
          enum:
          - has_crossed_line
          type: string
      type: object
    operand_line_cross_direction:
      properties:
        direction:
          enum:
          - forward
          - backward
          - nocross
          type: string
        line_id:
          format: int64
          type: integer
        type:
          enum:
          - first_line_cross_direction
          - last_line_cross_direction
          type: string
      type: object
    operand_line_crossings:
      properties:
        line_id:
          format: int64
          type: integer
        type:
          enum:
          - number_of_line_crossings
          - number_of_forward_line_crossings
          - number_of_backward_line_crossings
          type: string
        value:
          format: int32
          type: integer
      type: object
    operand_person_height:
      properties:
        height:
          format: float
          type: number
        type:
          enum:
          - person_height_bigger_than
          - person_height_smaller_than
          - person_height_strictly_bigger_than
          - person_height_strictly_smaller_than
          type: string
      type: object
    operand_zone:
      properties:
        type:
          enum:
          - has_visited_zone
          - is_in_zone
          - is_created_in_zone
          type: string
        zone_id:
          format: int64
          type: integer
      type: object
    operand_zone_dwell_time:
      properties:
        time:
          format: float
          type: number
        type:
          enum:
          - zone_dwell_time_bigger_than
          - zone_dwell_time_smaller_than
          - zone_dwell_time_cumulative_bigger_than
          - zone_dwell_time_cumulative_smaller_than
          - zone_dwell_time_strictly_bigger_than
          - zone_dwell_time_strictly_smaller_than
          - zone_dwell_time_cumulative_strictly_bigger_than
          - zone_dwell_time_cumulative_strictly_smaller_than
          type: string
        zone_id:
          format: int64
          type: integer
      type: object
    operand_zone_visits:
      properties:
        type:
          enum:
          - number_of_zone_entries
          - number_of_zone_exits
          type: string
        value:
          format: int32
          type: integer
        zone_id:
          format: int64
          type: integer
      type: object
    path_stitching_settings:
      description: ''
      properties:
        enabled:
          type: boolean
        max_distance:
          description: The maximum distance between two tracks in [m].
          example: 2.0
          format: float
          type: number
        max_time:
          description: The maximum time a track is kept for stitching in [s].
          example: 5.0
          format: float
          type: number
        zone_ids:
          description: The ids of the zone where disapearing tracks should be stitched
          items:
            example: 3
            format: uint64
            type: number
          type: array
      title: Path stitcher settings
      type: object
    person_line_count_logic_template:
      properties:
        options:
          allOf:
          - $ref: '#/components/schemas/base_line_count_template_options'
          - $ref: '#/components/schemas/base_person_line_count_template_options'
          - properties:
              recognize_face_mask:
                type: boolean
            type: object
        type:
          enum:
          - XLT_LINE_IN_OUT_COUNT
          - XLT_LINE_LATE_COUNT
          type: string
      required:
      - type
      type: object
    pip_settings:
      properties:
        enabled:
          type: boolean
        max_bytes_per_second:
          description: Maximum number of bytes the PIP connection is allowed to use
            per second (5 second average)
          example: 4000
          type: integer
        monthly_quota:
          description: Number of bytes the connection is allowed to use per month
          example: 50000000
          type: integer
      required:
      - enabled
      title: PIP Settings
      type: object
    pip_state:
      properties:
        connected:
          description: Is the sensor currently connected to Xovis PIP
          type: boolean
        quota_used:
          description: How many bytes of the monthly quota is already used up
          type: integer
        settings:
          $ref: '#/components/schemas/pip_settings'
      required:
      - settings
      - quota_used
      - connected
      title: PIP State
      type: object
    polygon:
      description: JSON representation of polygons
      example:
      - - 23.3
        - 12.0
      - - 47.2
        - 3.141
      - - 12.0
        - 0.0
      items:
        $ref: '#/components/schemas/coord2d'
      minItems: 3
      title: Polygon
      type: array
    privacy_mode:
      properties:
        privacy_mode:
          description: Level of privacy
          enum:
          - 0
          - 1
          - 2
          - 3
          example: 0
          type: integer
        smk:
          example: abcdef
          type: string
      required:
      - privacy_mode
      title: Privacy Mode
      type: object
    privacy_salt_settings:
      description: Privacy settings salt
      properties:
        salt:
          description: Salt added to MAC address before hashing. Allowed length between
            0 and 128.
          example: yourSalt
          type: string
        smk:
          example: 23db64b5
          type: string
      required:
      - salt
      title: Privacy Config Salt
      type: object
    privacy_settings:
      description: Privacy settings
      properties:
        mac_hashing:
          description: Configuration for the hashing of monitored MAC addresses.
          properties:
            algorithm:
              description: Algorithm used to hash MAC addresses.
              enum:
              - MD5
              - SHA1
              - SHA256
              - SHA512
              example: MD5
              type: string
            bluetooth:
              description: Enable MAC address hashing of Bluetooth devices.
              example: true
              type: boolean
            wifi:
              description: Enable MAC address hashing of WiFi devices.
              example: false
              type: boolean
          type: object
        smk:
          example: 23db64b5
          type: string
      title: Privacy Config
      type: object
    projections:
      description: ''
      properties:
        sensor_to_ref:
          $ref: '#/components/schemas/affine_transformation3d'
      title: Projections
      type: object
    recalibration_settings:
      description: ''
      properties:
        period:
          description: Optional value. The period for continuous recalibration.
          example: 60.0
          format: float
          type: number
        type:
          description: The recalibration type.
          enum:
          - None
          - RCM1
          - RCM2
          - RCM3
          example: RCM3
          type: string
      title: Recalibration settings
      type: object
    recalibration_settings_with_status:
      description: ''
      properties:
        active_type:
          description: The recalibration type in use.
          enum:
          - None
          - RCM1
          - RCM2
          - RCM3
          example: RCM3
          type: string
        period:
          description: Optional value. The period for continuous recalibration.
          example: 60.0
          format: float
          type: number
        status:
          description: The status of the recalibration.
          enum:
          - None
          - Update_images
          - In_progress
          - Interrupted
          - Ready
          - Failed
          - Applied
          example: applied
          type: string
        type:
          description: The recalibration type.
          enum:
          - None
          - RCM1
          - RCM2
          - RCM3
          example: RCM3
          type: string
      title: Recalibration settings with status
      type: object
    recording:
      allOf:
      - $ref: '#/components/schemas/indexed_recording_schedule'
      properties:
        sequences:
          items:
            $ref: '#/components/schemas/sequence'
          type: array
        size:
          format: uint64
          type: number
        status:
          enum:
          - scheduled
          - in_progress
          - complete
          - shorten
          - empty
          type: string
      title: Recording
      type: object
    recording_file:
      description: The recording from one file.
      properties:
        id:
          example: 5
          format: uint64
          type: number
        name:
          example: my_recording.xrec
          type: string
        sequences:
          items:
            $ref: '#/components/schemas/sequence'
          type: array
        singlesensor_recordings:
          items:
            $ref: '#/components/schemas/singlesensor_recording_file'
          type: array
        size:
          example: 21042
          format: uint64
          type: number
        time_end:
          description: End of time interval (milliseconds since epoch in UTC).
          example: 1634832747
          format: uint64
          type: number
        time_start:
          description: Begin of time interval (milliseconds since epoch in UTC).
          example: 1634829147
          format: uint64
          type: number
      title: Recording
      type: object
    recording_schedule:
      properties:
        include_singlesensor_recordings:
          type: boolean
        time_end:
          description: End of time interval (milliseconds since epoch in UTC).
          example: 1634832747
          format: uint64
          type: number
        time_start:
          description: Begin of time interval (milliseconds since epoch in UTC).
          example: 1634829147
          format: uint64
          type: number
      title: Recording
      type: object
    recordings:
      properties:
        recordings:
          items:
            $ref: '#/components/schemas/recording'
          type: array
      title: Recordings
      type: object
    recordings_directory:
      properties:
        directory:
          example: /path/to/my/directory
          type: string
      title: Recordings Directory
      type: object
    recordings_file:
      description: A list of all available recordings.
      properties:
        recordings:
          items:
            $ref: '#/components/schemas/recording_file'
          type: array
      title: Recordings
      type: object
    reference:
      properties:
        mac_address:
          description: MAC address of the sensor
          example: 00:00:00:00:00:00
          type: string
        type:
          enum:
          - none
          - sensor
          - floor_plan
          example: sensor
          type: string
      title: Reference
      type: object
    remote_connection:
      properties:
        enabled:
          description: Is the remote connection enabled
          type: boolean
        host:
          description: URI to remote connection server
          example: support.xovis.com
          format: hostname, ipv4, ipv6
          type: string
        port:
          description: Port of remote connection server
          example: 8234
          type: integer
        token:
          description: Token/password provided by server side base64 encoded
          example: cGFzc3dvcmQ=
          type: string
        uri:
          description: URI of remote connection server
          example: /support
          format: uri
          type: string
        use_proxy:
          description: Use the proxy if configured
          type: boolean
      required:
      - host
      - port
      - uri
      - enabled
      title: Remote Connection
      type: object
    remote_connection_state:
      allOf:
      - $ref: '#/components/schemas/remote_connection'
      - properties:
          connected:
            description: Indicates whether remote connection is connected or not
            example: true
            type: boolean
          last_status_string:
            description: Last status report
            example: X509 - Certificate verification failed, e.g. CRL, CA or signature
              check failed
            type: string
          last_status_time:
            description: Timestamp of the status string (seconds since epoch in UTC).
            example: 1654871622
            type: number
        required:
        - connected
        type: object
      title: Remote Connection State
    remote_connection_states:
      properties:
        remote_states:
          items:
            $ref: '#/components/schemas/indexed_remote_connection_state'
          type: array
      required:
      - remote_states
      title: Remote Connection States
      type: object
    remote_connections:
      properties:
        remotes:
          items:
            $ref: '#/components/schemas/indexed_remote_connection'
          type: array
      required:
      - remotes
      title: Remote Connections
      type: object
    remote_services_settings:
      properties:
        enabled:
          type: boolean
        max_bytes_per_second:
          description: Maximum number of bytes the remote connection is allowed to
            use per second (10 second average)
          example: 4000
          type: integer
      required:
      - enabled
      title: Remote connection services Settings
      type: object
    remote_services_state:
      properties:
        active_services:
          additionalProperties:
            type: boolean
          description: Dictionary of service:enabled
          example:
            monitor_service: false
            update_service: true
          type: object
        connected:
          description: Is the sensor currently connected to Xovis PIP
          type: boolean
      required:
      - connected
      title: Remote connection services  State
      type: object
    request:
      description: HTTP request
      properties:
        body:
          oneOf:
          - $ref: '#/components/schemas/logic'
          - $ref: '#/components/schemas/counter'
          - $ref: '#/components/schemas/modifier'
          - $ref: '#/components/schemas/indexed_logic'
          - $ref: '#/components/schemas/indexed_counter'
          - $ref: '#/components/schemas/indexed_modifier'
          - $ref: '#/components/schemas/logic_collection'
          - $ref: '#/components/schemas/counter_collection'
          - $ref: '#/components/schemas/modifier_collection'
        method:
          enum:
          - GET
          - PUT
          - POST
          - DELETE
          example: POST
          type: string
        target:
          example: logics
          type: string
      title: HTTP request
    resolutions:
      enum:
      - ONE_DAY
      - TWELVE_HOURS
      - SIX_HOURS
      - ONE_HOUR
      - THIRTY_MINUTES
      - FIFTEEN_MINUTES
      - FIVE_MINUTES
      - ONE_MINUTE
      - FIVE_SECONDS
      - TWO_AND_A_HALF_SECONDS
      - ONE_SECOND
      - HALF_SECOND
      - QUARTER_SECOND
      - MAX
      type: string
    sandbox_status:
      properties:
        ram_usage:
          example: 10000000
          type: integer
        running:
          type: boolean
      required:
      - running
      - ram_usage
      title: Sandbox status
      type: object
    sandbox_url_registration:
      properties:
        ext_url:
          example: /sandbox/
          type: string
        int_url:
          example: /
          type: string
        method:
          enum:
          - GET
          - POST
          - PUT
          - DELETE
          - PATCH
          type: string
        port:
          example: 24000
          type: integer
        rights:
          enum:
          - public
          - admin
          - viewer
          type: string
      required:
      - ext_url
      - int_url
      - port
      - method
      - rights
      title: Sandbox reverse proxy URL registration
      type: object
    scene_event_types:
      oneOf:
      - items:
          enum:
          - TRACK_CREATE
          - TRACK_DELETE
          - LINE_CROSS_FORWARD
          - LINE_CROSS_BACKWARD
          - ZONE_ENTRY
          - ZONE_EXIT
          type: string
          uniqueItems: true
        type: array
      - enum:
        - ALL
        - NONE
        type: string
    scene_events:
      description: JSON representation of a scene events
      items:
        $ref: '#/components/schemas/geometry_event'
      title: Scene Events
      type: array
    scene_geometries:
      properties:
        geometries:
          $ref: '#/components/schemas/scene_geometry_collection'
      title: Geometries
      type: object
    scene_geometry:
      description: A scene geometry
      example:
        geometry:
        - - 123
          - 133
        - - 124
          - 513
        name: Door
        type: LINE
      properties:
        geometry:
          oneOf:
          - $ref: '#/components/schemas/polygon'
          - $ref: '#/components/schemas/line'
        name:
          description: Name of the geometry. Can be displayed in the scene and is
            attached to the geometry events
          type: string
        type:
          enum:
          - LINE
          - ZONE
          type: string
      title: Scene geometry
      type: object
    scene_geometry_collection:
      description: A list of geometries
      items:
        $ref: '#/components/schemas/indexed_scene_geometry'
      title: Collection of geometries
      type: array
    scene_mask:
      description: JSON representation of a scene mask
      properties:
        polygon:
          $ref: '#/components/schemas/polygon'
        type:
          description: Type of mask
          enum:
          - BOARDING
          - EXCLUSION
          type: string
      title: Scene mask
      type: object
    scheduler_intervals:
      enum:
      - ONE_DAY
      - ONE_HOUR
      - FIFTEEN_MINUTES
      - FIVE_MINUTES
      - ONE_MINUTE
      - THIRTY_SECONDS
      - FIVE_SECONDS
      type: string
    scheduler_retry_modes:
      enum:
      - DROP
      - INTERVAL
      - INCREASING_DELAY
      - INCREASING_DELAY_EXPONENTIAL
      type: string
    scheduler_types:
      enum:
      - PERIODIC
      - IMMEDIATE
      - INTERVAL
      type: string
    sensor_alignment:
      properties:
        group:
          example: My group
          type: string
        ip_address:
          example: 0.0.0.0
          type: string
        mac_address:
          example: 00:00:00:00:00:00
          type: string
        multisensor_to_singlesensor:
          $ref: '#/components/schemas/affine_transformation3d'
        name:
          example: My Sensor 1
          type: string
        singlesensor_to_multisensor:
          $ref: '#/components/schemas/affine_transformation3d'
        tracking_area:
          $ref: '#/components/schemas/polygon'
      title: Sensor Alignment
      type: object
    sensor_direction:
      description: The active and the measured direction of the sensor.
      properties:
        active_alpha_deg:
          description: The active rotation angle around the x-axis in degrees.
          example: 6.1
          format: float
          type: number
        active_beta_deg:
          description: The active rotation angle around the y-axis in degrees.
          example: 3.2
          format: float
          type: number
        active_sensor_direction:
          $ref: '#/components/schemas/coord3d'
        measured_alpha_deg:
          description: The measured rotation angle around the x-axis in degrees.
          example: 6.1
          format: float
          type: number
        measured_beta_deg:
          description: The measured rotation angle around the y-axis in degrees.
          example: 3.2
          format: float
          type: number
        measured_sensor_direction:
          $ref: '#/components/schemas/coord3d'
      title: Sensor direction
      type: object
    sensor_features:
      properties:
        features:
          items:
            properties:
              feature:
                example: PIFLT
                type: string
              id:
                example: 104
                type: integer
            required:
            - feature
            - id
            type: object
          type: array
      required:
      - features
      title: Sensor features
      type: object
    sensor_geometry:
      description: To set the sensor direction either sensor_direction or alpha_deg
        and beta_deg can be specified. If both are provided, the sensor_direction
        overwrites the angles. If none of them is given, the measured sensor direction
        is used instead.
      properties:
        alpha_deg:
          description: The rotation angle around the x-axis in degrees.
          example: 6.1
          format: float
          type: number
        beta_deg:
          description: The rotation angle around the y-axis in degrees.
          example: 3.2
          format: float
          type: number
        sensor_direction:
          $ref: '#/components/schemas/coord3d'
          description: A optional vector pointing into the direction of the sensor.
            If no vector is specified, the measured sensor direction is used instead.
        sensor_height:
          description: The mounting height of the sensor in meters above the floor.
          example: 2.6
          format: float
          type: number
      title: Sensor geometry
      type: object
    sensor_height:
      description: The active and the measured height of the sensor.
      properties:
        active_sensor_height:
          description: The mounting height of the sensor in meters above the floor.
          example: 2.5
          format: float
          type: number
        measured_sensor_height:
          description: The mounting height of the sensor in meters above the floor.
          example: 2.6
          format: float
          type: number
      title: Sensor height
      type: object
    sensor_information:
      properties:
        firmware:
          description: The firmware version
          example: 5.1.0
          type: string
        group:
          description: Sensor group
          example: group
          type: string
        illumination:
          enum:
          - SUFFICIENT
          - INSUFFICIENT
          type: string
        ip_address:
          description: IP adddress of sensors
          example: 10.10.20.123
          type: string
        licenses:
          items:
            properties:
              feature:
                example: PIPAB
                type: string
              id:
                example: 1000
                type: integer
              state:
                description: State of the license
                enum:
                - ENABLED
                - TEST_ENABLED
                - EXPIRED
                - NOT_LICENSED
                example: ENABLED
                type: string
            type: object
          type: array
        mac_address:
          description: MAC address of sensor
          example: 00:00:00:c7:f9:28
          type: string
        name:
          description: Sensor name
          example: name
          type: string
        port:
          description: Port of sensor
          example: 80
          type: number
        privacy_mode:
          format: integer
          type: number
        protocol:
          description: Protocol
          enum:
          - http
          - https
          type: string
        reference:
          example: true
          type: boolean
        status:
          description: The status of the sensor
          enum:
          - unknown
          - disconnected
          - connecting
          - ok
          - out_of_sync
          - mismatch
          - incompatible
          - unauthorized
          - privacy_protection
          - unused
          example: ok
          type: string
        username:
          description: User of sensor
          example: user
          type: string
      title: Sensor Information
      type: object
    sensor_information_put:
      properties:
        ip_address:
          description: IP adddress of sensors
          example: 10.10.20.123
          type: string
        password:
          description: Password of user
          example: password
          type: string
        port:
          description: Port of sensor
          example: 80
          type: number
        protocol:
          description: Protocol
          enum:
          - http
          - https
          type: string
        username:
          description: User of sensor
          example: username
          type: string
      title: Sensor Information to be provided
      type: object
    sensor_region_info:
      properties:
        country:
          default: ''
          description: ISO 3166-1 alpha-2 country code
          example: CH
          type: string
        metric:
          default: METRIC
          description: Measurement system
          enum:
          - METRIC
          - IMPERIAL
          example: METRIC
          type: string
      title: Senor region informations
      type: object
    sensor_rotation:
      properties:
        rotation:
          default: ROTATION_0
          description: Scene rotation in degrees
          enum:
          - ROTATION_0
          - ROTATION_90
          - ROTATION_180
          - ROTATION_270
          example: ROTATION_180
          type: string
      title: Scene Rotation
      type: object
    sensor_show_wizard:
      properties:
        showWizard:
          description: show setup wizard
          type: boolean
      title: Senor show steup wizard in ui
      type: object
    sensors_information:
      properties:
        sensors:
          items:
            $ref: '#/components/schemas/sensor_information'
          type: array
      required:
      - sensors
      title: Collection of sensors
      type: object
    sequence:
      description: Recorded Sequence.
      properties:
        duration:
          description: Duration of recorded sequence in seconds.
          format: float
          type: number
        frame_number_begin:
          format: uint64
          type: number
        frame_number_end:
          description: The frame following the last frame of the sequence.
          format: uint64
          type: number
        id:
          example: 80:1F:12:73:FE:D7-5497723383564
          type: string
        sensor_id:
          example: 80:1F:12:73:FE:D7
          type: string
        timestamp_ms_begin:
          description: Begin of time interval (milliseconds since epoch in UTC).
          format: uint64
          type: number
        timestamp_ms_end:
          description: End of time interval (milliseconds since epoch in UTC).
          format: uint64
          type: number
      title: Sequence
      type: object
    sequence_statistics:
      description: Statistics of a Sequence.
      properties:
        activities:
          description: The illumination statistics.
          items:
            $ref: '#/components/schemas/activities_statistics_item'
          type: array
        complete:
          type: boolean
        digital_input:
          description: The digital_input statistics.
          items:
            $ref: '#/components/schemas/digital_input_statistics_item'
          type: array
        frame_number_begin:
          example: 20
          format: uint64
          type: number
        frame_number_end:
          description: The frame following the last frame of the sequence.
          example: 40
          format: uint64
          type: number
        illumination:
          description: The illumination statistics.
          items:
            $ref: '#/components/schemas/illumination_statistics_item'
          type: array
        sequence_id:
          example: 80:1F:12:73:FE:D7-5497723383564
          type: string
      title: Sequence Statistics
      type: object
    sequences:
      description: Recorded Sequence.
      properties:
        sequences:
          items:
            $ref: '#/components/schemas/sequence'
          type: array
      title: Sequence
      type: object
    singlesensor_recording:
      properties:
        mac_address:
          example: 00:00:00:00:00:00
          type: string
        recording_id:
          format: uint6
          type: number
      title: Recording
      type: object
    singlesensor_recording_file:
      description: A singlesensor recording included in the same file as a multisensor
        recording.
      properties:
        mac_address:
          example: 80:1F:12:73:FE:D7
          type: string
      title: Singlesensor Recording
      type: object
    singlesensor_status:
      description: ''
      properties:
        digital_input:
          description: Status of digital input (PCT only).
          enum:
          - LOW
          - HIGH
          example: LOW
          type: string
        frames_processed:
          example: 57
          format: int64
          type: integer
        illumination:
          enum:
          - UNKNOWN
          - SUFFICIENT
          - INSUFFICIENT
          example: SUFFICIENT
          type: string
        measured_alpha_deg:
          description: The measured rotation angle around the x-axis in degrees.
          example: 6.1
          format: float
          type: number
        measured_beta_deg:
          description: The measured rotation angle around the y-axis in degrees.
          example: 3.2
          format: float
          type: number
        measured_sensor_direction:
          $ref: '#/components/schemas/coord3d'
      title: Singlesensor status
      type: object
    start_stop:
      description: A list of start and stop points
      properties:
        begin:
          $ref: '#/components/schemas/time_instant'
        end:
          $ref: '#/components/schemas/time_instant'
        start_points:
          items:
            $ref: '#/components/schemas/coord3d'
          type: array
        stop_points:
          items:
            $ref: '#/components/schemas/coord3d'
          type: array
      title: Start stop points
      type: object
    static_image_meta_headers:
      description: ''
      properties:
        image_metadata:
          $ref: '#/components/schemas/image_metadata'
        mac_address:
          description: MAC of sensor
          type: string
        projections:
          $ref: '#/components/schemas/projections'
      title: Static image meta data header
      type: object
    stereo_settings:
      description: ''
      properties:
        disparity_shift:
          format: float
          type: number
      title: Stereo settings
      type: object
    stitcher_limits:
      properties:
        max_number_of_sensors:
          example: 9
          format: integer
          type: number
      title: Stitcher Limits
      type: object
    stitcher_sensor_information:
      properties:
        data_status:
          description: Indicates if stitching data available
          enum:
          - none
          - available
          - outdated
          type: string
        group:
          description: Sesnor group
          example: group
          type: string
        id:
          format: int64
          type: number
        ip_address:
          description: IP adddress of sensors
          example: 10.10.20.123
          type: string
        mac_address:
          description: MAC address of sensor
          example: 00:00:00:c7:f9:28
          type: string
        name:
          description: Sensor name
          example: name
          type: string
        port:
          description: Port of sensor
          example: 80
          type: number
        protocol:
          enum:
          - http
          - https
          - unknown
          type: string
        reference:
          example: true
          type: boolean
        status:
          description: The status of the sensor
          enum:
          - unknown
          - disconnected
          - ok
          - mismatch
          - incompatible
          - unauthorized
          - privacy_protection
          type: string
        username:
          description: User of sensor
          example: username
          type: string
      title: Sensor Information
      type: object
    stitcher_sensor_information_post:
      properties:
        ip_address:
          description: IP adddress of sensors
          example: 10.20.30.40
          type: string
        password:
          description: Password of user
          example: password
          type: string
        port:
          description: Port of sensor
          example: 80
          type: number
        protocol:
          enum:
          - http
          - https
          - unknown
          type: string
        username:
          description: User of sensor
          example: username
          type: string
      title: Sensor Information to be provided
      type: object
    stitcher_sensors_information:
      properties:
        sensors:
          items:
            $ref: '#/components/schemas/stitcher_sensor_information'
          type: array
      required:
      - sensors
      title: All added sensors
      type: object
    stitcher_settings:
      properties:
        custom_id:
          example: 57
          format: integer
          type: number
        group:
          example: my group
          type: string
        name:
          example: my multisensor
          type: string
      title: Stitcher settings
      type: object
    stitcher_status:
      properties:
        status:
          enum:
          - empty
          - missing_background
          - complete
          - applied
          type: string
      title: Stitcher Status
      type: object
    stitching_info:
      properties:
        mac_address_1:
          example: 00:00:00:00:00:01
          type: string
        mac_address_2:
          example: 00:00:00:00:00:02
          type: string
        quality:
          enum:
          - good
          - acceptable
          - bad
          - weak
          type: string
      title: Stitching Info
      type: object
    stitching_points:
      properties:
        mac_address_1:
          description: MAC address of first sensor
          example: 00:00:00:00:00:01
          type: string
        mac_address_2:
          description: MAC address of second sensor
          example: 00:00:00:00:00:02
          type: string
        stitching_points:
          items:
            properties:
              error:
                example: 0.02
                format: float
                type: number
              point_1:
                $ref: '#/components/schemas/coord2d'
              point_2:
                $ref: '#/components/schemas/coord2d'
            type: object
          type: array
      title: Stitching Points
      type: object
    stored_blobs:
      description: List of stored blobs
      properties:
        entries:
          example:
          - ui_settings.json
          - rotate_scene.json
          items:
            description: Identification of blob
            type: string
          type: array
      required:
      - entries
      title: Blobs
      type: object
    subscribe_request:
      properties:
        Client_IP_Address:
          description: IP of APC Receiver
          example: 192.168.1.1
          type: string
          xml:
            name: Client-IP-Address
        ReplyPath:
          description: Path of APC Receiver
          example: /test
          type: string
        ReplyPort:
          description: Port of APC Receiver
          example: '1234'
          type: string
      required:
      - Client-IP-Address
      - ReplyPort
      - ReplyPath
      title: subscription request
      type: object
      xml:
        name: SubscribeRequest
    tag_settings:
      description: ''
      properties:
        tag_position:
          description: The tag position.
          enum:
          - LEFT
          - RIGHT
          - BOTH
          example: LEFT
          type: string
      title: Tag settings
      type: object
    time_formats:
      enum:
      - UNIX_TIME_MS
      - UNIX_TIME_S
      - RFC3339
      type: string
    time_instant:
      description: JSON representation of an instant of time as milliseconds since
        epoch in UTC
      example: 1579537614000
      format: int64
      title: Instant of time
      type: integer
    time_manual_settings:
      description: Current time
      oneOf:
      - properties:
          time_utc:
            description: UTC time in RFC3339 format. Must specify timezone Z or 00:00
            example: '2017-07-21T17:32:28Z'
            format: date-time
            type: string
        type: object
      - properties:
          time_local:
            description: Local time in RFC3339 format. With or without timezone
            example: 2017-07-21T17:32:28+02:00 or 2017-07-21T17:32:28
            format: date-time
            type: string
        type: object
      title: Current time
    time_settings:
      description: Time settings
      properties:
        ntp_enabled:
          description: Indicates whether NTP is enabled or not.
          example: false
          type: boolean
        ntp_server_enabled:
          description: Indicates whether sensor acts as an NTP server
          example: false
          type: boolean
        ntp_servers:
          description: List of NTP peers to synchronized time with
          example:
          - pool.ntp.org
          - 192.168.1.1
          items:
            description: Hostname or IP of NTP server
            format: ipv4, hostname
            type: string
          type: array
        time_zone:
          description: Time zone identification.
          example: America/New_York
          type: string
      required:
      - time_zone
      - ntp_enabled
      title: Time settings
      type: object
    time_state:
      properties:
        details:
          properties:
            ntp_host:
              description: NTP server for synchronizing time
              example: 123.43.53.2
              type: string
            ntp_host_stratum:
              description: NTP stratum
              example: 2
              type: integer
            ntp_rms_offset:
              description: NTP RMS offset
              example: 0.001813
              type: number
            ntp_root_delay:
              description: NTP root delay
              example: 0.010808
              type: number
            ntp_root_dispersion:
              description: NTP root dispersion
              example: 32.566299
              type: number
            time:
              description: Current sensor time (format RFC3339)
              example: 2021-03-31T09:15:53+0100
              type: string
            tz_offset_sec:
              description: Time zone offset in seconds
              example: -3600
              type: integer
          required:
          - time
          - tz_offset_sec
          type: object
        error:
          properties:
            code:
              description: Error number, more details in the documentation
              type: integer
            info:
              description: Short english description of the error
              type: string
          type: object
        last_downtime_sec:
          description: Duration in seconds of the last downtime (shutdown -> turn
            on)
          example: 3600
          type: integer
        sources:
          description: Details about each NTP Server
          items:
            properties:
              ip_addr:
                description: IP of NTP server
                example: 192.168.1.1
                format: ipv4
                type: string
              n_failed:
                description: Number of failed NTP request
                type: integer
              n_successful:
                description: Number of valid NTP request
                type: integer
              name:
                description: Hostname of the source
                example: time.cloudflare.com
                format: hostname
                type: string
              sec_since_last_success:
                description: Last time in seconds a valid request succeed
                type: integer
              state:
                description: Information of the source state
                enum:
                - SELECTED_SOURCE
                - COMBINED_SOURCE
                - NOT_COMBINED
                - FALSETICKER
                - UNSTABLE
                - UNRECHEABLE
                - UNKNOWN
                type: string
            required:
            - ip_addr
            - state
            - n_successful
            - n_fail
            type: object
          type: array
        state:
          description: State of module
          enum:
          - OK
          - ERROR
          type: string
      required:
      - state
      - details
      - sources
      title: Time State
      type: object
    timestamp_rfc3339:
      description: time string in RFC3339 format
      example: '2022-06-07T12:15:20+02:00'
      format: date-time
      type: string
    timestamp_unix_ms:
      example: 1651504350792
      maximum: 9223372036854775807
      minimum: 0
      type: integer
    timestamp_unix_s:
      example: 1651504350
      maximum: 4294967295
      minimum: 0
      type: integer
    timezones:
      properties:
        time_zones:
          example:
          - UTC
          - America/New_York
          items:
            type: string
          type: array
      required:
      - time_zones
      title: Time Zones
      type: object
    tracked_object:
      description: JSON representation of position of single object
      properties:
        attributes:
          properties:
            face_mask:
              description: Classification result of face mask detection
              enum:
              - NO_MASK
              - MASK
              - NOT_SURE
              example: MASK
              type: string
            gender:
              description: Classification result of gender estimation
              enum:
              - FEMALE
              - MALE
              - NOT_SURE
              example: MALE
              type: string
            members:
              description: Number of group members. Only applicable if object type
                is GROUP.
              example: 5
              type: integer
            members_with_tag:
              description: Number of group members wearing a tag. Only applicable
                if object type is GROUP and tag detection is enabled.
              example: 1
              type: integer
            tag:
              description: Classification result of tag detection
              enum:
              - NO_TAG
              - TAG_1
              - NOT_SURE
              example: NO_TAG
              type: string
            view_direction:
              $ref: '#/components/schemas/coord2d'
              description: Vector in 2d-plane in parallel to floor, pointing to view
                direction of persion
          type: object
        position:
          $ref: '#/components/schemas/coord3d'
          description: 3d point
        tail:
          description: Short history of object positions
          items:
            $ref: '#/components/schemas/coord3d'
          maxItems: 3
          type: array
        track_id:
          description: Identification of object
          example: 167
          format: int64
          type: integer
        track_id_str:
          description: Used to workaround issues with JSON 64-bit numbers.
          format: uint64
          type: string
        type:
          description: Type of object
          enum:
          - PERSON
          - GROUP
          - BICYCLE
          - WHEELCHAIR
          - PRAM
          example: PERSON
          type: string
      title: Tracked object
      type: object
    tracked_objects:
      description: JSON representation of object positions
      items:
        $ref: '#/components/schemas/tracked_object'
      title: Tracked objects
      type: array
    tracking_area:
      description: The tracking area
      properties:
        tracking_area:
          $ref: '#/components/schemas/polygon'
      title: Tracking Area
      type: object
    transaction:
      description: Multiple requests bundled as a transaction
      properties:
        requests:
          items:
            $ref: '#/components/schemas/request'
          type: array
      title: Transaction
    trigger_dwell_time:
      properties:
        time:
          format: float
          type: number
        type:
          enum:
          - dwell_time_reached
          type: string
        zone_id:
          format: int64
          type: integer
      type: object
    trigger_line:
      properties:
        line_id:
          format: int64
          type: integer
        type:
          enum:
          - line_cross
          - line_cross_forward
          - line_cross_backward
          type: string
      type: object
    trigger_reset:
      properties:
        counter_id:
          format: int64
          type: integer
        type:
          enum:
          - reset
          type: string
      type: object
    trigger_track:
      properties:
        type:
          enum:
          - track_created
          - track_deleted
          type: string
      type: object
    trigger_zone:
      properties:
        type:
          enum:
          - zone_entry
          - zone_exit
          type: string
        zone_id:
          format: int64
          type: integer
      type: object
    ui_properties:
      properties:
        customBranding:
          default: ''
          description: Forces UI use this name instead of Xovis
          example: Company Name
          type: string
        hideMultisensor:
          default: false
          description: Hide all multisensor functionality
          type: boolean
        hidePip:
          default: false
          description: Hide all pip functionality
          type: boolean
        title:
          default: ''
          description: Title of webpage, to be shown in title bar of browser
          example: Xovis PC-Series Sensor
          type: string
        version:
          description: Version of this file
          example: '1'
          type: integer
      required:
      - version
      title: Various UI properties
      type: object
    uint:
      minimum: 0
      type: integer
    update_packages:
      properties:
        updates:
          description: List of update packages
          example:
          - 5.0.0
          - 5.0.7
          - 5.1.0
          items:
            description: update package identifiers
            example: 5.0.0
            type: string
          type: array
      required:
      - updates
      title: Update Packages
      type: object
    update_schedule:
      properties:
        time_utc:
          description: Date and time (in UTC) to begin with installation of update
            package.
          example: '2020-07-17T11:15:46'
          type: string
        version:
          description: Version of update package to install
          example: 5.0.1
          type: string
      required:
      - version
      - time_utc
      title: Update Schedule
      type: object
    update_state:
      properties:
        last_update:
          properties:
            error_message:
              example: Hardware not compatible
              type: string
            successful:
              example: false
              type: boolean
            time:
              example: '2021-03-31T09:15:53+01:00'
              type: string
            version:
              example: 5.2.0-pcf
              type: string
          required:
          - version
          - time
          - successful
          type: object
        running_update:
          properties:
            runtime_s:
              example: 85
              type: integer
            time:
              example: '2021-03-31T09:15:53+01:00'
              type: string
            version:
              example: 5.2.0
              type: string
          required:
          - version
          - time
          - runtime_s
          type: object
        state:
          enum:
          - OK
          - WARN
          - INSTALLING
          - REBOOTING
          example: INSTALLING
          type: string
        version:
          example: 5.1.0
          type: string
      required:
      - state
      - version
      title: Update State
      type: object
    update_version:
      properties:
        version:
          description: update package version
          example: 5.0.0-43df7c1
          type: string
      required:
      - version
      title: Update version
      type: object
    updates_available:
      properties:
        available_updates:
          description: List of update packages to download
          items:
            description: update packages details
            properties:
              size_bytes:
                example: 12415212
                type: integer
              version:
                example: 5.0.0
                type: string
            type: object
          type: array
        last_refresh_time:
          description: Last time the updates server was successfully reached
          example: '2020-07-17T11:15:46'
          type: string
        refreshing:
          description: True when retrying values from updates server, false otherwise
          type: boolean
      required:
      - last_refresh_time
      - refreshing
      - updates
      title: Updates available in updates server with some metadata
      type: object
    user_activation:
      properties:
        active:
          description: Whether user is activated or deactivated
          type: boolean
      required:
      - active
      title: User Activation
      type: object
    user_credentials:
      properties:
        password:
          description: User's new password
          example: asdf
          type: string
      required:
      - password
      title: User Credentials
      type: object
    user_detail:
      properties:
        active:
          description: Indicate whether user is active or not
          example: true
          type: boolean
        factory_default:
          description: Indicate whether user is factory default or not
          type: boolean
        id:
          description: User identifier
          example: admin
          type: string
        privileges:
          example:
          - net_cfg_read
          - net_cfg_write
          - other_users_read
          - own_user_read
          items:
            description: Privilege identifier
            type: string
          type: array
        roles:
          items:
            description: Role identifier
            example: admin_role
            type: string
          type: array
      required:
      - id
      - active
      - factory_default
      - roles
      - privileges
      title: User Detail
      type: object
    user_details:
      properties:
        users:
          items:
            $ref: '#/components/schemas/user_detail'
          type: array
      required:
      - users
      title: User Details
      type: object
    user_session:
      properties:
        max_unused_for:
          description: Maximum idle period after which this session is deleted in
            seconds
          example: 3600
          type: integer
        token:
          description: Session token to be used as bearer token for requests
          example: ZHNmZ2tsaHNhZGhqa2dmaGphZGtsZ2hqa
          type: string
        valid_for:
          description: Maximum number of seconds this session is valid
          example: 86400
          type: integer
      required:
      - token
      - valid_for
      - max_unused_for
      title: New session
      type: object
    user_smk:
      properties:
        smk:
          description: SMK
          example: abcdef
          type: string
      required:
      - smk
      title: SMK as payload
      type: object
    view_mask:
      description: JSON representation of a view mask
      properties:
        polygon:
          $ref: '#/components/schemas/polygon'
        type:
          description: Type of mask
          enum:
          - TABOO
          - VISIBLE_FLOOR
          - ILLUMINATION
          type: string
      title: View mask
      type: object
    wifi_settings:
      description: WiFi settings
      properties:
        allowlist_enabled:
          description: Allowlist enabled for WiFi monitoring.
          example: true
          type: boolean
        channel_dwell_ms:
          description: Time in milliseconds during which one channel is monitored,
            before switching to the next one. Allowed values between 50 and 3000.
          type: integer
        channels:
          description: List of channels which will be monitored. Allowed values between
            1 and 13
          example:
          - 1
          - 6
          - 11
          items:
            type: integer
          type: array
        denylist_enabled:
          description: Denylist enabled for WiFi monitoring.
          example: false
          type: boolean
        enabled:
          description: WiFi monitoring enabled.
          example: true
          type: boolean
        filter_expr:
          default: not subtype beacon
          description: '[PCAP expression](https://www.tcpdump.org/manpages/pcap-filter.7.html)
            to specifically filter and monitor wireless traffic.'
          example: subtype probe-req
          type: string
      title: WiFi Config
      type: object
    wrong_way_count_logic_template:
      properties:
        options:
          properties:
            zone_1_id:
              format: int64
              type: integer
            zone_2_id:
              format: int64
              type: integer
            zone_of_interest_id:
              format: int64
              type: integer
          type: object
        type:
          enum:
          - XLT_WRONG_WAY_DETECTION
          type: string
      required:
      - type
      type: object
    www_config:
      properties:
        custom_http_headers:
          additionalProperties:
            type: string
          description: Key-value dictionary for custom HTTP headers to be delivered
            on response (only for statically served files, not applicable for reverse
            proxy back-end services)
          example:
            Access-Control-Allow-Origin: https://foo.bar
            SomeHTTPHeader: SomeValue
          nullable: true
          type: object
        dh_size:
          default: 2048
          description: Diffie-Hellman key size used to exchange session keys while
            establishing TLS connection.
          example: 2048
          type: integer
        http_enabled:
          default: true
          description: Indicating whether plain HTTP connection are allowed.
          example: false
          type: boolean
        http_port:
          default: 80
          description: TCP port listening plain HTTP connections.
          example: 80
          format: int16
          type: integer
        https_port:
          default: 443
          description: TCP port listening for secured HTTPS connections.
          example: 443
          format: int16
          type: integer
        min_tls_version:
          description: Minimum TLS version web-server accepts for HTTPS connections.
            Possible values are [1, 2]
          enum:
          - 1
          - 2
          example: 1
          type: integer
      required:
      - http_enabled
      - http_port
      - https_port
      title: WWW Config
      type: object
    www_route:
      properties:
        method:
          description: HTTP method
          example: GET
          type: string
        uri:
          description: URI
          example: /api/v5/www/config
          type: string
      required:
      - uri
      - method
      title: WWW Route
      type: object
    www_routes:
      properties:
        routes:
          items:
            $ref: '#/components/schemas/www_route'
          type: array
      required:
      - routes
      title: WWW Routes
      type: object
    x509_certificate:
      properties:
        fingerprint_sha1:
          example: 4abdeeec950d359c89aec752a12c5b29f6d6aa0c
          format: byte
          type: string
        issuer:
          example: OU = Domain Control Validated, CN = example.com
          type: string
        san:
          example:
          - xovis.com
          items:
            type: string
          type: array
        serial_number:
          example: 04:7a:f7:95:47:c0:7d:0f:ef:80:a5:b2:1f:51:e3:63
          type: string
        subject:
          example: C = CH, ST = Bern, L = Zollikofen, O = Example CA Limited, CN =
            RSA Domain Validation Secure Server CA
          type: string
        valid_from:
          example: '2021-10-28 06:45:22'
          type: string
        valid_to:
          example: '2041-10-28 06:45:22'
          type: string
      required:
      - fingerprint_sha1
      - subject
      - serial_number
      - issuer
      - valid_from
      - valid_to
      title: X.509 Certificate
      type: object
    x509_certificate_chain:
      properties:
        chain:
          items:
            $ref: '#/components/schemas/x509_certificate'
          type: array
      title: Chain of X.509 Certificates
      type: object
    x509_certificates:
      properties:
        x509_certificates_custom:
          items:
            $ref: '#/components/schemas/x509_certificate'
          type: array
        x509_certificates_default:
          items:
            $ref: '#/components/schemas/x509_certificate'
          type: array
      required:
      - x509_certificates_custom
      - x509_certificates_default
      title: X.509 Certificates
      type: object
    x509_truststore_config:
      properties:
        defaults_enabled:
          description: Indicates whether default public certificates are used
          example: true
          type: boolean
      required:
      - defaults_enabled
      title: X.509 Truststore Config
      type: object
    xovis_remote_support_ctrl:
      properties:
        enabled:
          type: boolean
        use_proxy:
          description: Use the proxy if configured
          type: boolean
      required:
      - enabled
      title: Remote support control
      type: object
    xovis_remote_support_state:
      allOf:
      - $ref: '#/components/schemas/xovis_remote_support_ctrl'
      - properties:
          connected:
            description: Is the sensor currently connected to Xovis remote support
            type: boolean
        required:
        - connected
        type: object
      title: Remote support state
      type: object
    zone_door_count_logic_template:
      description: Experimental! Zone logic to count in / out going objects, depending
        on the door state (open/closed)
      properties:
        options:
          allOf:
          - $ref: '#/components/schemas/base_zone_count_template_options'
          - properties:
              count_bicycles:
                type: boolean
              count_prams:
                type: boolean
              count_wheelchairs:
                type: boolean
              door_id:
                format: int64
                type: integer
              max_child_height:
                format: float
                type: number
            type: object
        type:
          enum:
          - XLT_ZONE_DOOR_COUNT
          type: string
      required:
      - type
      type: object
    zone_in_out_count_logic_template:
      properties:
        options:
          allOf:
          - $ref: '#/components/schemas/base_zone_count_template_options'
          - properties:
              max_person_height:
                format: float
                type: number
              min_person_height:
                format: float
                type: number
            type: object
        type:
          enum:
          - XLT_ZONE_IN_OUT_COUNT
          type: string
      required:
      - type
      type: object
    zone_occupancy_count_logic_template:
      properties:
        options:
          allOf:
          - $ref: '#/components/schemas/base_zone_count_template_options'
          - properties:
              max_dwell_time:
                format: float
                type: number
              max_person_height:
                format: float
                type: number
              min_dwell_time:
                format: float
                type: number
              min_person_height:
                format: float
                type: number
            type: object
        type:
          enum:
          - XLT_ZONE_OCCUPANCY_COUNT
          type: string
      required:
      - type
      type: object
  securitySchemes:
    basicAuth:
      scheme: basic
      type: http
info:
  description: OpenAPI specification for Xovis sensors with firmware versions 5.0
    and higher
  title: Sensor V5 API
  version: release.5.3-2367-0b16836004
openapi: 3.0.3
paths:
  /blob/public:
    delete:
      description: '## Description

        Used to remove all blobs from store

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Successfully deleted blob store.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Delete all blobs
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
    get:
      description: '## Description

        Used to retrieve listing of all blobs stored

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stored_blobs'
          description: List of stored blobs
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get listing of blobs
      tags:
      - UI
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: blobstore_read
  /blob/public/favicon.ico:
    delete:
      description: '## Description

        Delete custom icon

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Icon deleted
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          description: Icon not found
      summary: Delete custom icon
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
    get:
      description: '## Description

        Get icon

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Icon
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          description: Not found
      summary: Get icon
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: unrestricted
    put:
      description: '## Description

        Create and upload favicon for UI

        ## Notice

        There is a space quota which can cause failures of this call

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
      responses:
        200:
          description: Icon created
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        413:
          $ref: '#/components/responses/413_no_space_left'
      summary: Create and upload favicon for UI
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
  /blob/public/logo:
    delete:
      description: '## Description

        Delete custom logo

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: logo deleted
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          description: logo not found
      summary: Delete custom logo
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
    get:
      description: '## Description

        Get logo

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: logo
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          description: Not found
      summary: Get logo
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: unrestricted
    put:
      description: '## Description

        Create and upload logo for UI (PNG, SVG, JPEG and GIF)

        ## Notice

        There is a space quota which can cause failures of this call

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
      responses:
        200:
          description: logo created
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        413:
          $ref: '#/components/responses/413_no_space_left'
      summary: Create and upload logo for UI
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
  /blob/public/{id}:
    delete:
      description: '## Description

        Used to remove blobs from store

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of blob
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/200_blob_deleted'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_blob_not_found'
      summary: Delete specific blob
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
    get:
      description: '## Description

        Used to retrieve blobs from store

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of blob
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Blob content
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_blob_not_found'
      summary: Get specific blob
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: unrestricted
    put:
      description: '## Description

        Used to create blobs in store

        ## Notice

        There is a space quota which can cause failures of this call

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of blob
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
      responses:
        200:
          $ref: '#/components/responses/200_blob_created'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Create and upload blob
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
  /blob/store:
    get:
      description: '## Description

        Used to retrieve listing of all blobs stored

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stored_blobs'
          description: List of stored blobs
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get listing of blobs
      tags:
      - UI
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: blobstore_read
  /blob/store/EXTENSION_PIGES:
    delete:
      description: '## Description

        Used to remove EXTENSION_PIGES blob from store

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          $ref: '#/components/responses/200_blob_deleted'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_blob_not_found'
      summary: Delete EXTENSION_PIGES blob
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
    get:
      description: '## Description

        Used to retrieve EXTENSION_PIGES blob from store

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/extension_piges'
          description: Current EXTENSION_PIGES Blob content
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_blob_not_found'
      summary: Get EXTENSION_PIGES blob
      tags:
      - UI
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: blobstore_read
    put:
      description: '## Description

        Used to create EXTENSION_PIGES blob in store

        ## Notice

        There is a space quota which can cause failures of this call

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/extension_piges'
      responses:
        200:
          $ref: '#/components/responses/200_blob_created'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        413:
          $ref: '#/components/responses/413_no_space_left'
      summary: Create and upload EXTENSION_PIGES blob
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
  /blob/store/EXTENSION_PISTE:
    delete:
      description: '## Description

        Used to remove EXTENSION_PISTE blob from store

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          $ref: '#/components/responses/200_blob_deleted'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_blob_not_found'
      summary: Delete EXTENSION_PISTE blob
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
    get:
      description: '## Description

        Used to retrieve EXTENSION_PISTE blob from store

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/extension_piste'
          description: Current EXTENSION_PISTE Blob content
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_blob_not_found'
      summary: Get EXTENSION_PISTE blob
      tags:
      - UI
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: blobstore_read
    put:
      description: '## Description

        Used to create EXTENSION_PISTE blob in store

        ## Notice

        There is a space quota which can cause failures of this call

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/extension_piste'
      responses:
        200:
          $ref: '#/components/responses/200_blob_created'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        413:
          $ref: '#/components/responses/413_no_space_left'
      summary: Create and upload EXTENSION_PISTE blob
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
  /blob/store/LEGACY_MODE:
    delete:
      description: '## Description

        Used to remove LEGACY_MODE blob from store

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          $ref: '#/components/responses/200_blob_deleted'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_blob_not_found'
      summary: Delete LEGACY_MODE blob
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
    get:
      description: '## Description

        Used to retrieve LEGACY_MODE blob from store

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy_mode'
          description: Current LEGACY_MODE Blob content
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_blob_not_found'
      summary: Get LEGACY_MODE blob
      tags:
      - UI
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: blobstore_read
    put:
      description: '## Description

        Used to create LEGACY_MODE blob in store

        ## Notice

        There is a space quota which can cause failures of this call

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/legacy_mode'
      responses:
        200:
          $ref: '#/components/responses/200_blob_created'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        413:
          $ref: '#/components/responses/413_no_space_left'
      summary: Create and upload LEGACY_MODE blob
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
  /blob/store/SENSOR_REGION_INFO:
    delete:
      description: '## Description

        Used to remove SENSOR_REGION_INFO blob from store

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          $ref: '#/components/responses/200_blob_deleted'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_blob_not_found'
      summary: Delete SENSOR_REGION_INFO blob
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
    get:
      description: '## Description

        Used to retrieve SENSOR_REGION_INFO blob from store

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sensor_region_info'
          description: Current SENSOR_REGION_INFO Blob content
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_blob_not_found'
      summary: Get SENSOR_REGION_INFO blob
      tags:
      - UI
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: blobstore_read
    put:
      description: '## Description

        Used to create SENSOR_REGION_INFO blob in store

        ## Notice

        There is a space quota which can cause failures of this call

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sensor_region_info'
      responses:
        200:
          $ref: '#/components/responses/200_blob_created'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        413:
          $ref: '#/components/responses/413_no_space_left'
      summary: Create and upload SENSOR_REGION_INFO blob
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
  /blob/store/SENSOR_ROTATION:
    delete:
      description: '## Description

        Used to remove SENSOR_ROTATION blob from store

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          $ref: '#/components/responses/200_blob_deleted'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_blob_not_found'
      summary: Delete SENSOR_ROTATION blob
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
    get:
      description: '## Description

        Used to retrieve SENSOR_ROTATION blob from store

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sensor_rotation'
          description: Current SENSOR_ROTATION Blob content
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_blob_not_found'
      summary: Get SENSOR_ROTATION blob
      tags:
      - UI
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: blobstore_read
    put:
      description: '## Description

        Used to create SENSOR_ROTATION blob in store

        ## Notice

        There is a space quota which can cause failures of this call

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sensor_rotation'
      responses:
        200:
          $ref: '#/components/responses/200_blob_created'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        413:
          $ref: '#/components/responses/413_no_space_left'
      summary: Create and upload SENSOR_ROTATION blob
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
  /blob/store/SENSOR_SHOW_WIZARD:
    delete:
      description: '## Description

        Used to remove SENSOR_SHOW_WIZARD blob from store

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          $ref: '#/components/responses/200_blob_deleted'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_blob_not_found'
      summary: Delete SENSOR_SHOW_WIZARD blob
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
    get:
      description: '## Description

        Used to retrieve SENSOR_SHOW_WIZARD blob from store

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sensor_show_wizard'
          description: Current SENSOR_SHOW_WIZARD Blob content
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_blob_not_found'
      summary: Get SENSOR_SHOW_WIZARD blob
      tags:
      - UI
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: blobstore_read
    put:
      description: '## Description

        Used to create SENSOR_SHOW_WIZARD blob in store

        ## Notice

        There is a space quota which can cause failures of this call

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sensor_show_wizard'
      responses:
        200:
          $ref: '#/components/responses/200_blob_created'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        413:
          $ref: '#/components/responses/413_no_space_left'
      summary: Create and upload SENSOR_SHOW_WIZARD blob
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
  /blob/store/embedded_ui_config.json:
    delete:
      description: '## Description

        Used to remove embedded_ui_config json from store

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Json deleted
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          description: Json not found
      summary: Delete embedded_ui_config json
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
    get:
      description: '## Description

        Used to retrieve embedded_ui_config json from store

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/embedded_ui_config'
          description: Current embedded_ui_config json content
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          description: Json not found
      summary: Get embedded_ui_config json
      tags:
      - UI
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: blobstore_read
    put:
      description: '## Description

        Used to create embedded_ui_config json in store

        ## Notice

        There is a space quota which can cause failures of this call

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/embedded_ui_config'
      responses:
        200:
          description: Json created
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        413:
          $ref: '#/components/responses/413_no_space_left'
      summary: Create and upload embedded_ui_config json
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
  /blob/store/itxpt_custom_configurations.json:
    delete:
      description: '## Description

        Used to remove ITxPT cumstom configurations blob from store

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          $ref: '#/components/responses/200_blob_deleted'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_blob_not_found'
      summary: Delete itxpt_custom_configurations.json blob
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
    get:
      description: '## Description

        Used to retrieve ITxPT cumstom configurations blob from store

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/itxpt_custom_configurations'
          description: Current ITxPT cumstom configuration  Blob content
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_blob_not_found'
      summary: Get itxpt_custom_configurations.json blob
      tags:
      - UI
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: blobstore_read
    put:
      description: '## Description

        Used to create ITxPT cumstom configurations blob in store

        ## Notice

        There is a space quota which can cause failures of this call

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/itxpt_custom_configurations'
      responses:
        200:
          $ref: '#/components/responses/200_blob_created'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        413:
          $ref: '#/components/responses/413_no_space_left'
      summary: Create and upload itxpt_custom_configurations.json blob
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
  /blob/store/ui_properties.json:
    delete:
      description: '## Description

        Used to remove ui_properties json from store

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Json deleted
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          description: Json not found
      summary: Delete ui_properties json
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
    get:
      description: '## Description

        Used to retrieve ui_properties json from store

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ui_properties'
          description: Current ui_properties json content
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          description: Json not found
      summary: Get ui_properties json
      tags:
      - UI
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: blobstore_read
    put:
      description: '## Description

        Used to create ui_properties json in store

        ## Notice

        There is a space quota which can cause failures of this call

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ui_properties'
      responses:
        200:
          description: Json created
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        413:
          $ref: '#/components/responses/413_no_space_left'
      summary: Create and upload ui_properties json
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
  /blob/store/{id}:
    delete:
      description: '## Description

        Used to remove blobs from store

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of blob
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/200_blob_deleted'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_blob_not_found'
      summary: Delete specific blob
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
    get:
      description: '## Description

        Used to retrieve blobs from store

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of blob
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Blob content
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_blob_not_found'
      summary: Get specific blob
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_read
    put:
      description: '## Description

        Used to create blobs in store

        ## Notice

        There is a space quota which can cause failures of this call

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of blob
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
      responses:
        200:
          $ref: '#/components/responses/200_blob_created'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        413:
          $ref: '#/components/responses/413_no_space_left'
      summary: Create and upload blob
      tags:
      - UI
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: blobstore_write
  /config/state:
    get:
      description: '## Description

        Used to retrieve / detect changes in configuration globally

        '
      parameters:
      - description: Additionally shows contents of configuration endpoints
        in: query
        name: contents
        required: false
        schema:
          enum:
          - 'true'
          - 'false'
          type: string
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/changesets'
          description: Global state of configuration
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get state of configuration globally.
      tags:
      - Configuration Changes
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: www_config_read
  /device/backup:
    delete:
      description: '## Description

        If querying directly GET /device/diag_bundle triggers timeouts,

        call first this endpoint and the check that GET /device/diag_bundle/state

        returns you AVAILABLE

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Started diag bundle generation
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        409:
          description: Backup generation ongoing. Do nothing here.
      summary: Delete backup
      tags:
      - Device
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: backup_write
    get:
      description: '## Description

        This endpoint can be used to download a backup of the sensor configuration.
        The package is encrypted.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Success
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Download a backup of the sensor configuration (blocking call)
      tags:
      - Device
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: backup_read
    post:
      description: '## Description

        If querying directly GET /device/backup triggers timeouts,

        call first this endpoint and check that GET /device/backup/state

        returns you AVAILABLE

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Success
        202:
          description: Ongoing backup. Do nothing here.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Starts a backup of the sensor configuration
      tags:
      - Device
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: backup_write
  /device/backup/state:
    get:
      description: '## Description

        Get the status of the current diag bundle

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/diag_bundle_state'
          description: Diag bundle state
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the backup state (available, in progress, etc.)
      tags:
      - Device
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: backup_read
  /device/diag_bundle:
    delete:
      description: '## Description

        If querying directly GET /device/diag_bundle triggers timeouts,

        call first this endpoint and the check that GET /device/diag_bundle/state

        returns you AVAILABLE

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Started diag bundle generation
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        409:
          description: Diag bundle generation ongoing. Do nothing here.
      summary: Delete generated diag bundle
      tags:
      - Device
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: dev_cfg_write
    get:
      description: '## Description

        Get an encrypted diagnostic bundle for Xovis support.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Diag bundle
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get an encrypted diagnostic bundle for Xovis support (blocking call)
      tags:
      - Device
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: dev_cfg_read
    post:
      description: '## Description

        If querying directly GET /device/diag_bundle triggers timeouts,

        call first this endpoint and the check that GET /device/diag_bundle/state

        returns you AVAILABLE

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Started diag bundle generation
        202:
          description: Ongoing diag bundle generation. Do nothing here.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Starts diag bundle generation
      tags:
      - Device
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: dev_cfg_write
  /device/diag_bundle/state:
    get:
      description: '## Description

        Get the status of the current diag bundle

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/diag_bundle_state'
          description: Diag bundle state
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the diag bundle state (available, in progress, etc.)
      tags:
      - Device
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: dev_cfg_read
  /device/flash/diag:
    get:
      description: '## Description

        This debug API can be used to run a check on the flash memory. The output
        will be returned as plain-text.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Success
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Start diagnosis of the flash memory and return result.
      tags:
      - Device
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: dev_cfg_read
  /device/flash/format:
    post:
      description: '## Description

        This API will format the internal flash storage and thus delete data, configuration
        files and even part of the firmware.

        The operation critical configuration files (network, user, ...) will not be
        affected.

        It should only be used when the sensor is in a erroneous condition and all
        other measures have failed.

        The sensor will reboot into rescue mode where a new firmware has to be installed.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Flash formatting successfully triggered.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Format the flash storage of the sensor.
      tags:
      - Device
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: format_reset
  /device/id:
    delete:
      description: '## Description

        Reset current device name and group to factory default. Per default a device
        has no name or group.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Current general device configuration was successfully reset
            to defaults.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Reset current device name and group to factory default.
      tags:
      - Device
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: dev_cfg_write
    get:
      description: '## Description

        Retrieve current device name and group.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/device_id'
          description: Current general device configuration
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve current device name and group.
      tags:
      - Device
      - Public
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: unrestricted
    put:
      description: '## Description

        Change device name and group.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/device_id'
        description: General device configuration to be updated
      responses:
        200:
          description: Successfully applied general device configuration
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
          description: Given general device configuration was erroneous and therefore
            rejected
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Change device name and group
      tags:
      - Device
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: dev_cfg_write
  /device/info:
    get:
      description: '## Description

        This endpoint can be used to retrieve information about the sensor.

        This endpoint doesn''t required to be authenticated. It''s a public endpoint.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/device_info'
          description: Device information about sensor
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve information about sensor.
      tags:
      - Device
      - Public
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: unrestricted
  /device/led:
    delete:
      description: '## Description

        Reset LED configuration to factory default value. Per default, the LED is
        enabled.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Current general device configuration was successfully reset
            to defaults.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Reset LED configuration to factory default value.
      tags:
      - Device
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: dev_cfg_write
    get:
      description: '## Description

        Retrieve current LED configuration.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/device_led_mode'
          description: Current general device configuration
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve current LED configuration.
      tags:
      - Device
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: dev_cfg_read
    put:
      description: '## Description

        Replace LED configuration.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/device_led_mode'
        description: General device configuration to be updated
      responses:
        200:
          description: Successfully applied general device configuration
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
          description: Given general device configuration was erroneous and therefore
            rejected
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Replace LED configuration
      tags:
      - Device
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: dev_cfg_write
  /device/log:
    get:
      description: '## Description

        Retrieve current device name and group.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            text/plain:
              schema:
                type: string
          description: Userlog
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve current user logfile
      tags:
      - Device
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: dev_cfg_read
  /device/reboot:
    post:
      description: '## Description

        Trigger reboot of device.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Reboot successfully triggered.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Trigger reboot of device.
      tags:
      - Device
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: dev_reboot
  /device/reboot/rescue:
    post:
      description: '## Description

        Trigger reboot of device into rescue mode.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Reboot into rescue successfully triggered.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Trigger reboot of device into rescue mode.
      tags:
      - Device
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: dev_reboot
  /device/reset:
    post:
      description: '## Description

        The Scene and Data Reset will reset the following data:

        * Singlesensor configuration

        * Multisensor configuration

        * RF monitoring configuration

        * The database (e.g. count data)

        * The validation recordings


        After the reset, the sensor will automatically reboot.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Scene and Data Reset successfully triggered.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Trigger Scene and Data Reset.
      tags:
      - Device
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: reset
  /device/reset/hard:
    post:
      description: '## Description

        The Hard Reset deletes all data and all configuration files.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Hard reset successfully triggered.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Trigger Hard Reset.
      tags:
      - Device
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: hard_reset
  /device/restore:
    put:
      description: '## Description

        This endpoint can be used to restore the sensor configuration from a backup
        file.

        If the backup contains static IP settings, the force flag has to be set to
        true, otherwise it will refuse to overwrite the current configuration.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: 'IP settings are handled separately. Restoring different IP configuration
          can be problematic.


          "check" : Check if IP configuration of the backup and the sensor differ.
          If they do, return an error, if not, restore the backup.


          "keep" : Keep the IP configuration, overwrite all other configurations.


          "overwrite" : Overwrite the IP configuration.

          '
        in: query
        name: ip
        required: false
        schema:
          default: check
          type: string
      responses:
        200:
          description: Success
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Restore the sensor configuration from a backup file.
      tags:
      - Device
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: backup_write
  /device/state:
    get:
      description: '## Description

        This endpoint can be used to retreive state information about the device.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/device_state'
          description: Current state of the device
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve current state of the device
      tags:
      - Device
      - Public
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: unrestricted
  /discover/localnetwork:
    get:
      description: '## Description

        This endpoint can be used to search the local (layer 2) network for xovis
        hardware. This call sends a layer 2 broadcast only instead of active scanning.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discover_scan_result'
          description: List of sensors found
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Search sensor local network for Xovis sensors
      tags:
      - Sensor discover
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: net_cfg_read
  /discover/scan:
    post:
      description: '## Description

        This endpoint can be used to search the (layer 3) network for xovis hardware
        (active network scan compared to /localnetwork)<br>

        This will also find Xovis hardware behind routers. Please only use if necessary!

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/discover_scan_job'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discover_scan_result'
          description: List of sensors found
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Scan network for Xovis sensors
      tags:
      - Sensor discover
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: net_cfg_write
  /itxpt/config/time:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/itxpt_time_config'
          description: Time discovery toggle
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve itxpt time discovery config.
      tags:
      - ITxPT
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: unrestricted
    put:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/itxpt_time_config'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/itxpt_time_config'
          description: Time discovery toggle
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: set config itxpt.
      tags:
      - ITxPT
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: unrestricted
  /itxpt/experimental/config:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/itxpt_config'
          description: Current ITxPT configuration
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve itxpt config.
      tags:
      - ITxPT
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: unrestricted
    put:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/itxpt_config'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/itxpt_config'
          description: New ITxPT configuration
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: set config itxpt.
      tags:
      - ITxPT
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: unrestricted
  /itxpt/experimental/config/doors:
    delete:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Deletes all existing apc door configurations
      tags:
      - ITxPT
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/itxpt_config_door_collection'
          description: Current apc door configurations
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Gets all apc door configurations
      tags:
      - ITxPT
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/itxpt_config_door'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/itxpt_config_door'
          description: APC door configuration successfully added
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set apc door configuration
      tags:
      - ITxPT
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /itxpt/experimental/config/doors/{id}:
    delete:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of apc door configuration
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Delete apc door configuration
      tags:
      - ITxPT
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of apc door configuration
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/itxpt_config_door'
          description: Existing apc door configuration with identifier {id}
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get apc door configuration
      tags:
      - ITxPT
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of apc door configuration
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/itxpt_config_door'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/itxpt_config_door'
          description: Updated apc door configuration with identifier {id}
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Change apc door configuration
      tags:
      - ITxPT
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /itxpt/experimental/config/txt:
    get:
      description: This txt records can also be found in the published mdns services
        for APC and inventory services
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/itxpt_config_txt'
          description: Current extra txt records added to APC and inventory services
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve additional txt records set manually.
      tags:
      - ITxPT
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: unrestricted
    put:
      description: The number of additional TXT records can be of 5. Each key and
        value has a length limit of 30 characters.
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/itxpt_config_txt'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/itxpt_config_txt'
          description: New TXT records for APC and inventory services.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set additional TXT records for APC and inventory services.
      tags:
      - ITxPT
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: unrestricted
  /itxpt/experimental/services/state:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/itxpt_services_state'
          description: ITxPT services details
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve itxpt services details.
      tags:
      - ITxPT
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: unrestricted
  /itxpt/experimental/state:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/itxpt_state'
          description: Current ITxPT state
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get various informations about itxpt state
      tags:
      - ITxPT
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: unrestricted
  /itxpt/services/apc/passengerdoorcount:
    get:
      description: Retrieves the counting values of a door. Attention, if you change
        the default path, this endpoint will not work anymore when using swagger.
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PassengerDoorCountDelivery'
          description: Counting values
        400:
          $ref: '#/components/responses/400_bad_request'
        403:
          $ref: '#/components/responses/403_forbidden'
        409:
          $ref: '#/components/responses/409_conflict'
      summary: Retrieves Counting values for a door
      tags:
      - ITxPT
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: unrestricted
    post:
      description: Allows to retrieve counter data when using the ITxPT protocol,
        otherwise returns bad request
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/subscribe_request'
      responses:
        200:
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PassengerDoorCountDelivery'
          description: Counting values
        400:
          $ref: '#/components/responses/400_bad_request'
        403:
          $ref: '#/components/responses/403_forbidden'
        409:
          $ref: '#/components/responses/409_conflict'
      summary: Retrieves Counting values for a door. Attention, if you change the
        default path, this endpoint will not work anymore when using swagger.
      tags:
      - ITxPT
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: unrestricted
  /itxpt/services/inventory/moduleinfo.xml:
    get:
      description: Inventory values contains different details on the sensor and the
        services supported. Attention, if you change the default path, this endpoint
        will not work anymore when using swagger.
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ModulesDelivery'
          description: Current services availables
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieves the inventory values
      tags:
      - ITxPT
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: unrestricted
  /itxpt/time/sntp_server:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/itxpt_time'
          description: Time discovery status
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve itxpt time discovery status.
      tags:
      - ITxPT
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: unrestricted
  /license:
    post:
      description: '## Description

        #Upload license string (V1, V2 or V3 version) or resume paused licenses

        Upload license string (V1, V2 or V3 version)

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        description: License file, license string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/license_add_response'
          description: Successfully uploaded and accepted
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/license_add_response'
          description: License file bad / not for this sensor
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        507:
          description: Problem with storage
      summary: Upload license string (V1, V2 or V3 version)
      tags:
      - License
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: lic_write
  /license/config:
    get:
      description: '## Description

        Get recurring-license config

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/license_config'
          description: License config
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get recurring-license config
      tags:
      - License
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: lic_read
    put:
      description: '## Description

        Set license config for recurring licenses

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/license_config'
        description: General device configuration to be updated
      responses:
        200:
          description: Successfully applied config
        400:
          description: Given config was erroneous and therefore rejected
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set recurring-license config
      tags:
      - License
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: lic_write
  /license/enabletest:
    post:
      description: '## Description

        Enable Xovis one time test license

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Successfully enabled
        400:
          description: Test license was already used
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Enable Xovis one time test license
      tags:
      - License
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: lic_write
  /license/features:
    get:
      description: '## Description

        Get features/extensions list

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sensor_features'
          description: Sensor features
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get available feature strings on this sensor
      tags:
      - License
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: lic_read
  /license/lifetime:
    post:
      description: '## Description

        Upload fixed license file

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        description: License file
      responses:
        200:
          description: Successfully uploaded and accepted
        400:
          description: License file bad / not for this sensor
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        507:
          description: Problem with storage
      summary: Upload (another) fixed license file for this sensor
      tags:
      - License
      x-privacy-mode: IGNORE
      x-privilege: lic_write
  /license/status:
    get:
      description: '## Description

        Get licensed features list

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/license_status'
          description: Sensor licensed features
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get licensed features on this sensor
      tags:
      - License
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: lic_read
  /license/status/details:
    get:
      description: '## Description

        Get licensed features list

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/license_status_detailed'
          description: Sensor licensed features
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get detailed status of each license features supported on this sensor
      tags:
      - License
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: lic_read
  /monitor/config:
    delete:
      description: '## Description

        Reset monitor config.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Monitor settings set to default values
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Reset monitor config
      tags:
      - Monitor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: pip_service
    get:
      description: '## Description

        This endpoint can be used to retrieve Xovis Monitor configuration

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/monitor_config'
          description: Monitor settings
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get monitor configuration
      tags:
      - Monitor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: pip_service
    put:
      description: '## Description

        This endpoint can be used to store Xovis Monitor configuration

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/monitor_config'
      responses:
        200:
          description: Monitor settings changed
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
          description: Request body erroneous or incomplete
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set Monitor configuration
      tags:
      - Monitor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: pip_service
  /monitor/upload:
    get:
      description: '## Description

        This endpoint can be used to retrieve details about last time monitored data
        was sent to Xovis

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/monitor_upload'
          description: Monitor details on reaching out Xovis
        202:
          description: Ongoing transfer of monitored data to Xovis
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get details about last time monitor data was sent to Xovis
      tags:
      - Monitor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: pip_service
    post:
      description: '## Description

        Sends current monitored data to Xovis (not counted in bandwidth limitation)

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Action triggered succesfully
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Sends current monitored data to Xovis
      tags:
      - Monitor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: pip_service
  /multisensor:
    delete:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Successfully removed
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Clear the multisensor
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/multisensor_enable'
          description: Current status
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Enable status of the multisensor
      tags:
      - Multisensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/multisensor_enable'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/multisensor_enable'
          description: Current status
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Enable/disable the multisensor
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/analysis/counters:
    delete:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Force deleting the counters. All modifiers are deleted.
        example: true
        in: query
        name: force
        required: false
        schema:
          type: string
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Deletes all existing counters
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Restrict to counters of a logic.
        in: query
        name: logic_id
        required: false
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/counter_collection'
          description: all counters
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Gets all counters
      tags:
      - Multisensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/counter'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_counter'
          description: Counter successfully added
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
      summary: Adds new counter
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/analysis/counters/{id}:
    delete:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of counter
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: Force deleting the counter. All dependent modifiers are deleted.
        example: true
        in: query
        name: force
        required: false
        schema:
          type: string
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Delete counter
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of counter
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_counter'
          description: Existing counter with identifier {id}
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get counter
      tags:
      - Multisensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of counter
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/indexed_counter'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_counter'
          description: Updated counter with identifier {id}
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Change counter
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/analysis/logics:
    delete:
      operationId: multisensorAnalysisLogicsDelete
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Force deleting all logics. All modifiers and counters are deleted.
        example: 'true'
        in: query
        name: force
        required: false
        schema:
          type: string
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Deletes all existing logics
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      operationId: multisensorAnalysisLogicGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logic_collection'
          description: all logics
      summary: Gets all logics
      tags:
      - Multisensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      operationId: multisensorAnalysisLogicPost
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/logic'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_logic'
          description: Logic successfully added
        400:
          description: Invalid request received, e.g. malformed
        401:
          $ref: '#/components/responses/401_unauthorized'
      summary: Adds new logics
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/analysis/logics/templates:
    delete:
      operationId: multisensorAnalysisLogicTemplateDelete
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Deletes all existing logic templates
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      operationId: multisensorAnalysisLogicTemplateGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logic_template_collection'
          description: all logic templates
      summary: Gets all logic templates
      tags:
      - Multisensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      operationId: multisensorAnalysisLogicTemplatePost
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/logic_template'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_logic_template'
          description: Logic successfully added
        400:
          description: Invalid request received, e.g. malformed
        401:
          $ref: '#/components/responses/401_unauthorized'
      summary: Adds new logic template
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/analysis/logics/templates/{id}:
    delete:
      operationId: multisensorAnalysisLogicsTemplateIdDelete
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of logic template
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Delete logic template with given identifier
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      operationId: multisensorAnalysisLogicsTemplateIdGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of logic template
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_logic_template'
          description: Existing logic template with identifier {id}
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get logic template with given identifier
      tags:
      - Multisensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      operationId: multisensorAnalysisLogicsTemplateIdPut
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of logic template
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/indexed_logic_template'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_logic_template'
          description: Updated modifier with identifier {id}
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Change logic template with given identifier
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/analysis/logics/{id}:
    delete:
      operationId: multisensorAnalysisLogicIdDelete
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of logic
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: Force deleting the logic. All dependent modifiers and counters
          are deleted.
        example: 'true'
        in: query
        name: force
        required: false
        schema:
          type: string
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Delete specific logic
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      operationId: multisensorAnalysisLogicIdGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of logic
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_logic'
          description: Existing logic with identifier {id}
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get logic
      tags:
      - Multisensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      operationId: multisensorAnalysisLogicIdPut
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of logic
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/indexed_logic'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_logic'
          description: Updated logic with identifier {id}
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Change logic
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/analysis/modifiers:
    delete:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Deletes all existing modifiers
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Restrict to modifiers of a logic.
        in: query
        name: logic_id
        required: false
        schema:
          format: int64
          type: integer
      - description: Restrict to modifiers for a counter.
        in: query
        name: counter_id
        required: false
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/modifier_collection'
          description: all modifiers
      summary: Gets all modifiers
      tags:
      - Multisensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/modifier'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_modifier'
          description: Modifier successfully added
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
      summary: Adds new modifier
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/analysis/modifiers/{id}:
    delete:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of modifier
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        404:
          description: modifier not found
      summary: Delete modifier
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of modifier
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_modifier'
          description: Existing modifier with identifier {id}
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get modifier
      tags:
      - Multisensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of modifier
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/indexed_modifier'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_modifier'
          description: Updated modifier with identifier {id}
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Change modifier
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/analysis/transaction:
    post:
      description: Perform several requests as one transaction. Use negative integers
        as placeholders for new ids.
      operationId: multisensorAnalysisTransactionPost
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transaction'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction'
          description: Transaction successfully applied
        400:
          description: Invalid request received, e.g. malformed
        401:
          $ref: '#/components/responses/401_unauthorized'
      summary: Perform several requests as one transaction
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/data/history/heat_map:
    delete:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Reset was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Reset heat map.
      tags:
      - Multisensor History Data
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Include/exclude data in response (default = true)
        example: false
        in: query
        name: data
        required: false
        schema:
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/heat_height_map'
          description: The heat map
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Requesting the heat map.
      tags:
      - Multisensor History Data
      x-generic-push: true
      x-privacy-mode: LEVEL_2
      x-privilege: application_read
  /multisensor/data/history/height_map:
    delete:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Reset was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Reset height map.
      tags:
      - Multisensor History Data
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Include/exclude data in response (default = true)
        example: false
        in: query
        name: data
        required: false
        schema:
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/heat_height_map'
          description: The height map
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Requesting the height map.
      tags:
      - Multisensor History Data
      x-generic-push: true
      x-privacy-mode: LEVEL_2
      x-privilege: application_read
  /multisensor/data/history/logics:
    get:
      description: "## Description\nGet a JSON document with a list of measurements\
        \ (bin) and contained counter values for a \ndefined time range (begin/end)\
        \ and with a defined resolution. The resolution defines the \ntime slices\
        \ for which the counter values are either calculated (diff) or sampled (balance\
        \ \ncounters like occupancy).\n"
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Begin of time interval - ms since epoch in UTC, 0 (begin of data)
          or neg. value (relative to now in ms).
        examples:
          absolute:
            summary: absolute time in ms since epoche in UTC (Tue Jul 20 2022 14:00:00)
            value: 1658318400000
          begin:
            summary: use begin of available data
            value: 0
          relative:
            summary: 7 days ago (now - 7days in ms)
            value: -604800000
        in: query
        name: begin
        required: false
        schema:
          default: -86400000
          type: integer
      - description: End of time interval - ms since epoch in UTC, 0 (now) or neg.
          value (relative to now in ms).
        examples:
          absolute:
            summary: absolute time in ms since epoche in UTC (Tue Jul 26 2022 15:00:00)
            value: 1658840400000
          begin:
            summary: use now resp. newest available data
            value: 0
          relative:
            summary: one hour ago (now - 1h in ms)
            value: -3600000
        in: query
        name: end
        required: false
        schema:
          default: 0
          type: integer
      - description: Resolution in minutes of the resulting data (0 = AUTO resp. calculated
          from number_of_bins and time_range)
        example: 60
        in: query
        name: resolution_min
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: Defines the number of time slices (bins) for the given time range
          (used for calculating resolution_min)
        example: 500
        in: query
        name: number_of_bins
        required: false
        schema:
          default: 0
          maximum: 50000
          minimum: 0
          type: integer
      - description: Set to true if the full time range shall be filled up with empty
          bins if data is missing
        example: true
        in: query
        name: include_empty
        required: false
        schema:
          default: false
          type: boolean
      - description: Enable / disable JSON pretty print.
        example: true
        in: query
        name: pretty
        required: false
        schema:
          default: false
          type: boolean
      - description: Select the time format used in the serialized data
        example: RFC3339
        in: query
        name: time_format
        required: false
        schema:
          default: UNIX_TIME_MS
          enum:
          - UNIX_TIME_MS
          - UNIX_TIME_S
          - RFC3339
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/history_logics'
          description: JSON document with all available history data
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the persisted logics data (historical count values)
      tags:
      - Multisensor History Data
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /multisensor/data/history/logics/{id}:
    get:
      description: "## Description\nSame as for /multisensor/data/history/logics but\
        \ filtered for the given logic.\nCount and meta data will only contain data\
        \ for the selected logic and dependent elements.    \n"
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: id of the logic for filtering
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: Begin of time interval - ms since epoch in UTC, 0 (begin of data)
          or neg. value (relative to now in ms).
        examples:
          absolute:
            summary: absolute time in ms since epoche in UTC (Tue Jul 20 2022 14:00:00)
            value: 1658318400000
          begin:
            summary: use begin of available data
            value: 0
          relative:
            summary: 7 days ago (now - 7days in ms)
            value: -604800000
        in: query
        name: begin
        required: false
        schema:
          default: -86400000
          type: integer
      - description: End of time interval - ms since epoch in UTC, 0 (now) or neg.
          value (relative to now in ms).
        examples:
          absolute:
            summary: absolute time in ms since epoche in UTC (Tue Jul 26 2022 15:00:00)
            value: 1658840400000
          begin:
            summary: use now resp. newest available data
            value: 0
          relative:
            summary: one hour ago (now - 1h in ms)
            value: -3600000
        in: query
        name: end
        required: false
        schema:
          default: 0
          type: integer
      - description: Resolution in minutes of the resulting data (0 = AUTO resp. calculated
          from number_of_bins and time_range)
        example: 60
        in: query
        name: resolution_min
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: Defines the number of time slices (bins) for the given time range
          (used for calculating resolution_min)
        example: 500
        in: query
        name: number_of_bins
        required: false
        schema:
          default: 0
          maximum: 50000
          minimum: 0
          type: integer
      - description: Set to true if the full time range shall be filled up with empty
          bins if data is missing
        example: true
        in: query
        name: include_empty
        required: false
        schema:
          default: false
          type: boolean
      - description: Enable / disable JSON pretty print.
        example: true
        in: query
        name: pretty
        required: false
        schema:
          default: false
          type: boolean
      - description: Select the time format used in the serialized data
        example: RFC3339
        in: query
        name: time_format
        required: false
        schema:
          default: UNIX_TIME_MS
          enum:
          - UNIX_TIME_MS
          - UNIX_TIME_S
          - RFC3339
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/history_logics'
          description: JSON document with all available history data for the given
            logic
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the persisted logics data filtered for a single
      tags:
      - Multisensor History Data
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /multisensor/data/history/sensor_db:
    delete:
      description: "## Description\nDelete all count records and count offsets (resets)\
        \ in the sensor_db.\nAll outputs for logic data will be reset accordingly\
        \ (live count api, logics, push, legacy count push's etc.)\n\n__ATTENTION:__\
        \ This is irreversible! Before performing consider to do a full sensor_db\
        \ backup by downloading sensor_db.tar (/multisensor/data/history/sensor_db.tar)\
        \ \n"
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
      summary: Delete the sensor db (all persisted count data) and reset all logic
        outputs
      tags:
      - Multisensor History Data
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/data/history/sensor_db.tar:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/x-tar:
              schema:
                format: binary
                type: string
          description: The multisensor db tarball
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Download multisensor db tarball containing the internal count record
        database and related data
      tags:
      - Multisensor History Data
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /multisensor/data/history/start_stop:
    delete:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Reset was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Reset start stop points.
      tags:
      - Multisensor History Data
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      operationId: getMultisensorStartStopPoints
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Begin of time interval (milliseconds since epoch in UTC).
        example: 1612867890
        in: query
        name: begin
        required: false
        schema:
          type: number
      - description: End of time interval (milliseconds since epoch in UTC).
        example: 1612867990
        in: query
        name: end
        required: false
        schema:
          type: number
      - description: Max number of points.
        example: 100
        in: query
        name: max
        required: false
        schema:
          type: number
      - description: Include/exclude points in response (default = true)
        example: false
        in: query
        name: points
        required: false
        schema:
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/start_stop'
          description: The start stop points
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Requests the start stop points
      tags:
      - Multisensor History Data
      x-generic-push: true
      x-privacy-mode: LEVEL_2
      x-privilege: application_read
  /multisensor/data/history/start_stop.jpg:
    get:
      operationId: getMultisensorStartStopPointsJpg
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Begin of time interval (milliseconds since epoch in UTC).
        example: 1612867890
        in: query
        name: begin
        required: false
        schema:
          type: number
      - description: End of time interval (milliseconds since epoch in UTC).
        example: 1612867990
        in: query
        name: end
        required: false
        schema:
          type: number
      - description: Max number of points.
        example: 100
        in: query
        name: max
        required: false
        schema:
          type: number
      - description: Include/exclude points in response (default = true)
        example: false
        in: query
        name: points
        required: false
        schema:
          type: boolean
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: Image with the start stop points
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests an image with the start stop points
      tags:
      - Multisensor History Data
      x-generic-push: false
      x-privacy-mode: LEVEL_2
      x-privilege: application_read
  /multisensor/data/history/status:
    get:
      description: "## Description\nGet a JSON document with information about the\
        \ data storage (memory, retention times, time ranges, etc.) and persisted\
        \ data \nin it (count_records, count_offsets for reset etc.)\n"
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              examples:
                history_status:
                  $ref: '#/components/examples/history_status'
              schema:
                $ref: '#/components/schemas/history_status'
          description: JSON document with all available history data
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get status information about persisted data and data storage in general
      tags:
      - Multisensor History Data
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /multisensor/data/live/counts:
    get:
      description: '## Description

        Get a list with all configured counter elements with their actual (live) count
        value since the last reset.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/live_count_collection'
          description: Array of all connection configurations
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get a list with all configured counter elements with their actual (live)
        count value since the last reset.
      tags:
      - Multisensor Live Data
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /multisensor/data/live/counts/reset:
    post:
      description: '## Description

        Resets the (relative) value for all counters to 0

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Sucessfully reset all counters
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Resets the (relative) value for all counters to 0
      tags:
      - Multisensor Live Data
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/data/live/counts/{id}:
    get:
      description: '## Description

        Get the count value since the last reset for the counter defined by {id}.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the counter
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/live_count_specific'
          description: Array of all connection configurations
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get the count value since the last reset for the counter defined by
        {id}.
      tags:
      - Multisensor Live Data
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /multisensor/data/live/counts/{id}/reset:
    post:
      description: '## Description

        Reset the (relative) value for the counter defined by {id} to 0

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the counter
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          description: Sucessfully reset the counter with the given id
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Reset the (relative) value for the counter defined by {id} to 0
      tags:
      - Multisensor Live Data
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/data/live/logics:
    get:
      description: '## Description

        Get all logics containing the list with all configured counter elements belonging
        to it. The counter values are the actual (live) count value since the last
        reset.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/live_logics_collection'
          description: Array of all connection configurations
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get all logics containing the list with all configured counter elements
        belonging to it.
      tags:
      - Multisensor Live Data
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /multisensor/data/live/logics/{id}:
    get:
      description: '## Description

        Get the logic defined by {id} with all configured counter elements belonging
        to it. The counter values are the actual (live) count value since the last
        reset.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the counter
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/live_logics_specific'
          description: Array of all connection configurations
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get the logic defined by {id} with all configured counter elements
        belonging to it.
      tags:
      - Multisensor Live Data
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /multisensor/data/live/logics/{id}/reset:
    post:
      description: '## Description

        Reset the (relative) value to 0 for all counters belonging to the logic defined
        by {id}

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the counter
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          description: Sucessfully reset the logic with the given id
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Reset the (relative) value to 0 for all counters belonging to the logic
        defined by {id}.
      tags:
      - Multisensor Live Data
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/data/push/agents:
    delete:
      description: '## Description

        Delete all configured agents.


        __ATTENTION:__ This can''t be undone and will reset any stored or cached push
        information (e.g. last successfully pushed data etc.).

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: "## Description\nAgents which are declared volatile will not\
          \ be persisted and therefore not survive\na reboot or service restart. They\
          \ can be used e.g. for push's to a remote connection which\nis always configured\
          \ when the remote service is starting up or the sensor is initially \nconnected\
          \ to it.\n### Meaning\n* false (default): delete all regular (non volatile)\
          \ data push agents\n* true: delete all volatile data push agents\n"
        in: query
        name: volatile
        required: false
        schema:
          default: false
          type: boolean
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Delete all configured agents
      tags:
      - Multisensor Data Push
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      description: '## Description

        Get a list of all agents with their configs (array of agent config JSON documents)

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: "## Description\nAgents which are declared volatile will not\
          \ be persisted and therefore not survive\na reboot or service restart. They\
          \ can be used e.g. for push's to a remote connection which\nis always configured\
          \ when the remote service is starting up or the sensor is initially \nconnected\
          \ to it.\n### Values\n* false (default): return the list of regular (non\
          \ volatile) data push agents\n* true: return the list of volatile data push\
          \ agents\n"
        in: query
        name: volatile
        required: false
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/agent_config_collection'
          description: Array of all agent configurations
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get all agent configs
      tags:
      - Multisensor Data Push
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      description: "## Description\nCreate a new data push agent (by passing its config)\n\
        \n## Id generation\nFor regular usage the id is not included in the JSON document\
        \ (and ignored if it is). \nThe response will then contain the full configuration\
        \ and the automatically created id.\nThe behavior of the id creation can be\
        \ adapted with the query parameter id_mode (details see below)\n"
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: '## Description

          Defines the id generation mode if given (automatic on server side (default)
          or user defined from client side).

          ### Modes

          SERVER (default) => an id element in the JSON request body will be ignored
          and the new created id will be returned in the response body

          CLIENT => the id element in the request body will be used for the new agent,
          if id exists the request will fail with response ''409 Conflict''.

          CLIENT_FORCE => same as CLIENT but forcefully overwrite existing agents
          with the given id

          '
        in: query
        name: id_mode
        required: false
        schema:
          default: SERVER
          enum:
          - SERVER
          - CLIENT
          - CLIENT_FORCE
          type: string
      - description: "## Description\nAgents which are declared volatile will not\
          \ be persisted and therefore not survive\na reboot or service restart. They\
          \ can be used e.g. for push's to a remote connection which\nis always configured\
          \ when the remote service is starting up or the sensor is initially \nconnected\
          \ to it.\nThe volatile agents will get id's in a different range than regular\n\
          ones if id_mode=SERVER (default) is used (starting at 100'000).\n### Values\n\
          * false (default): create a new regular (non volatile) agent\n* true: create\
          \ a new volatile agent\n"
        in: query
        name: volatile
        required: false
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            examples:
              live_data:
                $ref: '#/components/examples/agent_config_live_data'
              live_data_periodic:
                $ref: '#/components/examples/agent_config_live_data_periodic'
              logics:
                $ref: '#/components/examples/agent_config_logics'
              wifi_bluetooth:
                $ref: '#/components/examples/agent_config_wifi_bt'
            schema:
              $ref: '#/components/schemas/agent_config'
      responses:
        201:
          content:
            application/json:
              examples:
                live_data:
                  $ref: '#/components/examples/agent_config_live_data_response'
                live_data_periodic:
                  $ref: '#/components/examples/agent_config_live_data_periodic_response'
                logics:
                  $ref: '#/components/examples/agent_config_logics_response'
                wifi_bluetooth:
                  $ref: '#/components/examples/agent_config_wifi_bt_response'
              schema:
                $ref: '#/components/schemas/agent_config'
          description: Agent created, response body contains the fully qualified agent
            configuration (incl. id)
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        409:
          $ref: '#/components/responses/409_conflict'
      summary: Create a new data push agent
      tags:
      - Multisensor Data Push
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/data/push/agents/status:
    get:
      description: '## Description

        Return an array of status information objects for all configured data pushs


        Each status contains information about last successful and last unsuccessful
        pushs (amount, timestamps, etc.)

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: "## Description\nAgents which are declared volatile will not\
          \ be persisted and therefore not survive\na reboot or service restart. They\
          \ can be used e.g. for push's to a remote connection which\nis always configured\
          \ when the remote service is starting up or the sensor is initially \nconnected\
          \ to it.\n### Meaning\n* false (default): get a list of push status information\
          \ for all regular (non volatile) data push agents\n* true: get a list of\
          \ push status information for all volatile data push agents\n"
        in: query
        name: volatile
        required: false
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              examples:
                data_push_status_list:
                  $ref: '#/components/examples/agent_status_all'
              schema:
                $ref: '#/components/schemas/agent_status_all'
          description: Response body is a JSON array containing a list of status information
            for all configured push's (agents)
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: get the status for all configured data pushs
      tags:
      - Multisensor Data Push
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /multisensor/data/push/agents/{id}:
    delete:
      description: '## Description

        Delete a single agent with the given {id}


        __ATTENTION:__ This can''t be undone and will reset any stored or cached push
        information (e.g. last successfully pushed data etc.).

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of agent
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Delete a single agent
      tags:
      - Multisensor Data Push
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      description: '## Description

        Get the config of a single agent with the given {id}. If the agent with {id}
        does not exists, an error will be returned (404 not found).

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of agent
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              examples:
                live_data:
                  $ref: '#/components/examples/agent_config_live_data_response'
                live_data_periodic:
                  $ref: '#/components/examples/agent_config_live_data_periodic_response'
                logics:
                  $ref: '#/components/examples/agent_config_logics_response'
                wifi_bluetooth:
                  $ref: '#/components/examples/agent_config_wifi_bt_response'
              schema:
                $ref: '#/components/schemas/agent_config'
          description: existing agent configuration with id = {id}
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get the configuration of a single agent
      tags:
      - Multisensor Data Push
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      description: '## Description

        Alter the config of a single agent with the given {id} by passing the new/changed
        config JSON document.


        _Note: id element is ignored if contained in JSON_

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of agent
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            examples:
              live_data:
                $ref: '#/components/examples/agent_config_live_data'
              live_data_periodic:
                $ref: '#/components/examples/agent_config_live_data_periodic'
              logics:
                $ref: '#/components/examples/agent_config_logics'
              wifi_bluetooth:
                $ref: '#/components/examples/agent_config_wifi_bt'
            schema:
              $ref: '#/components/schemas/agent_config'
      responses:
        200:
          content:
            application/json:
              examples:
                live_data:
                  $ref: '#/components/examples/agent_config_live_data_response'
                live_data_periodic:
                  $ref: '#/components/examples/agent_config_live_data_periodic_response'
                logics:
                  $ref: '#/components/examples/agent_config_logics_response'
                wifi_bluetooth:
                  $ref: '#/components/examples/agent_config_wifi_bt_response'
              schema:
                $ref: '#/components/schemas/agent_config'
          description: The fully qualified agent configuration (incl. id)
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: 'Alter the configuration of a single agent '
      tags:
      - Multisensor Data Push
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/data/push/agents/{id}/status:
    get:
      description: '## Description

        Return status information for the data push defined by the given {id} (agent
        id)


        The status contains information about last successful and last unsuccessful
        pushs (amount, timestamps, etc.)

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the counter
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          content:
            application/json:
              examples:
                data_push_status:
                  $ref: '#/components/examples/agent_status'
              schema:
                $ref: '#/components/schemas/agent_status'
          description: Response body is a JSON array containing a status information
            object for the data push (agent) referenced by {id}
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: get the status for the data push defined by agent with {id}
      tags:
      - Multisensor Data Push
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /multisensor/data/push/agents/{id}/trigger:
    delete:
      description: '## Description

        Abort the last triggered data push if still running.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of agent
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          description: Abort was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: abort the last triggered data push if still running
      tags:
      - Multisensor Data Push
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      description: '## Description

        Get the trigger push status of the agent {id}

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of agent
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              examples:
                Busy with time range push:
                  $ref: '#/components/examples/agent_trigger_status_busy'
                Idle:
                  $ref: '#/components/examples/agent_trigger_status_idle'
              schema:
                $ref: '#/components/schemas/agent_trigger_status'
          description: Response body is a JSON array containing the trigger status
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: get the trigger push status of the agent {id}
      tags:
      - Multisensor Data Push
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      description: '## Description

        Trigger the data push defined by the given {id}.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of agent
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            examples:
              all:
                $ref: '#/components/examples/agent_trigger_all'
              last_package:
                $ref: '#/components/examples/agent_trigger_last_package'
              now:
                $ref: '#/components/examples/agent_trigger_now'
              time_range:
                $ref: '#/components/examples/agent_trigger_time_range'
            schema:
              $ref: '#/components/schemas/agent_trigger'
      responses:
        200:
          content:
            application/json:
              examples:
                time_range:
                  $ref: '#/components/examples/agent_trigger_time_range'
              schema:
                $ref: '#/components/schemas/agent_trigger_status'
          description: Response body is a JSON array containing received trigger configuration
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: trigger the data push defined by the given {id}
      tags:
      - Multisensor Data Push
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/data/push/connections:
    delete:
      description: '## Description

        Delete all configured connections.


        __ATTENTION:__ This might delete connections which are in use by configured
        data push agents. If a connection is deleted, the corresponding agent will
        obviously stop sending data (but keeps collecting, caching and persisting
        data of course).

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: "## Description\nConnections which are declared volatile will\
          \ not be persisted and therefore not survive\na reboot or service restart.\
          \ They can be used e.g. for push's to a remote connection which\nis always\
          \ configured when the remote service is starting up or the sensor is initially\
          \ \nconnected to it.\n### Meaning\n* false (default): delete all regular\
          \ (non volatile) data push connections\n* true: delete all volatile data\
          \ push connections\n"
        in: query
        name: volatile
        required: false
        schema:
          default: false
          type: boolean
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Delete all configured connections
      tags:
      - Multisensor Data Push
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      description: '## Description

        Get a list of all connections with their configs (array of connection config
        JSON documents)

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: "## Description\nConnections which are declared volatile will\
          \ not be persisted and therefore not survive\na reboot or service restart.\
          \ They can be used e.g. for push's to a remote connection which\nis always\
          \ configured when the remote service is starting up or the sensor is initially\
          \ \nconnected to it.\n### Values\n* false (default): return the list of\
          \ regular (non volatile) data push connections\n* true: return the list\
          \ of volatile data push connections\n"
        in: query
        name: volatile
        required: false
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connection_config_collection'
          description: Array of all connection configurations
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get all connection configs
      tags:
      - Multisensor Data Push
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      description: "## Description\nCreate a new connection (by passing its config)\n\
        \n## Id generation\nFor regular usage the id is not included in the JSON document\
        \ (and ignored if it is). \nThe response will then contain the full configuration\
        \ and the automatically created id.\nThe behavior of the id creation can be\
        \ adapted with the query parameter id_mode (details see below)\n"
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: '## Description

          Defines the id generation mode if given (automatic on server side (default)
          or user defined from client side).

          ### Modes

          SERVER (default) => an id element in the JSON request body will be ignored
          and the new created id will be returned in the response body

          CLIENT => the id element in the request body will be used for the new connection,
          if id exists the request will fail with response ''409 Conflict''.

          CLIENT_FORCE => same as CLIENT but forcefully overwrite existing connections
          with the given id

          '
        in: query
        name: id_mode
        required: false
        schema:
          default: SERVER
          enum:
          - SERVER
          - CLIENT
          - CLIENT_FORCE
          type: string
      - description: "## Description\nConnections which are declared volatile will\
          \ not be persisted and therefore not survive\na reboot or service restart.\
          \ They can be used e.g. for push's to a remote connection which\nis always\
          \ configured when the remote service is starting up or the sensor is initially\
          \ \nconnected to it.\nThe volatile connections will get id's in a different\
          \ range than regular\nones if id_mode=SERVER (default) is used (starting\
          \ at 100'000).\n### Values\n* false (default): create a new regular (non\
          \ volatile) connection\n* true: create a new volatile connection\n"
        in: query
        name: volatile
        required: false
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            examples:
              ftp:
                $ref: '#/components/examples/connection_ftp'
              http:
                $ref: '#/components/examples/connection_http'
              sftp:
                $ref: '#/components/examples/connection_sftp'
            schema:
              $ref: '#/components/schemas/connection_config'
      responses:
        201:
          content:
            application/json:
              examples:
                ftp:
                  $ref: '#/components/examples/connection_ftp_response'
                http:
                  $ref: '#/components/examples/connection_http_response'
                sftp:
                  $ref: '#/components/examples/connection_sftp_response'
              schema:
                $ref: '#/components/schemas/connection_config'
          description: Connection created, response body contains the fully qualified
            connection configuration (incl. id)
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        409:
          $ref: '#/components/responses/409_conflict'
      summary: Create a new connection
      tags:
      - Multisensor Data Push
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/data/push/connections/{id}:
    delete:
      description: '## Description

        Delete a single connection with the given {id}


        __ATTENTION:__ This might delete a connection which is in use by one or more
        configured data push agents. If a connection is deleted, the corresponding
        agent will obviously stop sending data (but keeps collecting, caching and
        persisting data of course).

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of connection
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Delete a single connection
      tags:
      - Multisensor Data Push
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      description: '## Description

        Get the config of a single connection with the given {id}. If the connection
        with {id} does not exists, an error will be returned (404 not found).

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of connection
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              examples:
                ftp:
                  $ref: '#/components/examples/connection_ftp_response'
                http:
                  $ref: '#/components/examples/connection_http_response'
                sftp:
                  $ref: '#/components/examples/connection_sftp_response'
              schema:
                $ref: '#/components/schemas/connection_config'
          description: existing connection configuration with id = {id}
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get the configuration of a single connection
      tags:
      - Multisensor Data Push
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      description: '## Description

        Alter the config of a single connection with the given {id} by passing the
        new/changed config JSON document.


        _Note: id element is ignored if contained in JSON_

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of connection
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            examples:
              ftp:
                $ref: '#/components/examples/connection_ftp'
              http:
                $ref: '#/components/examples/connection_http'
              sftp:
                $ref: '#/components/examples/connection_sftp'
            schema:
              $ref: '#/components/schemas/connection_config'
      responses:
        200:
          content:
            application/json:
              examples:
                ftp:
                  $ref: '#/components/examples/connection_ftp_response'
                http:
                  $ref: '#/components/examples/connection_http_response'
                sftp:
                  $ref: '#/components/examples/connection_sftp_response'
              schema:
                $ref: '#/components/schemas/connection_config'
          description: The fully qualified connection configuration (incl. id)
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: 'Alter the configuration of a single connection '
      tags:
      - Multisensor Data Push
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/data/push/connections/{id}/test:
    post:
      description: "## Description\nTest the connection with the given {id}.\n\nThe\
        \ POST will trigger a connection test and send some dummy (JSON) data to the\
        \ configured server with the configured connection options. The connection\
        \ will be considered as OK, if the dummy data can be transmitted to the server\
        \ and the server responses with a non-error response code (for HTTP(S) that\
        \ would be a HTTP response code in the 200th range, for FTP e.g. 250\u2026\
        ).\n\nIf the connection is a file based connection (e.g. FTP) , the test will\
        \ create a file with the name \u201Cxsensor_connection_test.json\u201D on\
        \ the server and will fail if that is not possible (e.g. due to permission\
        \ issues or other restrictions).\n\nATTENTION - When calling this API, the\
        \ response  might be delayed if there are e.g. slow connections or delayed\
        \ server responses up to the configured connection and other timeouts.\n\n\
        The connection test will return a JSON container with detailed information\
        \ about the connection and transmit trial and the servers response (see examples).\n"
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the counter
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          content:
            application/json:
              examples:
                HTTP connection not ok - client error:
                  $ref: '#/components/examples/connection_test_response_nok1'
                HTTP connection ok:
                  $ref: '#/components/examples/connection_test_response_ok'
                No connection or no network:
                  $ref: '#/components/examples/connection_test_response_nok2'
              schema:
                $ref: '#/components/schemas/connection_test_response'
          description: JSON response struct with connection information
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: test the connection with the given {id}
      tags:
      - Multisensor Data Push
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/multisensor_alignment:
    delete:
      responses:
        200:
          description: Successfully deleted.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Delete the multisensor alignment
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/multisensor_alignment'
          description: List of all added sensors.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the multisensor alignment
      tags:
      - Multisensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /multisensor/recordings:
    delete:
      description: '## Description

        Delete all recordings.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Successfully deleted
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Delete all recordings.
      tags:
      - Multisensor Recording
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_write
    get:
      description: '## Description

        Get a list with all recordings.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recordings'
          description: Array of all recordings.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get a list with all recordings.
      tags:
      - Multisensor Recording
      x-generic-push: true
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
    post:
      description: '## Description

        Schedule a new recording.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/recording_schedule'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_recording_schedule'
          description: New recording with id.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        417:
          description: 'Validation of schedule failed. The following requirements
            must be satisfied: end time after start time, start time not in the past'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Schedule a new recording.
      tags:
      - Multisensor Recording
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_write
  /multisensor/recordings/quota:
    get:
      description: '## Description

        Get the total and remaining memory quota in bytes.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  remaining_quota:
                    example: 1000
                    format: uint32
                    type: number
                  total_quota:
                    example: 20971520
                    format: uint32
                    type: number
                type: object
          description: Memory quota info
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get info about memory quota.
      tags:
      - Multisensor Recording
      x-generic-push: true
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /multisensor/recordings/{id}:
    delete:
      description: '## Description

        Delete one specific recording defined by {id}.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the validation recording schedule
        in: path
        name: id
        required: true
        schema:
          format: uint64
          type: number
      responses:
        200:
          description: Successfully deleted
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        404:
          $ref: '#/components/responses/404_id_not_found'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Delete one specific recording defined by {id}.
      tags:
      - Multisensor Recording
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_write
    get:
      description: '## Description

        Get a specific recording defined by {id}.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the recording.
        in: path
        name: id
        required: true
        schema:
          format: uint64
          type: number
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recording'
          description: The recording.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        404:
          $ref: '#/components/responses/404_id_not_found'
        416:
          description: Requested id is out of range.
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get a specific recording defined by {id}.
      tags:
      - Multisensor Recording
      x-generic-push: true
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /multisensor/recordings/{id}/download:
    get:
      description: '## Description

        Get a specific recording file defined by {id}.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the validation recording file. This corresponds to the
          file_index contained in the response when send a get to /multisensor/data/validation/files.
        in: path
        name: id
        required: true
        schema:
          format: uint64
          type: number
      responses:
        200:
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: A validation recording file (.xvr)
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        404:
          $ref: '#/components/responses/404_id_not_found'
        416:
          description: Requested id is out of range.
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Download a specific recording file defined by {id}.
      tags:
      - Multisensor Recording
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /multisensor/scene/geometries:
    delete:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Deletes all existing geometries
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scene_geometries'
          description: all geometries
      summary: Gets all geometries
      tags:
      - Multisensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/scene_geometry'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_scene_geometry'
          description: Geometry added successfully
        400:
          description: Invalid request received, e.g. malformed
        401:
          $ref: '#/components/responses/401_unauthorized'
      summary: Adds new geometry
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/scene/geometries/{id}:
    delete:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of geometry
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        404:
          description: geometry not found
      summary: Delete geometry
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of geometry
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_scene_geometry'
          description: Existing geometry with identifier {id}
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get geometry
      tags:
      - Multisensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of geometry
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/indexed_scene_geometry'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_scene_geometry'
          description: Updated geometry with identifier {id}
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Change geometry
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/scene/images/background.jpg:
    get:
      operationId: multisensorGetSceneImagesBackgroundJpg
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: The static background image
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requesting the static background image and the tracked objects of the
        current scene
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: LEVEL_1
      x-privilege: application_read
  /multisensor/scene/images/background.tar:
    get:
      operationId: multisensorGetSceneImagesBackgroundTar
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            application/x-tar:
              schema:
                format: binary
                type: string
          description: The static background image and tracked objects
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requesting the static background image and the tracked objects of the
        current scene
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: LEVEL_1
      x-privilege: application_read
  /multisensor/scene/images/data:
    get:
      operationId: multisensorGetSceneImagesData
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
          description: The live data with tracked objects
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Requests the tracked objects of the current scene
      tags:
      - Multisensor
      x-generic-push: true
      x-privacy-mode: LEVEL_2
      x-privilege: application_read
  /multisensor/scene/images/data.jpg:
    get:
      operationId: multisensorGetSceneImagesDataJpg
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: The live data with tracked objects
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the tracked objects of the current scene with a white image
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: LEVEL_2
      x-privilege: application_read
  /multisensor/scene/images/data.png:
    get:
      operationId: multisensorGetSceneImagesDataPng
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            image/png:
              schema:
                format: binary
                type: string
          description: The live data with tracked objects
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the tracked objects of the current scene with a white image
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: LEVEL_2
      x-privilege: application_read
  /multisensor/scene/images/floor_plan.jpg:
    get:
      operationId: multisensorGetSceneImagesFloorPlanJpg
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: The floor plan
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requesting the floor plan and the tracked objects of the current scene
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: LEVEL_2
      x-privilege: application_read
  /multisensor/scene/images/live.jpg:
    get:
      operationId: multisensorGetSceneImagesLiveJpg
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: The live image and tracked objects
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the background image and the tracked objects of the current
        scene
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /multisensor/scene/images/live.tar:
    get:
      operationId: multisensorGetSceneImagesLiveTar
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            application/x-tar:
              schema:
                format: binary
                type: string
          description: The live image and tracked objects
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the background image and the tracked objects of the current
        scene
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /multisensor/scene/images/metadata:
    get:
      operationId: multisensorGetSceneImagesMetadata
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/live_image_meta_headers'
          description: The image metadata
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Requests the image metadata of the current scene
      tags:
      - Multisensor
      x-generic-push: true
      x-privacy-mode: LEVEL_3
      x-privilege: application_read
  /multisensor/scene/images/metadata.jpg:
    get:
      operationId: multisensorGetSceneImagesMetadataJpg
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: The image metadata
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the image metadata of the current scene with a white image
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: LEVEL_3
      x-privilege: application_read
  /multisensor/scene/images/metadata.png:
    get:
      operationId: multisensorGetSceneImagesMetadataPng
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            image/png:
              schema:
                format: binary
                type: string
          description: The image metadata
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the image metadata of the current scene with a white image
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: LEVEL_3
      x-privilege: application_read
  /multisensor/scene/masks:
    delete:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Deletes all existing masks
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/all_scene_masks'
          description: List of all existing masks
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Gets all existing masks
      tags:
      - Multisensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/scene_mask'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/existing_scene_mask'
          description: Successfully created
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Adds a new mask, returns id of the created mask
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/scene/masks/{id}:
    delete:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the data push
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Deletes existing mask
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the scene mask
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/existing_scene_mask'
          description: List of all existing masks
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Gets an existing mask
      tags:
      - Multisensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the data push
        in: path
        name: id
        required: true
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/scene_mask'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/existing_scene_mask'
          description: Modification was successul
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Modifies existing mask
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/sensors:
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sensors_information'
          description: List of all added sensors.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get list of all sensors
      tags:
      - Multisensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /multisensor/sensors/{mac}:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - allowReserved: true
        description: Identification of sensor. Which is its MAC.
        in: path
        name: mac
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sensor_information'
          description: Successfully retrieved information about specific sensor
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get information about specific sensor from multisensor
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      description: Update sensor information.
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - allowReserved: true
        description: Identification of sensor. Which is its MAC.
        in: path
        name: mac
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sensor_information_put'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sensor_information'
          description: Successfully added.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Update sensor information
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/settings/advanced:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advanced_multisensor_settings'
          description: A json containing the current detector settings.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the advanced settings.
      tags:
      - Multisensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/advanced_multisensor_settings'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advanced_multisensor_settings'
          description: Successfully applied
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set the advanced settings.
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/settings/groups:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups_settings'
          description: A json containing the current groups settings.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the groups settings.
      tags:
      - Multisensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groups_settings'
      responses:
        200:
          description: Successfully applied
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set the groups settings.
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/settings/path_stitching:
    get:
      operationId: multisensorPathStitcherGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/path_stitching_settings'
          description: A json containing the current path stitcher settings.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the path stitcher settings.
      tags:
      - Multisensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      operationId: multisensorPathStitcherPut
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/path_stitching_settings'
      responses:
        200:
          description: Successfully applied
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set the path stitcher settings.
      tags:
      - Multisensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/status:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/multisensor_status'
          description: Current status
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the status of the multisensor.
      tags:
      - Multisensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /multisensor/stitcher/apply:
    post:
      responses:
        200:
          description: Successfully applied
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Apply the stitching.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/stitcher/background.jpg:
    get:
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: The background image.
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/static_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get background image.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: LEVEL_1
      x-privilege: application_read
  /multisensor/stitcher/data:
    delete:
      responses:
        200:
          description: Successfully cleared
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Clear the stitching draft.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      responses:
        200:
          content:
            application/x-tar:
              schema:
                format: binary
                type: string
          description: The file content.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Download stitching data.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      requestBody:
        content:
          application/x-tar:
            schema:
              format: binary
              type: string
        description: The file content.
      responses:
        200:
          description: Successfully loaded
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Upload stitching data.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/stitcher/experimental/merged_background.jpg:
    get:
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: The merged background image.
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/static_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get background image merged with floor plan.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: LEVEL_1
      x-privilege: application_read
  /multisensor/stitcher/floor_plan:
    delete:
      responses:
        200:
          description: The floor plan was successfully deleted.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Delete the floor plan.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/stitcher/floor_plan.jpg:
    get:
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: The floor plan.
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/static_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get floor plan from alignment.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: LEVEL_1
      x-privilege: application_read
  /multisensor/stitcher/floor_plan/image.png:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            image/png:
              schema:
                format: binary
                type: string
          description: The floor plan.
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/static_image_meta_headers'
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get the floor plan to draw stitching points.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: LEVEL_2
      x-privilege: application_read
    put:
      requestBody:
        content:
          image/png:
            schema:
              format: binary
              type: string
        description: The file content.
      responses:
        200:
          description: Successfully uploaded
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Upload floor plan.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/stitcher/floor_plan/metadata:
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/floor_plan_metadata'
          description: The floor plan metadata.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get the floor plan metadata.
      tags:
      - Multisensor Stitching
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/floor_plan_metadata'
      responses:
        200:
          description: The metadata was successfully set.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Patch the floor plan metadata.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/floor_plan_metadata'
      responses:
        200:
          description: The metadata was successfully set.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Set the floor plan metadata.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/stitcher/floor_plan/preview.jpg:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: The floor plan preview.
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/static_image_meta_headers'
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get the preview of the floor plan.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: LEVEL_2
      x-privilege: application_read
  /multisensor/stitcher/limits:
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stitcher_limits'
          description: Limits of the stitcher.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the limits of the stitcher
      tags:
      - Multisensor Stitching
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /multisensor/stitcher/multisensor_alignment:
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/multisensor_alignment'
          description: The multisesnor alignment.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the multisensor alignment.
      tags:
      - Multisensor Stitching
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /multisensor/stitcher/reference:
    delete:
      description: '## Description

        Delete the reference sensor of the multisensor stitching.

        '
      responses:
        200:
          description: The reference sensor was successfully deleted.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Delete the reference sensor of the multisensor stitching.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      description: '## Description

        Get the reference sensor.

        '
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reference'
          description: The reference sensor.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the reference sensor of the multisensor.
      tags:
      - Multisensor Stitching
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      description: '## Description

        Set the reference sensor of the multisensor stitching.

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reference'
      responses:
        200:
          description: The reference sensor was successfully set.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set the reference sensor of the multisensor stitching.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/stitcher/remove:
    post:
      responses:
        200:
          description: Successfully removed
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Remove the last applied stitching.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/stitcher/reset:
    post:
      responses:
        200:
          description: Successfully loaded
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Load the applied stitching.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/stitcher/sensors:
    delete:
      responses:
        200:
          description: Successfully cleared
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Remove all sensors.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stitcher_sensors_information'
          description: List of all added sensors.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get list of all sensors
      tags:
      - Multisensor Stitching
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      description: Add sensor if the connection to this sensor is possible. Afterwards
        needed data will be collected.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stitcher_sensor_information_post'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stitcher_sensor_information'
          description: Successfully added.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Add sensor
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/stitcher/sensors/update:
    post:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stitcher_sensors_information'
          description: Successfully updated all stitching data of all sensors
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Update collected data of all sensors
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/stitcher/sensors/{id}:
    delete:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - allowReserved: true
        description: Identification of sensor.
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          description: Successfully deleted sensor from stitching sensor list
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Delete specific sensor from stitching
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - allowReserved: true
        description: Identification of sensor.
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stitcher_sensor_information'
          description: Successfully retrieved information about specific sensor
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get specific sensor from stitching
      tags:
      - Multisensor Stitching
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      description: Update information of an already added sensor. Afterwards collected
        data will be updated.
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - allowReserved: true
        description: Identification of sensor.
        in: path
        name: id
        required: true
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stitcher_sensor_information_post'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stitcher_sensor_information'
          description: Successfully added.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Update sensor information
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/stitcher/sensors/{id}/additional_information:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - allowReserved: true
        description: Identification of sensor.
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/additional_information'
          description: The additional settings.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          description: Specified sensor not found
      summary: Get additional information of the sensor.
      tags:
      - Multisensor Stitching
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - allowReserved: true
        description: Identification of sensor.
        in: path
        name: id
        required: true
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/additional_information'
      responses:
        200:
          description: Additional information successfully set.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          description: Specified sensor not found
      summary: Set additional information of the sensor.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/stitcher/sensors/{id}/image.png:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - allowReserved: true
        description: Identification of sensor.
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          content:
            image/png:
              schema:
                format: binary
                type: string
          description: The image.
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/static_image_meta_headers'
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get the image of a sensor to draw stitching points.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: LEVEL_1
      x-privilege: application_read
  /multisensor/stitcher/sensors/{id}/preview.jpg:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - allowReserved: true
        description: Identification of sensor.
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: The preview image.
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/static_image_meta_headers'
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get the preview image of a sensor.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: LEVEL_1
      x-privilege: application_read
  /multisensor/stitcher/sensors/{id}/synchronous_update:
    post:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - allowReserved: true
        description: Identification of sensor.
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stitcher_sensor_information'
          description: Successfully updated stitching data of specific sensor
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Update stitching data of specific sensor
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/stitcher/sensors/{id}/update:
    post:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - allowReserved: true
        description: Identification of sensor.
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stitcher_sensor_information'
          description: Successfully triggered update of stitching data of specific
            sensor
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Trigger update of stitching data of specific sensor
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/stitcher/settings:
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stitcher_settings'
          description: Get stitcher settings.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get stitcher settings
      tags:
      - Multisensor Stitching
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      description: Set stitcher settings.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stitcher_settings'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stitcher_settings'
          description: Successfully set.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set stitcher settings
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/stitcher/status:
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stitcher_status'
          description: Status of the stitcher.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the status of the stitcher
      tags:
      - Multisensor Stitching
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /multisensor/stitcher/stitching_points:
    get:
      description: '## Description

        Get the stitching points of a sensor pair.

        ## Notice

        *  Points given in reference coordinate system VIEW

        '
      parameters:
      - allowReserved: true
        description: The MAC address of the first sensor.
        example: 00:00:00:00:00:01
        in: query
        name: serial_1
        required: true
        schema:
          type: string
      - allowReserved: true
        description: The MAC address of the second sensor.
        example: 00:00:00:00:00:02
        in: query
        name: serial_2
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stitching_points'
          description: The stitching points of the sensor pair.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the stitching points of a sensor pair.
      tags:
      - Multisensor Stitching
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      description: '## Description

        Save the stitching points for a sensor pair.

        ## Notice

        *  Points given in reference coordinate system VIEW

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stitching_points'
      responses:
        200:
          description: The stitching points are successfully saved.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Save the stitching points for a sensor pair.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    put:
      description: '## Description

        Save the stitching points for a sensor pair.

        ## Notice

        *  Points given in reference coordinate system VIEW

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stitching_points'
      responses:
        200:
          description: The stitching points are successfully saved.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Save the stitching points for a sensor pair.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /multisensor/stitcher/stitching_points/evaluate:
    post:
      description: '## Description

        Save the stitching points for a sensor pair.

        ## Notice

        *  Points given in reference coordinate system VIEW

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stitching_points'
      responses:
        200:
          description: The stitching points are successfully saved.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Evaluate the stitching points of a sensor pair.
      tags:
      - Multisensor Stitching
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /network/gigabit:
    get:
      description: '## Description

        This endpoint can be used to retrieve gigabit ethernet capabilitiy.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gigabit_enabled'
          description: Current state of gigabit enable
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve current state of gigabit enable
      tags:
      - Networking
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: net_cfg_read
    put:
      description: '## Description

        This endpoint can be used to enable/disable gigabit ethernet capability.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gigabit_enabled'
        description: Gigabit enable- state that needs to be updated
      responses:
        200:
          description: Gigabit enable- state successfully set
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
          description: Given gigabit enable- state was erroneous and therefore rejected.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Update or replace existing state of gigabit enable
      tags:
      - Networking
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: net_cfg_write
  /network/hostname:
    delete:
      description: '## Description

        This endpoint can be used to reset hostname of sensor to factory default value.

        ## Factory default value

        The default hostname is composed of a fixed prefix and last 3 bytes of MAC:


        `XS-SENSOR-[6 last chars of MAC without any separators, lower case]`

        ### Example

        A sensor with MAC `00:1E:C0:9D:2E:67` has following default hostname: `XS-SENSOR-9d2e67`

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Current hostname was successfully reset
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Reset current hostname to factory default.
      tags:
      - Networking
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: net_cfg_write
    get:
      description: '## Description

        This endpoint can be used to retrieve hostname of sensor.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hostname'
          description: Current hostname
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve current hostname
      tags:
      - Networking
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: net_cfg_read
    put:
      description: '## Description

        This endpoint can be used to store hostname of sensor.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/hostname'
        description: Hostname that needs to be updated
      responses:
        200:
          description: Given hostname was successfully set
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
          description: Given hostname was erroneous and therefore rejected.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Update or replace existing hostname with given hostname
      tags:
      - Networking
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: net_cfg_write
  /network/ipv4:
    delete:
      description: '## Description

        This endpoint can be used to reset network IPv4 configuration to default.

        ## Factory default value

        At factory default the sensor will try to retrieve DHCP lease.

        ### Configuration

        ```json

        { "dhcp_enabled" : true }

        ```

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Current configuration was successfully reset
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Reset current configuration to factory default.
      tags:
      - Networking
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: net_cfg_write
    get:
      description: '## Description

        This endpoint can be used to retrieve network IPv4 configuration.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              examples:
                DHCP:
                  value:
                    address: ''
                    dhcp_enabled: true
                    dns_entries: []
                    fallback_enabled: true
                    gateway: ''
                    netmask: ''
                STATIC_FULL:
                  value:
                    address: 10.10.20.12
                    dhcp_enabled: false
                    dns_entries:
                    - 1.1.1.1
                    - 8.8.8.8
                    gateway: 10.10.20.254
                    netmask: 255.255.255.0
              schema:
                $ref: '#/components/schemas/network_ipv4_settings'
          description: Current configuration of IPv4 network
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve current IPv4 network configuration
      tags:
      - Networking
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: net_cfg_read
    put:
      description: '## Description

        This endpoint can be used to store network IPv4 configuration.

        ## Notice

        To disable DHCP IP assignemnt valid static IP settings must be provided. **The
        attribute `dhcp_enabled` cannot be set to false. It

        is used to enable DHCP IP assignment only.**

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            examples:
              DHCP:
                value:
                  dhcp_enabled: true
                  fallback_enabled: true
              STATIC_FULL:
                value:
                  address: 10.10.20.12
                  dns_entries:
                  - 1.1.1.1
                  - 8.8.8.8
                  gateway: 10.10.20.254
                  netmask: 255.255.255.0
              STATIC_MINIMAL:
                value:
                  address: 10.10.20.12
                  dns_entries:
                  - 1.1.1.1
                  netmask: 255.255.255.0
            schema:
              $ref: '#/components/schemas/network_ipv4_settings'
        description: Network settings that needs to be updated
      responses:
        200:
          description: Given IPv4 network configuration was successfully stored
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
          description: Given IPv4 network configuration was erroneous and therefore
            rejected.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Update or replace existing configuration with given IPv4 network configuration
      tags:
      - Networking
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: net_cfg_write
  /network/ipv6:
    delete:
      description: '## Description

        Reset the network IPv6 configuration to default (IPv6 is disabled)

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Current configuration was successfully reset
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Reset current configuration to factory default.
      tags:
      - Networking
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: net_cfg_write
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/network_ipv6_settings'
          description: Current configuration of IPv6 network
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve current IPv6 network configuration
      tags:
      - Networking
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: net_cfg_read
    put:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/network_ipv6_settings'
        description: Network settings that needs to be updated
      responses:
        200:
          description: Given IPv6 network configuration was successfully stored
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
          description: Given IPv6 network configuration was erroneous and therefore
            rejected.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Replace existing configuration with given IPv6 network configuration
      tags:
      - Networking
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: net_cfg_write
  /network/mdns/config:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mdns_config'
          description: Current mdns configuration
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve mdns configuration
      tags:
      - Networking
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: net_cfg_read
    put:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mdns_config'
        description: Hostname that needs to be updated
      responses:
        200:
          description: New mdns configuration was successfully set
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Update or replace existing mdns configuration
      tags:
      - Networking
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: net_cfg_write
  /network/mdns/state:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mdns_state'
          description: Current services found using mdns.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve the current services found using mdns.
      tags:
      - Networking
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: net_cfg_read
  /network/pip:
    get:
      description: '## Description

        This endpoint can be used to retrieve Xovis PIP configuration

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pip_state'
          description: PIP settings/state
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get PIP settings/state
      tags:
      - PIP
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: pip_cfg_read
    put:
      description: '## Description

        This endpoint can be used to store Xovis PIP configuration

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pip_settings'
      responses:
        202:
          description: PIP settings changed
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
          description: Request body erroneous or incomplete
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set PIP settings
      tags:
      - PIP
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: pip_cfg_write
  /network/pip_quota_reset:
    post:
      description: '## Description

        This endpoint can be used to reset monthly quota of Xovis PIP

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Quota reset
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Reset monthly used PIP quota
      tags:
      - PIP
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: pip_cfg_write
  /network/proxy:
    delete:
      description: '## Description

        This endpoint can be used to reset proxy configuration to factory default.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Current proxy configuration is successfully deleted.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Delete current proxy configuration.
      tags:
      - Networking
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: net_cfg_write
    get:
      description: '## Description

        This endpoint can be used to retrieve proxy configuration.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              examples:
                PROXY_DISABLED:
                  value:
                    enabled: false
                PROXY_FULL:
                  value:
                    enabled: true
                    port: 8080
                    server: www.example.com
                    user: root
                PROXY_NO_USER:
                  value:
                    enabled: true
                    port: 8080
                    server: www.example.com
              schema:
                $ref: '#/components/schemas/network_proxy'
          description: Current proxy configuration
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve current proxy configuration.
      tags:
      - Networking
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: net_cfg_read
    put:
      description: '## Description

        This endpoint can be used to store proxy configuration.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            examples:
              PROXY_DISABLED:
                value:
                  enabled: false
              PROXY_FULL:
                value:
                  enabled: true
                  pass: test
                  port: 8080
                  server: www.example.com
                  user: root
              PROXY_NO_USER:
                value:
                  enabled: true
                  port: 8080
                  server: www.example.com
            schema:
              $ref: '#/components/schemas/network_proxy'
        description: Proxy configuration that needs to be updated. The password is
          optional as long as there is already a password stored
      responses:
        200:
          description: Given proxy configuration was successfully set.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
          description: Given proxy configuration was erroneous and therefore rejected.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Update or replace existing proxy configuration with given proxy configuration.
      tags:
      - Networking
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: net_cfg_write
  /network/remotes:
    get:
      description: '## Description

        This endpoint can be used to retrieve all remote connection configurations.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/remote_connections'
          description: List of all remote connection settings
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get all remote connections settings
      tags:
      - Remote Access
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: remote_cfg_read
    post:
      description: '## Description

        This endpoint can be used to create new remote connection configuration.

        ## Notice

        This call will start the remote connection immediately.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/remote_connection'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_remote_connection'
          description: Successfully created remote connection configuration
        400:
          description: Given remote connection configuration was erroneous and therefore
            rejected
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        409:
          description: Remote endpoint already exists
        507:
          description: No space left for new remote connections (max 14), delete another
            one first
      summary: Create new remote connection configuration
      tags:
      - Remote Access
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: remote_cfg_write
  /network/remotes/services/config:
    get:
      description: '## Description

        This endpoint can be used to retrieve Xovis services connection configuration

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/remote_services_settings'
          description: Service remote connection settings
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get remote connection for sensors services settings
      tags:
      - Remote Access
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: remote_cfg_read
    put:
      description: '## Description

        This endpoint can be used to store Xovis services connection configuration

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/remote_services_settings'
      responses:
        202:
          description: settings changed
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
          description: Request body erroneous or incomplete
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set remote connection for sensors services settings
      tags:
      - Remote Access
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: remote_cfg_write
  /network/remotes/services/state:
    get:
      description: '## Description

        This endpoint can be used to retrieve Xovis services connection configuration

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/remote_services_state'
          description: Service remote connection state
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get remote connection for sensors services state
      tags:
      - Remote Access
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: remote_cfg_read
  /network/remotes/state:
    get:
      description: '## Description

        This endpoint can be used to retrieve state of all remote connections.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/remote_connection_states'
          description: State of remote connections
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get state of all remote connections
      tags:
      - Remote Access
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: remote_cfg_read
  /network/remotes/xovissupport:
    get:
      description: '## Description

        This endpoint can be used to retrieve state of Xovis Support remote connection.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/xovis_remote_support_state'
          description: Remote support state
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get Xovis remote support state
      tags:
      - Remote Access
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: remote_cfg_read
    put:
      description: '## Description

        This endpoint can be used to control Xovis Support remote connection.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/xovis_remote_support_ctrl'
      responses:
        202:
          description: Remote support settings changed
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
          description: Request body erroneous or incomplete
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Xovis remote support control
      tags:
      - Remote Access
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: remote_cfg_write
  /network/remotes/{id}:
    delete:
      description: '## Description

        This endpoint can be used to remove remote connection configuration.

        ## Notice

        This call will stop remote connection immediately.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of the remote connection
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successfully stopped and deleted remote connection
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          description: Not found (id must be 0-13)
      summary: Delete configuration of remote connection
      tags:
      - Remote Access
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: remote_cfg_write
    get:
      description: '## Description

        This endpoint can be used to retrieve specific remote connection configuration.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of the remote connection
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_remote_connection'
          description: Remote connection configuration
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          description: Not found (id must be 0-13 and configured)
      summary: Retrieve configuration of remote connection of interest
      tags:
      - Remote Access
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: remote_cfg_read
    put:
      description: '## Description

        This endpoint can be used to replace existing remote connection configuration.
        If a new token/pw is not supplied, the existing one will be kept.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of the remote connection
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/indexed_remote_connection'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_remote_connection'
          description: Successfully replaced remote connection configuration
        400:
          description: Given remote connection configuration was erroneous and therefore
            rejected
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          description: Bad id (must be 0-13)
        409:
          description: Remote endpoint already exists
      summary: Replace existing remote connection configuration
      tags:
      - Remote Access
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: remote_cfg_write
  /network/remotes/{id}/state:
    get:
      description: '## Description

        This endpoint can be used to retrieve state of specific remote connection.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: id of the remote connection
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/remote_connection_state'
          description: Connection state
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          description: Not found (id must be 0-13 and configured)
      summary: Get state of the remote connection
      tags:
      - Remote Access
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: remote_cfg_read
  /network/state:
    get:
      description: '## Description

        This endpoint can be used to retrieve network status information.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/network_state'
          description: Current state of network
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve current state of network
      tags:
      - Networking
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: net_cfg_read
  /network/x509/truststore:
    delete:
      description: '## Description

        This endpoint can be used to reset truststore to factory default

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Successfully reset certificates to factory default
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Reset current certificates to factory default
      tags:
      - Trusted Authorities
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: truststore_write
    get:
      description: '## Description

        This endpoint can be used to retrieve list of installed X.509 certificates
        in truststore

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/x509_certificates'
          description: List of installed certificates
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve list of installed certificates
      tags:
      - Trusted Authorities
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: truststore_read
    post:
      description: '## Description

        This endpoint can be used to install X.509 certificates in truststore

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/x509_certificate'
          description: Certificate installed successfully
        400:
          description: Given X509 certificate was erroneous and therefore rejected
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        409:
          description: Certificate already exists
        507:
          description: Insufficent storage, delete old certificates
      summary: Install (create or overwrite) X509 certificate
      tags:
      - Trusted Authorities
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: truststore_write
  /network/x509/truststore/config:
    get:
      description: '## Description

        This endpoint can be used to retrieve configuration of X.509 truststore

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/x509_truststore_config'
          description: Config
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve truststore configuration
      tags:
      - Trusted Authorities
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: truststore_read
    put:
      description: '## Description

        This endpoint can be used to store configuration of X.509 truststore

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/x509_truststore_config'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/x509_truststore_config'
          description: Truststore configuration successfully updated.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set truststore config
      tags:
      - Trusted Authorities
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: truststore_write
  /network/x509/truststore/{fingerprint}:
    delete:
      description: '## Description

        This endpoint can be used to remove specific X.509 certificate

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of certificate (SHA-1 fingerprint)
        in: path
        name: fingerprint
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successfully removed certificate
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          description: Certificate does not exists
      summary: Remove installed certificate
      tags:
      - Trusted Authorities
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: truststore_write
    get:
      description: '## Description

        This endpoint can be used to retrieve details of X.509 certificate

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of certificate (SHA-1 fingerprint)
        in: path
        name: fingerprint
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/x509_certificate'
          description: Detailed information about certificate of interest
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          description: Certificate does not exists
      summary: Retrieve details from certificate
      tags:
      - Trusted Authorities
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: truststore_read
  /privacy/mode:
    delete:
      description: '## Description

        Used to retrieve privacy mode.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Successfully reset privacy mode
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Reset privacy mode to factory-default
      tags:
      - Privacy
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: privacy_mode_reset
    get:
      description: '## Description

        Used to retrieve privacy mode.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privacy_mode'
          description: Level of privacy mode
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get current privacy mode
      tags:
      - Privacy
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: privacy_mode_read
    put:
      description: '## Description

        Used to change privacy mode.

        ## Notice

        To lower the pricacy mode level, SMK is required. Either with basic auth smk
        user or with smk in payload.

        Other users are only allowed to raise privacy mode.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/privacy_mode'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privacy_mode'
          description: Successfully set privacy-mode
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        451:
          $ref: '#/components/responses/451_legal_reasons'
      summary: Set privacy mode
      tags:
      - Privacy
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: privacy_mode_write
  /recordings:
    get:
      description: '## Description

        Get a list with all available recording files.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recordings_file'
          description: Array of all available recordings.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get a list with all recording files. (Only available in desktop application!)
      tags:
      - Recordings
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /recordings/directory:
    get:
      description: '## Description

        Get the active directory from which all recording files are provided.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recordings_directory'
          description: The active directory.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get the active directory. (Only available in desktop application!)
      tags:
      - Recordings
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      description: '## Description

        Set the active directory from which all recording files are provided.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/recordings_directory'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recordings_directory'
          description: The active directory.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Set the active directory. (Only available in desktop application!)
      tags:
      - Recordings
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /recordings/sequences:
    get:
      description: '## Description

        Get a list with all configured validation recording schedules.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sequences'
          description: Array of all available sequences.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get a list with all recorded sequences.
      tags:
      - Recordings
      x-generic-push: true
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /recordings/sequences/{id}:
    get:
      description: '## Description

        Get information of sequence with id = {id}.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the sequence.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sequence'
          description: Information of sequence  {id}.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        416:
          description: Requested id is out of range.
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get information of sequence with id = {id}.
      tags:
      - Recordings
      x-generic-push: true
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /recordings/sequences/{id}/data/live/logics:
    get:
      description: '## Description

        Get an image and related meta data from recording {id} at frame number {framenumber}.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the sequence.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Frame number of the frame.
        in: query
        name: framenumber
        required: true
        schema:
          format: uint32
          type: number
      - description: Serial number of sensor in Multisensor.
        in: query
        name: mac_address
        required: false
        schema:
          example: 00:00:00:00:00:00
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/live_logics_collection'
          description: Image of recording {id} at frame number {framenumber}.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        416:
          description: Requested id is out of range.
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get all logics containing the list with all configured counter elements
        belonging to it from recording {id} at frame number {framenumber}.
      tags:
      - Recordings
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /recordings/sequences/{id}/experimental/data/live/doors:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the sequence.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Frame number of the frame.
        in: query
        name: framenumber
        required: true
        schema:
          format: uint32
          type: number
      - description: Serial number of sensor in Multisensor.
        in: query
        name: mac_address
        required: false
        schema:
          example: 00:00:00:00:00:00
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/doors_status'
          description: Array of all door status of recording {id} at frame number
            {framenumber}.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        416:
          description: Requested id is out of range.
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get the doors status from recording {id} at frame number {framenumber}.
      tags:
      - Recordings
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /recordings/sequences/{id}/scene/geometries:
    get:
      description: '## Description

        Get an image and related meta data from recording {id} at frame number {framenumber}.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the sequence.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Frame number of the frame.
        in: query
        name: framenumber
        required: true
        schema:
          format: uint32
          type: number
      - description: Serial number of sensor in Multisensor.
        in: query
        name: mac_address
        required: false
        schema:
          example: 00:00:00:00:00:00
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scene_geometries'
          description: Image of recording {id} at frame number {framenumber}.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        416:
          description: Requested id is out of range.
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get the geometries from recording {id} at frame number {framenumber}.
      tags:
      - Recordings
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /recordings/sequences/{id}/scene/images/live.jpg:
    get:
      description: '## Description

        Get an image and related meta data from recording {id} at frame number {framenumber}.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the sequence.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Frame number of the frame.
        in: query
        name: framenumber
        required: true
        schema:
          format: uint32
          type: number
      - description: Serial number of sensor in Multisensor.
        in: query
        name: mac_address
        required: false
        schema:
          example: 00:00:00:00:00:00
          type: string
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: Image of recording {id} at frame number {framenumber}.
          headers:
            X-Image-Metadata:
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        416:
          description: Requested id is out of range.
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get an image and related meta data from recording {id} at frame number
        {framenumber}.
      tags:
      - Recordings
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /recordings/sequences/{id}/scene/images/live.tar:
    get:
      description: '## Description

        Get an image and related meta data from recording {id} at frame number {framenumber}.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the sequence.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Frame number of the frame.
        in: query
        name: framenumber
        required: true
        schema:
          format: uint32
          type: number
      - description: Serial number of sensor in Multisensor.
        in: query
        name: mac_address
        required: false
        schema:
          example: 00:00:00:00:00:00
          type: string
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            application/x-tar:
              schema:
                format: binary
                type: string
          description: Image of recording {id} at frame number {framenumber}.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        416:
          description: Requested id is out of range.
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get an image and related meta data from recording {id} at frame number
        {framenumber}.
      tags:
      - Recordings
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /recordings/sequences/{id}/scene/masks:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the sequence.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Frame number of the frame.
        in: query
        name: framenumber
        required: true
        schema:
          format: uint32
          type: number
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/all_scene_masks'
          description: List of all existing masks
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the scene masks from recording {id} at frame number {framenumber}.
      tags:
      - Recordings
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /recordings/sequences/{id}/statistics:
    get:
      description: '## Description

        Get statistics of sequence with id = {id}.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the sequence.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Restrict begin of the statistics.
        in: query
        name: frame_number_begin
        required: false
        schema:
          format: uint32
          type: number
      - description: Restrict end of the statistics.
        in: query
        name: frame_number_end
        required: false
        schema:
          format: uint32
          type: number
      - description: Determine resolution of the statistics.
        in: query
        name: number_of_bins
        required: false
        schema:
          format: uint32
          type: number
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sequence_statistics'
          description: Information of sequence  {id}.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        416:
          description: Requested id is out of range.
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get statistics of sequence with id = {id}.
      tags:
      - Recordings
      x-generic-push: true
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /recordings/sequences/{id}/view/images/live.jpg:
    get:
      description: '## Description

        Get an image and related meta data from recording {id} at frame number {framenumber}.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the sequence.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Frame number of the frame.
        in: query
        name: framenumber
        required: true
        schema:
          format: uint32
          type: number
      - description: Serial number of sensor in Multisensor.
        in: query
        name: mac_address
        required: false
        schema:
          example: 00:00:00:00:00:00
          type: string
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: Image of recording {id} at frame number {framenumber}.
          headers:
            X-Image-Metadata:
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        416:
          description: Requested id is out of range.
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get an image and related meta data from recording {id} at frame number
        {framenumber}.
      tags:
      - Recordings
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /recordings/sequences/{id}/view/images/live.tar:
    get:
      description: '## Description

        Get an image and related meta data from recording {id} at frame number {framenumber}.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the sequence.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Frame number of the frame.
        in: query
        name: framenumber
        required: true
        schema:
          format: uint32
          type: number
      - description: Serial number of sensor in Multisensor.
        in: query
        name: mac_address
        required: false
        schema:
          example: 00:00:00:00:00:00
          type: string
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            application/x-tar:
              schema:
                format: binary
                type: string
          description: Image of recording {id} at frame number {framenumber}.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        416:
          description: Requested id is out of range.
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get an image and related meta data from recording {id} at frame number
        {framenumber}.
      tags:
      - Recordings
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /recordings/sequences/{id}/view/masks:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the sequence.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Frame number of the frame.
        in: query
        name: framenumber
        required: true
        schema:
          format: uint32
          type: number
      - description: Serial number of sensor in Multisensor.
        in: query
        name: mac_address
        required: false
        schema:
          example: 00:00:00:00:00:00
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/all_view_masks'
          description: List of all existing view masks
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the view masks from recording {id} at frame number {framenumber}.
      tags:
      - Recordings
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /rf/bluetooth:
    delete:
      description: '## Description

        Reset the Bluetooth monitoring configuration to default.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              examples:
                Factory default:
                  value:
                    allowlist_enabled: false
                    denylist_enabled: false
                    enabled: false
              schema:
                $ref: '#/components/schemas/bluetooth_settings'
          description: Successfully reset Bluetooth monitoring configuration to factory
            default
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Reset Bluetooth monitoring configuration to factory default
      tags:
      - RF Monitoring
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: rf_write
    get:
      description: '## Description

        Get the current Bluetooth monitoring configuration.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bluetooth_settings'
          description: Current Bluetooth monitoring configuration.
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve current Bluetooth monitoring configuration
      tags:
      - RF Monitoring
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: rf_read
    put:
      description: '## Description

        Update the Bluetooth monitoring configuration by passing a config JSON document.
        All fields are optional, unspecified options are not updated.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bluetooth_settings'
        description: Bluetooth monitoring settings that needs to be updated
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bluetooth_settings'
          description: Bluetooth monitoring configuration to apply.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Replace or update existing Bluetooth monitoring configuration
      tags:
      - RF Monitoring
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: rf_write
  /rf/bluetooth/allowlist:
    delete:
      description: '## Description

        Delete the current Bluetooth allowlist.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Successfully deleted allowlist for Bluetooth devices
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Delete allowlist for Bluetooth devices
      tags:
      - RF Monitoring
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: rf_write
    get:
      description: '## Description

        Download the current Bluetooth allowlist.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            text/plain:
              schema:
                example: A1:ab:23:c1:45:ef, AB:45:67:CD:89:EF, b9407f30-f5f8-466e-aff9-25556b57fe6d-7c46-feaf,
                  ...
                type: string
          description: Current allowlist for Bluetooth devices.
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Download current allowlist for Bluetooth devices
      tags:
      - RF Monitoring
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: rf_read
    put:
      description: '## Description

        Upload a new Bluetooth allowlist file, overwrites the current one.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          text/plain:
            schema:
              example: A1:ab:23:c1:45:ef, AB:45:67:CD:89:EF; b9407f30-f5f8-466e-aff9-25556b57fe6d-7c46-feaf,
                ...
              type: string
        description: Current Bluetooth allowlist
      responses:
        200:
          description: Successfully updated allowlist for Bluetooth devices
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set or overwrite allowlist for Bluetooth devices
      tags:
      - RF Monitoring
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: rf_write
  /rf/bluetooth/denylist:
    delete:
      description: '## Description

        Delete the current Bluetooth denylist.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Successfully deleted denylist for Bluetooth devices
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Delete denylist for Bluetooth devices
      tags:
      - RF Monitoring
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: rf_write
    get:
      description: '## Description

        Download the current Bluetooth denylist.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            text/plain:
              schema:
                example: A1:ab:23:c1:45:ef, AB:45:67:CD:89:EF, b9407f30-f5f8-466e-aff9-25556b57fe6d-7c46-feaf,
                  ...
                type: string
          description: Current denylist for Bluetooth devices.
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Download current denylist for Bluetooth devices
      tags:
      - RF Monitoring
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: rf_read
    put:
      description: '## Description

        Upload a new Bluetooth denylist file, overwrites the current one.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          text/plain:
            schema:
              example: A1:ab:23:c1:45:ef, AB:45:67:CD:89:EF; b9407f30-f5f8-466e-aff9-25556b57fe6d-7c46-feaf,
                ...
              type: string
        description: Current Bluetooth denylist
      responses:
        200:
          description: Successfully updated denylist for Bluetooth devices
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set or overwrite denylist for Bluetooth devices
      tags:
      - RF Monitoring
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: rf_write
  /rf/privacy:
    delete:
      description: '## Description

        Reset the privacy configuration to default.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privacy_settings'
          description: Current privacy configuration.
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Reset privacy configuration to factory default
      tags:
      - RF Monitoring
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: rf_read
    get:
      description: '## Description

        Get the current privacy configuration.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privacy_settings'
          description: Current privacy configuration.
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve current privacy configuration
      tags:
      - RF Monitoring
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: rf_read
    put:
      description: '## Description

        Update the privacy configuration by passing a config JSON document. All fields
        are optional, unspecified options are not updated.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/privacy_settings'
        description: Privacy configuration to apply.
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privacy_settings'
          description: Successfully updated privacy configuration
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Replace or update existing privacy configuration
      tags:
      - RF Monitoring
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: rf_read
  /rf/privacy/reset:
    post:
      description: '## Description

        Update the privacy configuration by passing a config JSON document. All fields
        are optional, unspecified options are not updated.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/privacy_settings'
        description: Privacy configuration to apply.
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privacy_settings'
          description: Successfully updated privacy configuration
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Replace or update existing privacy configuration
      tags:
      - RF Monitoring
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: rf_read
  /rf/privacy/salt:
    delete:
      description: '## Description

        Reset the salt. A random salt will be generated.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privacy_salt_settings'
          description: Current privacy configuration.
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Reset salt, a new random salt will be generated
      tags:
      - RF Monitoring
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: rf_privacy_salt_write
    get:
      description: '## Description

        Retrieve the current salt used for MAC hashing.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privacy_salt_settings'
          description: Current privacy configuration.
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve current salt
      tags:
      - RF Monitoring
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: rf_privacy_salt_read
    put:
      description: '## Description

        Update the salt.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/privacy_salt_settings'
        description: Privacy configuration to apply.
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privacy_salt_settings'
          description: Current privacy configuration.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Replace current salt
      tags:
      - RF Monitoring
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: rf_privacy_salt_write
  /rf/privacy/salt/reset:
    post:
      description: '## Description

        Update the salt.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/privacy_salt_settings'
        description: Privacy configuration to apply.
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privacy_salt_settings'
          description: Current privacy configuration.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Replace current salt
      tags:
      - RF Monitoring
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: rf_privacy_salt_write
  /rf/wifi:
    delete:
      description: '## Description

        Reset the WiFi monitoring configuration to default.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              examples:
                Factory default:
                  value:
                    allowlist_enabled: false
                    channel_dwell_ms: 100
                    channels:
                    - 1
                    - 2
                    - 3
                    - 4
                    - 5
                    - 6
                    - 7
                    - 8
                    - 9
                    - 10
                    - 11
                    - 12
                    - 13
                    denylist_enabled: false
                    enabled: false
              schema:
                $ref: '#/components/schemas/wifi_settings'
          description: Successfully reset WiFi monitoring configuration to factory
            default
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Reset WiFi monitoring configuration to factory default
      tags:
      - RF Monitoring
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: rf_write
    get:
      description: '## Description

        Get the current WiFi monitoring configuration.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wifi_settings'
          description: Current WiFi monitoring configuration.
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve current WiFi monitoring configuration
      tags:
      - RF Monitoring
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: rf_read
    put:
      description: '## Description

        Update the WiFi monitoring configuration by passing a config JSON document.
        All fields are optional, unspecified options are not updated.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/wifi_settings'
        description: WiFi monitoring configuration to apply.
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wifi_settings'
          description: Successfully updated WiFi monitoring configuration
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Replace or update existing WiFi monitoring configuration
      tags:
      - RF Monitoring
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: rf_write
  /rf/wifi/allowlist:
    delete:
      description: '## Description

        Delete the current WiFi allowlist.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Successfully deleted allowlist for WiFi devices
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Delete allowlist for WiFi devices
      tags:
      - RF Monitoring
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: rf_write
    get:
      description: '## Description

        Download the current WiFi allowlist.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            text/plain:
              schema:
                example: A1:ab:23:c1:45:ef, AB:45:67:CD:89:EF, A8:76:BD:56:E5:F8,
                  ...
                type: string
          description: Current allowlist for WiFi devices.
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Download current allowlist for WiFi devices
      tags:
      - RF Monitoring
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: rf_read
    put:
      description: '## Description

        Upload a new WiFi allowlist file, overwrites the current one.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          text/plain:
            schema:
              example: A1:ab:23:c1:45:ef, AB:45:67:CD:89:EF, A8:76:BD:56:E5:F8, ...
              type: string
        description: Current WiFi allowlist
      responses:
        200:
          description: Successfully updated allowlist for WiFi devices
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set or overwrite allowlist for WiFi devices
      tags:
      - RF Monitoring
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: rf_write
  /rf/wifi/denylist:
    delete:
      description: '## Description

        Delete the current WiFi denylist.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Successfully deleted denylist for WiFi devices
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Delete denylist for WiFi devices
      tags:
      - RF Monitoring
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: rf_write
    get:
      description: '## Description

        Download the current WiFi denylist.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            text/plain:
              schema:
                example: A1:ab:23:c1:45:ef, AB:45:67:CD:89:EF, A8:76:BD:56:E5:F8,
                  ...
                type: string
          description: Current denylist for WiFi devices.
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Download current denylist for WiFi devices
      tags:
      - RF Monitoring
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: rf_write
    put:
      description: '## Description

        Upload a new WiFi denylist file, overwrites the current one.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          text/plain:
            schema:
              example: A1:ab:23:c1:45:ef, AB:45:67:CD:89:EF, A8:76:BD:56:E5:F8, ...
              type: string
        description: Current WiFi denylist
      responses:
        200:
          description: Successfully updated denylist for WiFi devices
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set or overwrite denylist for WiFi devices
      tags:
      - RF Monitoring
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: rf_write
  /sandbox:
    delete:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Successfully deleted
        400:
          description: Something went wrong, see user log
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Delete sandbox image
      tags:
      - Sandbox
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: sandbox_write
  /sandbox/bootlog:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            text/plain:
              schema:
                type: string
          description: Ok
        400:
          description: No boot log (yet)
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get last boot log
      tags:
      - Sandbox
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: sandbox_read
  /sandbox/kill:
    post:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Successfully killed
        400:
          description: Something went wrong, see user log
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Kill running sandbox
      tags:
      - Sandbox
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: sandbox_write
  /sandbox/revproxy_register:
    post:
      description: This settings made with this API are only valid until the device
        is rebooted and must be registered again after each reboot. The same external
        URL may be registered multiple times and overwrites the previous setting.
        Only external URL starting with /sandbox are allowed!
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sandbox_url_registration'
        description: General device configuration to be updated
      responses:
        200:
          description: Successfully registered
        400:
          description: Something went wrong, see user log
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Register an internal http server / url to the global reverse proxy
      tags:
      - Sandbox
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: sandbox_write
  /sandbox/start:
    post:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Successfully started
        400:
          description: Something went wrong, see user log
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Start sandbox
      tags:
      - Sandbox
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: sandbox_write
  /sandbox/status:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sandbox_status'
          description: Ok
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get status of sandbox
      tags:
      - Sandbox
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: sandbox_read
  /sandbox/stop:
    post:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Successfully stopped
        400:
          description: Something went wrong, see user log
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Stop/shutdown sandbox
      tags:
      - Sandbox
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: sandbox_write
  /sandbox/upload:
    post:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/gzip:
            schema:
              format: binary
              type: string
      responses:
        200:
          description: Ok, upload successful
        400:
          description: Something is wrong with the uploaded file or with the installation,
            see user log
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Upload sandbox .tar.gz image
      tags:
      - Sandbox
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: sandbox_write
  /singlesensor/analysis/counters:
    delete:
      operationId: singlesensorAnalysisCountersDelete
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Force deleting the counters. All modifiers are deleted.
        example: true
        in: query
        name: force
        required: false
        schema:
          type: string
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Deletes all existing counters
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      operationId: singlesensorAnalysisCountersGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Restrict to counters of a logic.
        in: query
        name: logic_id
        required: false
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/counter_collection'
          description: all counters
      summary: Gets all counters
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      operationId: singlesensorAnalysisCountersPost
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/counter'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_counter'
          description: Counter successfully added
        400:
          description: Invalid request received, e.g. malformed
        401:
          $ref: '#/components/responses/401_unauthorized'
      summary: Adds new counter
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/analysis/counters/reset:
    post:
      operationId: singlesensorAnalysisCountersResetPost
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Reset was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        404:
          description: counter not found
      summary: Trigger a reset of all counters
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/analysis/counters/{id}:
    delete:
      operationId: singlesensorAnalysisCountersIdDelete
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of counter
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: Force deleting the counter. All dependent modifiers are deleted.
        example: true
        in: query
        name: force
        required: false
        schema:
          type: string
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Delete counter
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      operationId: singlesensorAnalysisCountersIdGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of counter
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_counter'
          description: Existing counter with identifier {id}
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get counter
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      operationId: singlesensorAnalysisCountersIdPut
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of counter
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/indexed_counter'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_counter'
          description: Updated counter with identifier {id}
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Change counter
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/analysis/counters/{id}/reset:
    post:
      operationId: singlesensorAnalysisCountersIdResetPost
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of counter
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          description: Reset was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Trigger a reset of the counter
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/analysis/logics:
    delete:
      operationId: singlesensorAnalysisLogicsDelete
      parameters:
      - description: Force deleting all logics. All modifiers and counters are deleted.
        example: 'true'
        in: query
        name: force
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Deletes all existing logics
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      operationId: singlesensorAnalysisLogicGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logic_collection'
          description: all logics
      summary: Gets all logics
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      operationId: singlesensorAnalysisLogicPost
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/logic'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_logic'
          description: Logic successfully added
        400:
          description: Invalid request received, e.g. malformed
        401:
          $ref: '#/components/responses/401_unauthorized'
      summary: Adds new logics
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/analysis/logics/templates:
    delete:
      operationId: singlesensorAnalysisLogicTemplateDelete
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Deletes all existing logic templates
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      operationId: singlesensorAnalysisLogicTemplateGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logic_template_collection'
          description: all logic templates
      summary: Gets all logic templates
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      operationId: singlesensorAnalysisLogicTemplatePost
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/logic_template'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_logic_template'
          description: Logic successfully added
        400:
          description: Invalid request received, e.g. malformed
        401:
          $ref: '#/components/responses/401_unauthorized'
      summary: Adds new logic template
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/analysis/logics/templates/{id}:
    delete:
      operationId: singlesensorAnalysisLogicsTemplateIdDelete
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of logic template
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Delete logic template with given identifier
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      operationId: singlesensorAnalysisLogicsTemplateIdGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of logic template
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_logic_template'
          description: Existing logic template with identifier {id}
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get logic template with given identifier
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      operationId: singlesensorAnalysisLogicsTemplateIdPut
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of logic template
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/indexed_logic_template'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_logic_template'
          description: Updated modifier with identifier {id}
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Change logic template with given identifier
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/analysis/logics/{id}:
    delete:
      operationId: singlesensorAnalysisLogicIdDelete
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of logic
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: Force deleting the logic. All dependent modifiers and counters
          are deleted.
        example: 'true'
        in: query
        name: force
        required: false
        schema:
          type: string
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Delete specific logic
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      operationId: singlesensorAnalysisLogicIdGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of logic
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_logic'
          description: Existing logic with identifier {id}
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get logic
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      operationId: singlesensorAnalysisLogicIdPut
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of logic
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/indexed_logic'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_logic'
          description: Updated logic with identifier {id}
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Change logic
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/analysis/logics/{id}/reset:
    post:
      operationId: singlesensorAnalysisLogicsIdResetPost
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of logic
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          description: Reset was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Trigger a reset of all counters belonging to this logic
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/analysis/modifiers:
    delete:
      operationId: singlesensorAnalysisModifiersDelete
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Deletes all existing modifiers
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      operationId: singlesensorAnalysisModifiersGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Restrict to modifiers of a logic.
        in: query
        name: logic_id
        required: false
        schema:
          format: int64
          type: integer
      - description: Restrict to modifiers for a counter.
        in: query
        name: counter_id
        required: false
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/modifier_collection'
          description: all modifiers
      summary: Gets all modifiers
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      operationId: singlesensorAnalysisModifiersPost
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/modifier'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_modifier'
          description: Modifier successfully added
        400:
          description: Invalid request received, e.g. malformed
        401:
          $ref: '#/components/responses/401_unauthorized'
      summary: Adds new modifier
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/analysis/modifiers/{id}:
    delete:
      operationId: singlesensorAnalysisModifiersIdDelete
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of modifier
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Delete modifier
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      operationId: singlesensorAnalysisModifiersIdGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of modifier
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_modifier'
          description: Existing modifier with identifier {id}
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get modifier
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      operationId: singlesensorAnalysisModifiersIdPut
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of modifier
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/indexed_modifier'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_modifier'
          description: Updated modifier with identifier {id}
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Change modifier
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/analysis/transaction:
    post:
      description: Perform several requests as one transaction. Use negative integers
        as placeholders for new ids.
      operationId: singlesensorAnalysisTransactionPost
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transaction'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction'
          description: Transaction successfully applied
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
      summary: Perform several requests as one transaction
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/blocked_space:
    delete:
      operationId: singlesensorBlockedSpaceDelete
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Deletes all observed spaces
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      operationId: singlesensorBlockedSpaceGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/all_blocked_spaces'
          description: List of all existing zones
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Gets all observed spaces
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      operationId: singlesensorBlockedSpacePost
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/blocked_space'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_blocked_space'
          description: Successfully created
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Adds a new space to be observed, returns id of the created space
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/blocked_space/images/background.jpg:
    get:
      operationId: singlesensorBlockedSpaceBackgroundJpgGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: Background view image with indicated blocked space.
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requesting the background view image with indicated blocked space
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_1
      x-privilege: application_read
  /singlesensor/blocked_space/images/data.jpg:
    get:
      operationId: singlesensorBlockedSpaceDataJpgGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: Image with indicated blocked space.
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requesting an image with indicated blocked space
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_2
      x-privilege: application_read
  /singlesensor/blocked_space/images/data.png:
    get:
      operationId: singlesensorBlockedSpaceDataPngGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            image/png:
              schema:
                format: binary
                type: string
          description: Image with indicated blocked space.
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requesting an image with indicated blocked space
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_2
      x-privilege: application_read
  /singlesensor/blocked_space/images/live.jpg:
    get:
      operationId: singlesensorBlockedSpaceLiveJpgGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: Live view image with indicated blocked space.
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requesting the live view image with indicated blocked space
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /singlesensor/blocked_space/images/metadata.jpg:
    get:
      operationId: singlesensorBlockedSpaceMetadataJpgGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: Image metadata with white image.
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requesting the image metadata only.
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_3
      x-privilege: application_read
  /singlesensor/blocked_space/images/metadata.png:
    get:
      operationId: singlesensorBlockedSpaceMetadataPngGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            image/png:
              schema:
                format: binary
                type: string
          description: Image metadata with white image.
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requesting the image metadata only.
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_3
      x-privilege: application_read
  /singlesensor/blocked_space/{id}:
    delete:
      operationId: singlesensorBlockedSpaceIdDelete
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the space
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          description: Space not found
      summary: Deletes existing space
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      operationId: singlesensorBlockedSpaceIdGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the space
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_blocked_space'
          description: An existing space
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Gets an existing space
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    patch:
      operationId: singlesensorBlockedSpaceIdPatch
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the space
        in: path
        name: id
        required: true
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/blocked_space'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_blocked_space'
          description: Modification was successul
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Modifies existing space
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    put:
      operationId: singlesensorBlockedSpaceIdPut
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the space
        in: path
        name: id
        required: true
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/blocked_space'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_blocked_space'
          description: Modification was successul
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Modifies existing space
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/data/history/heat_map:
    delete:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Reset was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Reset heat map.
      tags:
      - Singlesensor History Data
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Include/exclude data in response (default = true)
        example: false
        in: query
        name: data
        required: false
        schema:
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/heat_height_map'
          description: The heat map
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Requesting the heat map.
      tags:
      - Singlesensor History Data
      x-privacy-mode: LEVEL_2
      x-privilege: application_read
  /singlesensor/data/history/height_map:
    delete:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Reset was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Reset height map.
      tags:
      - Singlesensor History Data
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Include/exclude data in response (default = true)
        example: false
        in: query
        name: data
        required: false
        schema:
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/heat_height_map'
          description: The height map
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Requesting the height map.
      tags:
      - Singlesensor History Data
      x-privacy-mode: LEVEL_2
      x-privilege: application_read
  /singlesensor/data/history/logics:
    get:
      description: "## Description\nGet a JSON document with a list of measurements\
        \ (bin) and contained counter values for a \ndefined time range (begin/end)\
        \ and with a defined resolution. The resolution defines the \ntime slices\
        \ for which the counter values are either calculated (diff) or sampled (balance\
        \ \ncounters like occupancy).\n"
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Begin of time interval - ms since epoch in UTC, 0 (begin of data)
          or neg. value (relative to now in ms).
        examples:
          absolute:
            summary: absolute time in ms since epoche in UTC (Tue Jul 20 2022 14:00:00)
            value: 1658318400000
          begin:
            summary: use begin of available data
            value: 0
          relative:
            summary: 7 days ago (now - 7days in ms)
            value: -604800000
        in: query
        name: begin
        required: false
        schema:
          default: -86400000
          type: integer
      - description: End of time interval - ms since epoch in UTC, 0 (now) or neg.
          value (relative to now in ms).
        examples:
          absolute:
            summary: absolute time in ms since epoche in UTC (Tue Jul 26 2022 15:00:00)
            value: 1658840400000
          begin:
            summary: use now resp. newest available data
            value: 0
          relative:
            summary: one hour ago (now - 1h in ms)
            value: -3600000
        in: query
        name: end
        required: false
        schema:
          default: 0
          type: integer
      - description: Resolution in minutes of the resulting data (0 = AUTO resp. calculated
          from number_of_bins and time_range)
        example: 60
        in: query
        name: resolution_min
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: Defines the number of time slices (bins) for the given time range
          (used for calculating resolution_min)
        example: 500
        in: query
        name: number_of_bins
        required: false
        schema:
          default: 0
          maximum: 50000
          minimum: 0
          type: integer
      - description: Set to true if the full time range shall be filled up with empty
          bins if data is missing
        example: true
        in: query
        name: include_empty
        required: false
        schema:
          default: false
          type: boolean
      - description: Enable / disable JSON pretty print.
        example: true
        in: query
        name: pretty
        required: false
        schema:
          default: false
          type: boolean
      - description: Select the time format used in the serialized data
        example: RFC3339
        in: query
        name: time_format
        required: false
        schema:
          default: UNIX_TIME_MS
          enum:
          - UNIX_TIME_MS
          - UNIX_TIME_S
          - RFC3339
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/history_logics'
          description: JSON document with all available history data
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the persisted logics data (historical count values)
      tags:
      - Singlesensor History Data
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /singlesensor/data/history/logics/{id}:
    get:
      description: "## Description\nSame as for /singlesensor/data/history/logics\
        \ but filtered for the given logic.\nCount and meta data will only contain\
        \ data for the selected logic and dependent elements.    \n"
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: id of the logic for filtering
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: Begin of time interval - ms since epoch in UTC, 0 (begin of data)
          or neg. value (relative to now in ms).
        examples:
          absolute:
            summary: absolute time in ms since epoche in UTC (Tue Jul 20 2022 14:00:00)
            value: 1658318400000
          begin:
            summary: use begin of available data
            value: 0
          relative:
            summary: 7 days ago (now - 7days in ms)
            value: -604800000
        in: query
        name: begin
        required: false
        schema:
          default: -86400000
          type: integer
      - description: End of time interval - ms since epoch in UTC, 0 (now) or neg.
          value (relative to now in ms).
        examples:
          absolute:
            summary: absolute time in ms since epoche in UTC (Tue Jul 26 2022 15:00:00)
            value: 1658840400000
          begin:
            summary: use now resp. newest available data
            value: 0
          relative:
            summary: one hour ago (now - 1h in ms)
            value: -3600000
        in: query
        name: end
        required: false
        schema:
          default: 0
          type: integer
      - description: Resolution in minutes of the resulting data (0 = AUTO resp. calculated
          from number_of_bins and time_range)
        example: 60
        in: query
        name: resolution_min
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: Defines the number of time slices (bins) for the given time range
          (used for calculating resolution_min)
        example: 500
        in: query
        name: number_of_bins
        required: false
        schema:
          default: 0
          maximum: 50000
          minimum: 0
          type: integer
      - description: Set to true if the full time range shall be filled up with empty
          bins if data is missing
        example: true
        in: query
        name: include_empty
        required: false
        schema:
          default: false
          type: boolean
      - description: Enable / disable JSON pretty print.
        example: true
        in: query
        name: pretty
        required: false
        schema:
          default: false
          type: boolean
      - description: Select the time format used in the serialized data
        example: RFC3339
        in: query
        name: time_format
        required: false
        schema:
          default: UNIX_TIME_MS
          enum:
          - UNIX_TIME_MS
          - UNIX_TIME_S
          - RFC3339
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/history_logics'
          description: JSON document with all available history data for the given
            logic
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the persisted logics data filtered for a single
      tags:
      - Singlesensor History Data
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /singlesensor/data/history/sensor_db:
    delete:
      description: "## Description\nDelete all count records and count offsets (resets)\
        \ in the sensor_db.\nAll outputs for logic data will be reset accordingly\
        \ (live count api, logics, push, legacy count push's etc.)\n\n__ATTENTION:__\
        \ This is irreversible, use with caution! Before performing consider to do\
        \ a full sensor_db backup by downloading sensor_db.tar (/singlesensor/data/history/sensor_db.tar)\
        \ \n"
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
      summary: Delete the sensor db (all persisted count data) and reset all logic
        outputs
      tags:
      - Singlesensor History Data
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/data/history/sensor_db.tar:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/x-tar:
              schema:
                format: binary
                type: string
          description: The sensor db tarball
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Download sensor db tarball containing the internal count record database
        and related data
      tags:
      - Singlesensor History Data
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /singlesensor/data/history/start_stop:
    delete:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Reset was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Reset start stop points.
      tags:
      - Singlesensor History Data
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      operationId: getStartStopPoints
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Begin of time interval (milliseconds since epoch in UTC).
        example: 1612867890
        in: query
        name: begin
        required: false
        schema:
          type: number
      - description: End of time interval (milliseconds since epoch in UTC).
        example: 1612867990
        in: query
        name: end
        required: false
        schema:
          type: number
      - description: Max number of points.
        example: 100
        in: query
        name: max
        required: false
        schema:
          type: number
      - description: Include/exclude points in response (default = true)
        example: false
        in: query
        name: points
        required: false
        schema:
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/start_stop'
          description: The start stop points
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Requests the start stop points
      tags:
      - Singlesensor History Data
      x-privacy-mode: LEVEL_2
      x-privilege: application_read
  /singlesensor/data/history/start_stop.jpg:
    get:
      operationId: getStartStopPointsJpg
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Begin of time interval (milliseconds since epoch in UTC).
        example: 1612867890
        in: query
        name: begin
        required: false
        schema:
          type: number
      - description: End of time interval (milliseconds since epoch in UTC).
        example: 1612867990
        in: query
        name: end
        required: false
        schema:
          type: number
      - description: Max number of points.
        example: 100
        in: query
        name: max
        required: false
        schema:
          type: number
      - description: Include/exclude points in response (default = true)
        example: false
        in: query
        name: points
        required: false
        schema:
          type: boolean
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: Image with the start stop points
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests an image with the start stop points
      tags:
      - Singlesensor History Data
      x-privacy-mode: LEVEL_2
      x-privilege: application_read
  /singlesensor/data/history/status:
    get:
      description: "## Description\nGet a JSON document with information about the\
        \ data storage (memory, retention times, time ranges, etc.) and persisted\
        \ data \nin it (count_records, count_offsets for reset etc.)\n"
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              examples:
                history_status:
                  $ref: '#/components/examples/history_status'
              schema:
                $ref: '#/components/schemas/history_status'
          description: JSON document with all available history data
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get status information about persisted data and data storage in general
      tags:
      - Singlesensor History Data
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /singlesensor/data/live/counts:
    get:
      description: '## Description

        Get a list with all configured counter elements with their actual (live) count
        value since the last reset.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/live_count_collection'
          description: Array of all connection configurations
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get a list with all configured counter elements with their actual (live)
        count value since the last reset.
      tags:
      - Singlesensor Live Data
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /singlesensor/data/live/counts/reset:
    post:
      description: '## Description

        Resets the (relative) value for all counters to 0

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Sucessfully reset all counters
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Resets the (relative) value for all counters to 0
      tags:
      - Singlesensor Live Data
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/data/live/counts/{id}:
    get:
      description: '## Description

        Get the count value since the last reset for the counter defined by {id}.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the counter
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/live_count_specific'
          description: Array of all connection configurations
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get the count value since the last reset for the counter defined by
        {id}.
      tags:
      - Singlesensor Live Data
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /singlesensor/data/live/counts/{id}/reset:
    post:
      description: '## Description

        Reset the (relative) value for the counter defined by {id} to 0

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the counter
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          description: Sucessfully reset the counter with the given id
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Reset the (relative) value for the counter defined by {id} to 0
      tags:
      - Singlesensor Live Data
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/data/live/logics:
    get:
      description: '## Description

        Get all logics containing the list with all configured counter elements belonging
        to it. The counter values are the actual (live) count value since the last
        reset.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/live_logics_collection'
          description: Array of all connection configurations
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get all logics containing the list with all configured counter elements
        belonging to it.
      tags:
      - Singlesensor Live Data
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /singlesensor/data/live/logics/{id}:
    get:
      description: '## Description

        Get the logic defined by {id} with all configured counter elements belonging
        to it. The counter values are the actual (live) count value since the last
        reset.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the counter
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/live_logics_specific'
          description: Array of all connection configurations
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get the logic defined by {id} with all configured counter elements
        belonging to it.
      tags:
      - Singlesensor Live Data
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /singlesensor/data/live/logics/{id}/reset:
    post:
      description: '## Description

        Reset the (relative) value to 0 for all counters belonging to the logic defined
        by {id}

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the counter
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          description: Sucessfully reset the logic with the given id
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Reset the (relative) value to 0 for all counters belonging to the logic
        defined by {id}.
      tags:
      - Singlesensor Live Data
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/data/push/agents:
    delete:
      description: '## Description

        Delete all configured agents.


        __ATTENTION:__ This can''t be undone and will reset any stored or cached push
        information (e.g. last successfully pushed data etc.).

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: "## Description\nAgents which are declared volatile will not\
          \ be persisted and therefore not survive\na reboot or service restart. They\
          \ can be used e.g. for push's to a remote connection which\nis always configured\
          \ when the remote service is starting up or the sensor is initially \nconnected\
          \ to it.\n### Meaning\n* false (default): delete all regular (non volatile)\
          \ data push agents\n* true: delete all volatile data push agents\n"
        in: query
        name: volatile
        required: false
        schema:
          default: false
          type: boolean
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Delete all configured agents
      tags:
      - Singlesensor Data Push
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      description: '## Description

        Get a list of all agents with their configs (array of agent config JSON documents)

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: "## Description\nAgents which are declared volatile will not\
          \ be persisted and therefore not survive\na reboot or service restart. They\
          \ can be used e.g. for push's to a remote connection which\nis always configured\
          \ when the remote service is starting up or the sensor is initially \nconnected\
          \ to it.\n### Values\n* false (default): return the list of regular (non\
          \ volatile) data push agents\n* true: return the list of volatile data push\
          \ agents\n"
        in: query
        name: volatile
        required: false
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/agent_config_collection'
          description: Array of all agent configurations
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get all agent configs
      tags:
      - Singlesensor Data Push
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      description: "## Description\nCreate a new data push agent (by passing its config)\n\
        \n## Id generation\nFor regular usage the id is not included in the JSON document\
        \ (and ignored if it is). \nThe response will then contain the full configuration\
        \ and the automatically created id.\nThe behavior of the id creation can be\
        \ adapted with the query parameter id_mode (details see below)\n"
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: '## Description

          Defines the id generation mode if given (automatic on server side (default)
          or user defined from client side).

          ### Modes

          SERVER (default) => an id element in the JSON request body will be ignored
          and the new created id will be returned in the response body

          CLIENT => the id element in the request body will be used for the new agent,
          if id exists the request will fail with response ''409 Conflict''.

          CLIENT_FORCE => same as CLIENT but forcefully overwrite existing agents
          with the given id

          '
        in: query
        name: id_mode
        required: false
        schema:
          default: SERVER
          enum:
          - SERVER
          - CLIENT
          - CLIENT_FORCE
          type: string
      - description: "## Description\nAgents which are declared volatile will not\
          \ be persisted and therefore not survive\na reboot or service restart. They\
          \ can be used e.g. for push's to a remote connection which\nis always configured\
          \ when the remote service is starting up or the sensor is initially \nconnected\
          \ to it.\nThe volatile agents will get id's in a different range than regular\n\
          ones if id_mode=SERVER (default) is used (starting at 100'000).\n### Values\n\
          * false (default): create a new regular (non volatile) agent\n* true: create\
          \ a new volatile agent\n"
        in: query
        name: volatile
        required: false
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            examples:
              live_data:
                $ref: '#/components/examples/agent_config_live_data'
              live_data_periodic:
                $ref: '#/components/examples/agent_config_live_data_periodic'
              logics:
                $ref: '#/components/examples/agent_config_logics'
              wifi_bluetooth:
                $ref: '#/components/examples/agent_config_wifi_bt'
            schema:
              $ref: '#/components/schemas/agent_config'
      responses:
        201:
          content:
            application/json:
              examples:
                live_data:
                  $ref: '#/components/examples/agent_config_live_data_response'
                live_data_periodic:
                  $ref: '#/components/examples/agent_config_live_data_periodic_response'
                logics:
                  $ref: '#/components/examples/agent_config_logics_response'
                wifi_bluetooth:
                  $ref: '#/components/examples/agent_config_wifi_bt_response'
              schema:
                $ref: '#/components/schemas/agent_config'
          description: Agent created, response body contains the fully qualified agent
            configuration (incl. id)
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        409:
          $ref: '#/components/responses/409_conflict'
      summary: Create a new data push agent
      tags:
      - Singlesensor Data Push
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/data/push/agents/status:
    get:
      description: '## Description

        Return an array of status information objects for all configured data pushs


        Each status contains information about last successful and last unsuccessful
        pushs (amount, timestamps, etc.)

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: "## Description\nAgents which are declared volatile will not\
          \ be persisted and therefore not survive\na reboot or service restart. They\
          \ can be used e.g. for push's to a remote connection which\nis always configured\
          \ when the remote service is starting up or the sensor is initially \nconnected\
          \ to it.\n### Meaning\n* false (default): get a list of push status information\
          \ for all regular (non volatile) data push agents\n* true: get a list of\
          \ push status information for all volatile data push agents\n"
        in: query
        name: volatile
        required: false
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              examples:
                data_push_status_list:
                  $ref: '#/components/examples/agent_status_all'
              schema:
                $ref: '#/components/schemas/agent_status_all'
          description: Response body is a JSON array containing a list of status information
            for all configured push's (agents)
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: get the status for all configured data pushs
      tags:
      - Singlesensor Data Push
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /singlesensor/data/push/agents/{id}:
    delete:
      description: '## Description

        Delete a single agent with the given {id}


        __ATTENTION:__ This can''t be undone and will reset any stored or cached push
        information (e.g. last successfully pushed data etc.).

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of agent
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Delete a single agent
      tags:
      - Singlesensor Data Push
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      description: '## Description

        Get the config of a single agent with the given {id}. If the agent with {id}
        does not exists, an error will be returned (404 not found).

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of agent
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              examples:
                live_data:
                  $ref: '#/components/examples/agent_config_live_data_response'
                live_data_periodic:
                  $ref: '#/components/examples/agent_config_live_data_periodic_response'
                logics:
                  $ref: '#/components/examples/agent_config_logics_response'
                wifi_bluetooth:
                  $ref: '#/components/examples/agent_config_wifi_bt_response'
              schema:
                $ref: '#/components/schemas/agent_config'
          description: existing agent configuration with id = {id}
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get the configuration of a single agent
      tags:
      - Singlesensor Data Push
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      description: '## Description

        Alter the config of a single agent with the given {id} by passing the new/changed
        config JSON document.


        _Note: id element is ignored if contained in JSON_

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of agent
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            examples:
              live_data:
                $ref: '#/components/examples/agent_config_live_data'
              live_data_periodic:
                $ref: '#/components/examples/agent_config_live_data_periodic'
              logics:
                $ref: '#/components/examples/agent_config_logics'
              wifi_bluetooth:
                $ref: '#/components/examples/agent_config_wifi_bt'
            schema:
              $ref: '#/components/schemas/agent_config'
      responses:
        200:
          content:
            application/json:
              examples:
                live_data:
                  $ref: '#/components/examples/agent_config_live_data_response'
                live_data_periodic:
                  $ref: '#/components/examples/agent_config_live_data_periodic_response'
                logics:
                  $ref: '#/components/examples/agent_config_logics_response'
                wifi_bluetooth:
                  $ref: '#/components/examples/agent_config_wifi_bt_response'
              schema:
                $ref: '#/components/schemas/agent_config'
          description: The fully qualified agent configuration (incl. id)
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: 'Alter the configuration of a single agent '
      tags:
      - Singlesensor Data Push
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/data/push/agents/{id}/status:
    get:
      description: '## Description

        Return status information for the data push defined by the given {id} (agent
        id)


        The status contains information about last successful and last unsuccessful
        pushs (amount, timestamps, etc.)

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the agent
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              examples:
                data_push_status:
                  $ref: '#/components/examples/agent_status'
              schema:
                $ref: '#/components/schemas/agent_status'
          description: Response body is a JSON array containing a status information
            object for the data push (agent) referenced by {id}
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: get the status for the data push defined by agent with {id}
      tags:
      - Singlesensor Data Push
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /singlesensor/data/push/agents/{id}/trigger:
    delete:
      description: '## Description

        Abort the last triggered data push if still running.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of agent
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          description: Abort was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: abort the last triggered data push if still running
      tags:
      - Singlesensor Data Push
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      description: '## Description

        Get the trigger push status of the agent {id}

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of agent
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              examples:
                Busy with time range push:
                  $ref: '#/components/examples/agent_trigger_status_busy'
                Idle:
                  $ref: '#/components/examples/agent_trigger_status_idle'
              schema:
                $ref: '#/components/schemas/agent_trigger_status'
          description: Response body is a JSON array containing the trigger status
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: get the trigger push status of the agent {id}
      tags:
      - Singlesensor Data Push
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      description: '## Description

        Trigger the data push defined by the given {id}.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of agent
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            examples:
              all:
                $ref: '#/components/examples/agent_trigger_all'
              last_package:
                $ref: '#/components/examples/agent_trigger_last_package'
              now:
                $ref: '#/components/examples/agent_trigger_now'
              time_range:
                $ref: '#/components/examples/agent_trigger_time_range'
            schema:
              $ref: '#/components/schemas/agent_trigger'
      responses:
        200:
          content:
            application/json:
              examples:
                time_range:
                  $ref: '#/components/examples/agent_trigger_time_range'
              schema:
                $ref: '#/components/schemas/agent_trigger_status'
          description: Response body is a JSON array containing received trigger configuration
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: trigger the data push defined by the given {id}
      tags:
      - Singlesensor Data Push
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/data/push/connections:
    delete:
      description: '## Description

        Delete all configured connections.


        __ATTENTION:__ This might delete connections which are in use by configured
        data push agents. If a connection is deleted, the corresponding agent will
        obviously stop sending data (but keeps collecting, caching and persisting
        data of course).

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: "## Description\nConnections which are declared volatile will\
          \ not be persisted and therefore not survive\na reboot or service restart.\
          \ They can be used e.g. for push's to a remote connection which\nis always\
          \ configured when the remote service is starting up or the sensor is initially\
          \ \nconnected to it.\n### Meaning\n* false (default): delete all regular\
          \ (non volatile) data push connections\n* true: delete all volatile data\
          \ push connections\n"
        in: query
        name: volatile
        required: false
        schema:
          default: false
          type: boolean
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Delete all configured connections
      tags:
      - Singlesensor Data Push
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      description: '## Description

        Get a list of all connections with their configs (array of connection config
        JSON documents)

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: "## Description\nConnections which are declared volatile will\
          \ not be persisted and therefore not survive\na reboot or service restart.\
          \ They can be used e.g. for push's to a remote connection which\nis always\
          \ configured when the remote service is starting up or the sensor is initially\
          \ \nconnected to it.\n### Values\n* false (default): return the list of\
          \ regular (non volatile) data push connections\n* true: return the list\
          \ of volatile data push connections\n"
        in: query
        name: volatile
        required: false
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connection_config_collection'
          description: Array of all connection configurations
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get all connection configs
      tags:
      - Singlesensor Data Push
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      description: "## Description\nCreate a new connection (by passing its config)\n\
        \n## Id generation\nFor regular usage the id is not included in the JSON document\
        \ (and ignored if it is). \nThe response will then contain the full configuration\
        \ and the automatically created id.\nThe behavior of the id creation can be\
        \ adapted with the query parameter id_mode (details see below)\n"
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: '## Description

          Defines the id generation mode if given (automatic on server side (default)
          or user defined from client side).

          ### Modes

          SERVER (default) => an id element in the JSON request body will be ignored
          and the new created id will be returned in the response body

          CLIENT => the id element in the request body will be used for the new connection,
          if id exists the request will fail with response ''409 Conflict''.

          CLIENT_FORCE => same as CLIENT but forcefully overwrite existing connections
          with the given id

          '
        in: query
        name: id_mode
        required: false
        schema:
          default: SERVER
          enum:
          - SERVER
          - CLIENT
          - CLIENT_FORCE
          type: string
      - description: "## Description\nConnections which are declared volatile will\
          \ not be persisted and therefore not survive\na reboot or service restart.\
          \ They can be used e.g. for push's to a remote connection which\nis always\
          \ configured when the remote service is starting up or the sensor is initially\
          \ \nconnected to it.\nThe volatile connections will get id's in a different\
          \ range than regular\nones if id_mode=SERVER (default) is used (starting\
          \ at 100'000).\n### Values\n* false (default): create a new regular (non\
          \ volatile) connection\n* true: create a new volatile connection\n"
        in: query
        name: volatile
        required: false
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            examples:
              ftp:
                $ref: '#/components/examples/connection_ftp'
              http:
                $ref: '#/components/examples/connection_http'
              sftp:
                $ref: '#/components/examples/connection_sftp'
            schema:
              $ref: '#/components/schemas/connection_config'
      responses:
        201:
          content:
            application/json:
              examples:
                ftp:
                  $ref: '#/components/examples/connection_ftp_response'
                http:
                  $ref: '#/components/examples/connection_http_response'
                sftp:
                  $ref: '#/components/examples/connection_sftp_response'
              schema:
                $ref: '#/components/schemas/connection_config'
          description: Connection created, response body contains the fully qualified
            connection configuration (incl. id)
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        409:
          $ref: '#/components/responses/409_conflict'
      summary: Create a new connection
      tags:
      - Singlesensor Data Push
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/data/push/connections/{id}:
    delete:
      description: '## Description

        Delete a single connection with the given {id}


        __ATTENTION:__ This might delete a connection which is in use by one or more
        configured data push agents. If a connection is deleted, the corresponding
        agent will obviously stop sending data (but keeps collecting, caching and
        persisting data of course).

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of connection
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Delete a single connection
      tags:
      - Singlesensor Data Push
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      description: '## Description

        Get the config of a single connection with the given {id}. If the connection
        with {id} does not exists, an error will be returned (404 not found).

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of connection
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              examples:
                ftp:
                  $ref: '#/components/examples/connection_ftp_response'
                http:
                  $ref: '#/components/examples/connection_http_response'
                sftp:
                  $ref: '#/components/examples/connection_sftp_response'
              schema:
                $ref: '#/components/schemas/connection_config'
          description: existing connection configuration with id = {id}
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get the configuration of a single connection
      tags:
      - Singlesensor Data Push
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      description: '## Description

        Alter the config of a single connection with the given {id} by passing the
        new/changed config JSON document.


        _Note: id element is ignored if contained in JSON_

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of connection
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            examples:
              ftp:
                $ref: '#/components/examples/connection_ftp'
              http:
                $ref: '#/components/examples/connection_http'
              sftp:
                $ref: '#/components/examples/connection_sftp'
            schema:
              $ref: '#/components/schemas/connection_config'
      responses:
        200:
          content:
            application/json:
              examples:
                ftp:
                  $ref: '#/components/examples/connection_ftp_response'
                http:
                  $ref: '#/components/examples/connection_http_response'
                sftp:
                  $ref: '#/components/examples/connection_sftp_response'
              schema:
                $ref: '#/components/schemas/connection_config'
          description: The fully qualified connection configuration (incl. id)
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: 'Alter the configuration of a single connection '
      tags:
      - Singlesensor Data Push
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/data/push/connections/{id}/test:
    post:
      description: "## Description\nTest the connection with the given {id}.\n\nThe\
        \ POST will trigger a connection test and send some dummy (JSON) data to the\
        \ configured server with the configured connection options. The connection\
        \ will be considered as OK, if the dummy data can be transmitted to the server\
        \ and the server responses with a non-error response code (for HTTP(S) that\
        \ would be a HTTP response code in the 200th range, for FTP e.g. 250\u2026\
        ).\n\nIf the connection is a file based connection (e.g. FTP) , the test will\
        \ create a file with the name \u201Cxsensor_connection_test.json\u201D on\
        \ the server and will fail if that is not possible (e.g. due to permission\
        \ issues or other restrictions).\n\nATTENTION - When calling this API, the\
        \ response  might be delayed if there are e.g. slow connections or delayed\
        \ server responses up to the configured connection and other timeouts.\n\n\
        The connection test will return a JSON container with detailed information\
        \ about the connection and transmit trial and the servers response (see examples).\n"
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the connection
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              examples:
                HTTP connection not ok - client error:
                  $ref: '#/components/examples/connection_test_response_nok1'
                HTTP connection ok:
                  $ref: '#/components/examples/connection_test_response_ok'
                No connection or no network:
                  $ref: '#/components/examples/connection_test_response_nok2'
              schema:
                $ref: '#/components/schemas/connection_test_response'
          description: JSON response struct with connection information
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: test the connection with the given {id}
      tags:
      - Singlesensor Data Push
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/data/push/legacy:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy_config_get'
          description: Legacy configuration
      summary: Get legacy conversion settings
      tags:
      - Singlesensor Data Push
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/legacy_config_put'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy_config_get'
          description: Modification was successul
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
      summary: Modifies legacy conversion settings
      tags:
      - Singlesensor Data Push
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/experimental/analysis/doors:
    delete:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Deletes all existing doors
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/doors'
          description: all doors
      summary: Get all doors
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/door'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_scene_geometry'
          description: Door added successfully
        400:
          description: Invalid request received, e.g. malformed
        401:
          $ref: '#/components/responses/401_unauthorized'
      summary: Adds new door
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/experimental/analysis/doors/{id}:
    delete:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of door
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Delete door
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of door
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_door'
          description: Existing door with identifier {id}
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get door
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of door
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/indexed_door'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_door'
          description: Updated door with identifier {id}
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Change door
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/experimental/data/live/doors:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/doors_status'
          description: Array of all door status
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      tags:
      - Singlesensor Live Data
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /singlesensor/experimental/data/live/doors/{id}:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the door
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/door_status'
          description: The door status
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      tags:
      - Singlesensor Live Data
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /singlesensor/experimental/settings/cropping:
    get:
      operationId: singlesensorSettingsCroppingGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cropping_get'
          description: Success.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Update the settings image.
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      operationId: singlesensorSettingsCroppingPost
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cropping_post'
          description: Success.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Update the settings image.
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    put:
      operationId: singlesensorSettingsCroppingPut
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cropping_put'
          description: Success.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Update the settings image.
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/experimental/settings/scene/image.jpg:
    get:
      operationId: getSettingsSceneImageJpg
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: The settings scene image with respect to view coordinates
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the current settings scene image
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /singlesensor/experimental/settings/scene/image/update:
    post:
      operationId: singlesensorSettingsSceneImageUpdate
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Success.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Update the settings scene image.
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/images/raw_left.jpg:
    get:
      operationId: singlesensorImagesRawLeftJpgGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: The raw left image
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requesting the raw left image of the current scene
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /singlesensor/images/raw_right.jpg:
    get:
      operationId: singlesensorImagesRawRightJpgGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: The raw right image
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requesting the raw right image of the current scene
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /singlesensor/images/stereo.png:
    get:
      operationId: singlesensorImagesStereoPngGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            image/png:
              schema:
                format: binary
                type: string
          description: The stereo image
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requesting the stereo image of the current scene
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /singlesensor/recordings:
    delete:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Successfully deleted
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Delete all recordings.
      tags:
      - Singlesensor Recording
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_write
    get:
      description: '## Description

        Get a list with all recordings.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recordings'
          description: Array of all recordings.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get a list with all recordings.
      tags:
      - Singlesensor Recording
      x-generic-push: true
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
    post:
      description: '## Description

        Schedule a new recording.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/recording_schedule'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_recording_schedule'
          description: New recording with id.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        417:
          description: 'Validation of schedule failed. The following requirements
            must be satisfied: end time after start time, start time not in the past'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Schedule a new recording (timestamps are in milliseconds).
      tags:
      - Singlesensor Recording
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_write
  /singlesensor/recordings/quota:
    get:
      description: '## Description

        Get the total and remaining memory quota in bytes.

        ## Required privileges

        Privilege | Description

        --------- | -----------

        `application_read` | Read access for singlesensor application data (config,
        live data, etc.)

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  remaining_quota:
                    example: 1000
                    format: uint32
                    type: number
                  total_quota:
                    example: 20971520
                    format: uint32
                    type: number
                type: object
          description: Memory quota info
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get info about memory quota.
      tags:
      - Singlesensor Recording
      x-generic-push: true
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /singlesensor/recordings/{id}:
    delete:
      description: '## Description

        Delete one specific recording defined by {id}.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the validation recording schedule
        in: path
        name: id
        required: true
        schema:
          format: uint64
          type: number
      responses:
        200:
          description: Successfully deleted
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Delete one specific recording defined by {id}.
      tags:
      - Singlesensor Recording
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_write
    get:
      description: '## Description

        Get a specific recording defined by {id}.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the recording.
        in: path
        name: id
        required: true
        schema:
          format: uint64
          type: number
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recording'
          description: The recording.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        404:
          $ref: '#/components/responses/404_id_not_found'
        416:
          description: Requested id is out of range.
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get a specific recording defined by {id}.
      tags:
      - Singlesensor Recording
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /singlesensor/recordings/{id}/download:
    get:
      description: '## Description

        Get a specific recording file defined by {id}.

        ## Required privileges

        Privilege | Description

        --------- | -----------

        `application_read` | Read access for singlesensor application data (config,
        live data, etc.)

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the validation recording file. This corresponds to the
          file_index contained in the response when send a get to /singlesensor/data/validation/files.
        in: path
        name: id
        required: true
        schema:
          format: uint64
          type: number
      responses:
        200:
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: A validation recording file (.xvr)
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        404:
          $ref: '#/components/responses/404_id_not_found'
        416:
          description: Requested id is out of range.
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Download a specific recording file defined by {id}.
      tags:
      - Singlesensor Recording
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /singlesensor/scene/geometries:
    delete:
      operationId: singlesensorSceneGeometriesDelete
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Deletes all existing geometries
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      operationId: singlesensorSceneGeometriesGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scene_geometries'
          description: all geometries
      summary: Gets all geometries
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      operationId: singlesensorSceneGeometriesPost
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/scene_geometry'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_scene_geometry'
          description: Geometry added successfully
        400:
          description: Invalid request received, e.g. malformed
        401:
          $ref: '#/components/responses/401_unauthorized'
      summary: Adds new geometry
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/scene/geometries/{id}:
    delete:
      operationId: singlesensorSceneGeometriesIdDelete
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of geometry
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Delete geometry
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      operationId: singlesensorSceneGeometriesIdGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of geometry
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_scene_geometry'
          description: Existing geometry with identifier {id}
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Get geometry
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      operationId: singlesensorSceneGeometriesIdPut
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of geometry
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/indexed_scene_geometry'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexed_scene_geometry'
          description: Updated geometry with identifier {id}
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Change geometry
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/scene/images/background.jpg:
    get:
      operationId: getSceneImagesBackgroundJpg
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: The background image and the tracked objects of the current
            scene
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requesting the background image and the tracked objects of the current
        scene
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_1
      x-privilege: application_read
  /singlesensor/scene/images/background.tar:
    get:
      operationId: getSceneImagesBackgroundTar
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            application/x-tar:
              schema:
                format: binary
                type: string
          description: The background image and the tracked objects of the current
            scene
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requesting the background image and the tracked objects of the current
        scene
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_1
      x-privilege: application_read
  /singlesensor/scene/images/data:
    get:
      operationId: getSceneImagesData
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
          description: The live data with tracked objects
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the tracked objects of the current scene
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: LEVEL_2
      x-privilege: application_read
  /singlesensor/scene/images/data.jpg:
    get:
      operationId: getSceneImagesDataJpg
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: The live data with tracked objects
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the tracked objects of the current scene with a white image
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_2
      x-privilege: application_read
  /singlesensor/scene/images/data.png:
    get:
      operationId: getSceneImagesDataPng
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            image/png:
              schema:
                format: binary
                type: string
          description: The live data with tracked objects
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the tracked objects of the current scene with a white image
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_2
      x-privilege: application_read
  /singlesensor/scene/images/live.jpg:
    get:
      operationId: getSceneImagesLiveJpg
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: The live image and tracked objects
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the live image and tracked objects of the current scene
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /singlesensor/scene/images/live.tar:
    get:
      operationId: getSceneImagesLiveTar
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            application/x-tar:
              schema:
                format: binary
                type: string
          description: The live image and tracked objects
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the live image and tracked objects of the current scene
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /singlesensor/scene/images/metadata:
    get:
      operationId: getSceneImagesMetadata
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
          description: The live data with tracked objects
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the image metadata of the current scene
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: LEVEL_3
      x-privilege: application_read
  /singlesensor/scene/images/metadata.jpg:
    get:
      operationId: getSceneImagesMetadataJpg
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: The image metadata
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the image metadata of the current scene with a white image
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_3
      x-privilege: application_read
  /singlesensor/scene/images/metadata.png:
    get:
      operationId: getSceneImagesMetadataPng
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            image/png:
              schema:
                format: binary
                type: string
          description: The image metadata
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the image metadata of the current scene with a white image
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_3
      x-privilege: application_read
  /singlesensor/scene/masks:
    delete:
      operationId: singlesensorSceneMasksDelete
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Deletes all existing masks
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      operationId: singlesensorSceneMasksGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/all_scene_masks'
          description: List of all existing masks
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Gets all existing masks
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      operationId: singlesensorSceneMasksPost
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/scene_mask'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/existing_scene_mask'
          description: Successfully created
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Adds a new mask, returns id of the created mask
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/scene/masks/{id}:
    delete:
      operationId: singlesensorSceneMasksIdDelete
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the scene mask
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Deletes existing mask
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      operationId: singlesensorSceneMasksIdGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the scene mask
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/existing_scene_mask'
          description: List of all existing masks
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Gets an existing mask
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      operationId: singlesensorSceneMasksIdPut
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the view mask
        in: path
        name: id
        required: true
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/scene_mask'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/existing_scene_mask'
          description: Modification was successul
        400:
          description: Invalid request received, e.g. malformed
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Modifies existing mask
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/scene/tracking_area:
    get:
      operationId: singlesensorSceneTrackingAreaGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tracking_area'
          description: Tracking area
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Get tracking area
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /singlesensor/settings/advanced:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advanced_settings'
          description: A json containing the current detector settings.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the advanced settings.
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/advanced_settings'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advanced_settings'
          description: Successfully applied
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set the advanced settings.
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/settings/advanced/options:
    get:
      operationId: singlesensorDetectorOptionsGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advanced_settings_options'
          description: A json containing the available options.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the available options for advanced settings.
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /singlesensor/settings/groups:
    get:
      operationId: singlesensorGroupsGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups_settings'
          description: A json containing the current groups settings.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the groups settings.
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      operationId: singlesensorGroupsPut
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groups_settings'
      responses:
        200:
          description: Successfully applied
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set the groups settings.
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/settings/image.jpg:
    get:
      operationId: getViewImagesRecalibrationJpg
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: The settings image with respect to view coordinates
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the current settings image
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /singlesensor/settings/image/update:
    post:
      operationId: singlesensorSettingsImageUpdatePost
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Success.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Update the settings image.
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/settings/light:
    get:
      operationId: singlesensorLightConditionsGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/light_settings'
          description: A json containing the currently set light conditions.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the light conditions.
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    patch:
      operationId: singlesensorLightConditionsPatch
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/light_settings'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/light_settings'
          description: Successfully applied
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set parts of the light conditions.
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    put:
      operationId: singlesensorLightConditionsPut
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/light_settings'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/light_settings'
          description: Successfully applied
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set the light conditions.
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/settings/path_stitching:
    get:
      operationId: singlesensorPathStitcherGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/path_stitching_settings'
          description: A json containing the current path stitcher settings.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the path stitcher settings.
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      operationId: singlesensorPathStitcherPut
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/path_stitching_settings'
      responses:
        200:
          description: Successfully applied
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set the path stitcher settings.
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/settings/recalibration:
    delete:
      operationId: singlesensorRecalibrationDelete
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Deletion was successful
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Delete the recalibration
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      operationId: singlesensorRecalibrationGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recalibration_settings_with_status'
          description: A json containing the current recalibration settings and status.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the recalibration settings and status.
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      operationId: singlesensorRecalibrationPut
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/recalibration_settings'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recalibration_settings_with_status'
          description: A json containing the current recalibration settings and status.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Update recalibration settings.
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/settings/recalibration/apply:
    post:
      operationId: singlesensorRecalibrationApplyPost
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Success.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Apply the recalibration.
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/settings/sensor_direction:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sensor_direction'
          description: A json containing a normalized sensor direction.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Gets the active and the measured sensor direction.
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /singlesensor/settings/sensor_geometry:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sensor_geometry'
          description: A json containing the active sensor geometry (height and sensor
            direction).
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the sensor geometry (height and direction)
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      description: To set the sensor direction either sensor_direction or alpha_deg
        and beta_deg can be specified. If both are provided, the sensor_direction
        overwrites the angles. If none of them is given, the measured sensor direction
        is used instead.
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sensor_geometry'
      responses:
        200:
          description: Successfully applied
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set the sensor geometry (height and direction)
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/settings/sensor_height:
    get:
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sensor_height'
          description: A json containing the mounting height of the sensor.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Gets the active and the measured sensor height.
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /singlesensor/settings/stereo:
    get:
      operationId: singlesensorStereoGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stereo_settings'
          description: A json containing the current stereo settings.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the stereo settings.
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      operationId: singlesensorStereoPut
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stereo_settings'
      responses:
        200:
          description: Successfully applied
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set the stereo settings.
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/settings/tag:
    get:
      operationId: singlesensorTagGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tag_settings'
          description: A json containing the current tag settings.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the tag settings.
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      operationId: singlesensorTagPut
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tag_settings'
      responses:
        200:
          description: Successfully applied
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Set the tag settings.
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/status:
    get:
      operationId: singlesensorStatusGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/singlesensor_status'
          description: Current status
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get the status of the singlesensor.
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
  /singlesensor/view/images/background.jpg:
    get:
      operationId: getViewImagesBackgroundJpg
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: The background image and the tracked objects of the current
            view
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requesting the background image of the current view
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_1
      x-privilege: application_read
  /singlesensor/view/images/background.tar:
    get:
      operationId: getViewImagesBackgroundTar
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            application/x-tar:
              schema:
                format: binary
                type: string
          description: The background image and the tracked objects of the current
            view
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requesting the background image of the current view
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_1
      x-privilege: application_read
  /singlesensor/view/images/data:
    get:
      operationId: getViewImagesData
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
          description: The live data with tracked objects
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the tracked objects of the current scene
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: LEVEL_2
      x-privilege: application_read
  /singlesensor/view/images/data.jpg:
    get:
      operationId: getViewImagesDataJpg
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: The live data with tracked objects
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the tracked objects of the current view with a white image
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_2
      x-privilege: application_read
  /singlesensor/view/images/data.png:
    get:
      operationId: getViewImagesDataPng
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            image/png:
              schema:
                format: binary
                type: string
          description: The live data with tracked objects
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the tracked objects of the current view with a white image
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_2
      x-privilege: application_read
  /singlesensor/view/images/live.jpg:
    get:
      operationId: getViewImagesLiveJpg
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: The live image and tracked objects
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the live image and tracked objects of the current view
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /singlesensor/view/images/live.tar:
    get:
      operationId: getViewImagesLiveTar
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            application/x-tar:
              schema:
                format: binary
                type: string
          description: The live image and tracked objects
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the live image and tracked objects of the current view
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_0
      x-privilege: application_read
  /singlesensor/view/images/metadata:
    get:
      operationId: getViewImagesMetadata
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
          description: The live data with tracked objects
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the image metadata of the current view
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: LEVEL_3
      x-privilege: application_read
  /singlesensor/view/images/metadata.jpg:
    get:
      operationId: getViewImagesMetadataJpg
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: The image metadata
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the image metadata of the current view with a white image
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_3
      x-privilege: application_read
  /singlesensor/view/images/metadata.png:
    get:
      operationId: getViewImagesMetadataPng
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: When set to true, 64bit integer will sent also as string to workaround
          the issue with Javascript numbers.
        in: query
        name: json_int64_workaround
        required: false
        schema:
          example: false
          type: boolean
      - description: When set to false, tracked objects are not included.
        in: query
        name: tracked_objects
        required: false
        schema:
          example: false
          type: boolean
      responses:
        200:
          content:
            image/png:
              schema:
                format: binary
                type: string
          description: The image metadata
          headers:
            X-Image-Metadata:
              description: Image Metadata JSON
              schema:
                $ref: '#/components/schemas/live_view_image_meta_headers'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        503:
          $ref: '#/components/responses/503_service_unavailable'
      summary: Requests the image metadata of the current view with a white image
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: LEVEL_3
      x-privilege: application_read
  /singlesensor/view/masks:
    delete:
      operationId: singlesensorViewMasksDelete
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Deletes all existing view masks
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      operationId: singlesensorViewMasksGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/all_view_masks'
          description: List of all existing view masks
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Gets all existing masks
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    post:
      operationId: singlesensorViewMasksPost
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/view_mask'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/existing_view_mask'
          description: Successfully created
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Adds a new view mask, returns id of the created mask
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /singlesensor/view/masks/{id}:
    delete:
      operationId: singlesensorViewMasksIdDelete
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the view mask
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          description: Deletion was successful
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Deletes existing mask
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
    get:
      operationId: singlesensorViewMasksIdGet
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the view mask
        in: path
        name: id
        required: true
        schema:
          type: number
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/existing_view_mask'
          description: List of all existing masks
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Gets an existing view mask
      tags:
      - Singlesensor
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: application_read
    put:
      operationId: singlesensorViewMasksIdPut
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: ID of the view mask
        in: path
        name: id
        required: true
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/view_mask'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/existing_view_mask'
          description: Modification was successul
        400:
          description: Invalid request received, e.g. malformed
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Modifies existing mask
      tags:
      - Singlesensor
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: application_write
  /time:
    delete:
      description: "## Description\nUsed to reset sensor time configuration to factory\
        \ default.\n## Factory default value\n```json\n{\n  \"time_zone\": \"UTC\"\
        ,\n  \"ntp_enabled\": true,\n  \"ntp_server_enabled\": false,\n  \"ntp_server_entries\"\
        : [\n    \"pool.ntp.org\"\n  ]\n}\n```\n"
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Successfully reset time configuration to factory default
        201:
          description: Not authorized
          headers:
            WWW-Authenticate:
              description: Request for authentication
              schema:
                type: string
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Reset time configuration to factory default
      tags:
      - Date & Time
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: time_cfg_write
    get:
      description: '## Description

        Used to retrieve sensor time configuration.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/time_settings'
          description: Current time configuration.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve current time configuration
      tags:
      - Date & Time
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: time_cfg_read
    put:
      description: '## Description

        Used to set sensor time configuration.

        We could either configure to:

        * set time manually

        * act as a NTP client

        * act as a NTP server

        * act as both NTP client and server at the same time

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/time_settings'
      responses:
        200:
          description: the response
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Replace or update existing time configuration
      tags:
      - Date & Time
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: time_cfg_write
  /time/manual:
    put:
      description: '## Description

        Used to set sensor time manually.

        ## Notice

        * Sensor time will not be set if NTP client is configured

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            examples:
              time_local_no_offset:
                $ref: '#/components/examples/time_local_no_offset'
              time_local_with_offset:
                $ref: '#/components/examples/time_local_with_offset'
              time_utc:
                $ref: '#/components/examples/time_utc'
            schema:
              $ref: '#/components/schemas/time_manual_settings'
      responses:
        200:
          description: Time successfully set.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
          description: Time not set.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        412:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
          description: Request failed e.g. because changing time manually is not possible
            when NTP is enabled or similar
      summary: Set current time manually
      tags:
      - Date & Time
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: time_cfg_write
  /time/state:
    get:
      description: '## Description

        Used to retrieve current state of time service.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/time_state'
          description: the response
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve current state of time service
      tags:
      - Date & Time
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: time_cfg_read
  /time/zones:
    get:
      description: '## Description

        Used to retrieve sensor time configuration.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timezones'
          description: List of supported time zones.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve list of supported time zones
      tags:
      - Date & Time
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: time_cfg_read
  /updates:
    delete:
      description: '## Description

        This endpoint can be used to delete all update packages.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Upgrade packages successfully deleted
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Delete all update packages
      tags:
      - Update
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: update_write
    get:
      description: '## Description

        This endpoint can be used to retrieve list of available update packages on
        sensor.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/update_packages'
          description: Current general device configuration
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve list of available update packages.
      tags:
      - Update
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: update_read
    post:
      description: '## Description

        This endpoint can be used to upload an update package.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/update_version'
          description: Upgrade successfully verified and uploaded
        400:
          description: Given upgrade package was erroneous and therefore rejected
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        408:
          description: No data was received for a certain amount of time, upload aborted
        413:
          description: Upload package is too big/no space left
        423:
          description: Another upload/update is already running
      summary: Upload of update package
      tags:
      - Update
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: update_write
  /updates/available:
    get:
      description: '## Description

        Retrieve list of updates available to download.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updates_available'
          description: Updates available to download
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Updates available to download.
      tags:
      - Update
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: update_read
  /updates/available/refresh:
    post:
      description: '## Description

        Send a refresh request to get lastest available updates to download

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Refresh request sent
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Updates available to download.
      tags:
      - Update
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: update_write
  /updates/config:
    delete:
      description: '## Description

        Reset update config.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Update config successfully reset
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Reset update config
      tags:
      - Update
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: update_write
    get:
      description: '## Description

        Retrieve current update config.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/download_config'
          description: Current configuration of the update service
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve current update config.
      tags:
      - Update
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: update_read
    put:
      description: '## Description

        Configure update config.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/download_config'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/download_config'
          description: Update config successfully verified and uploaded
        400:
          description: Given upgrade package was erroneous and therefore rejected
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        408:
          description: No data was received for a certain amount of time, upload aborted
        413:
          description: Upload package is too big/no space left
        423:
          description: Another upload/update is already running
      summary: Configure update config
      tags:
      - Update
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: update_write
  /updates/download:
    delete:
      description: '## Description

        Retrieve current update schedule.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Will cancel ongoing download if any is ongoing
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Cancel ongoing download
      tags:
      - Update
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: update_write
  /updates/download/state:
    get:
      description: '## Description

        Retrieve list of updates available to download.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/download_state'
          description: Download information
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get information about current/last download (depending on whether one
        is running)
      tags:
      - Update
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: update_read
  /updates/download/{version}:
    post:
      description: '## Description

        Starts download of version specified in the path

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of the update package
        in: path
        name: version
        required: true
        schema:
          type: string
      responses:
        200:
          description: Download of specific version started
        400:
          description: Given upgrade package was erroneous and therefore rejected
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          description: Update package not found.
      summary: Start download of specified version
      tags:
      - Update
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: update_write
  /updates/install:
    post:
      description: '## Description

        This endpoint can be used to upload and install an update package.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Force application of update installation
        in: query
        name: force
        required: false
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/update_version'
          description: Upgrade packages successfully deleted
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
          description: Update installation has been failed.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        412:
          description: A sensor downgrade must be forced because the sensor configuration
            might be lost.
      summary: Upload and install specific update package
      tags:
      - Update
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: update_write
  /updates/log:
    get:
      description: '## Description

        This endpoint can be used to get the log of the update installation, while
        the update is being installed.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: 'Allows to skip the first ''offset'' bytes of the update log.
          Useful for polling the update log with limited data rate.

          '
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: number
      responses:
        200:
          content:
            text/plain:
              schema:
                example: About to install sensor firmware 5.0.1...
                type: string
          description: Current or last update log
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retreive current or last update log.
      tags:
      - Update
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: update_read
  /updates/schedule:
    delete:
      description: '## Description

        Reset update schedule.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Upgrade packages successfully deleted
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Reset update schedule
      tags:
      - Update
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: update_write
    get:
      description: '## Description

        Retrieve current update schedule.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/update_schedule'
          description: Current general device configuration
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve current update schedule.
      tags:
      - Update
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: update_read
    put:
      description: '## Description

        Configure update schedule.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_schedule'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/update_schedule'
          description: Upgrade successfully verified and uploaded
        400:
          description: Given upgrade package was erroneous and therefore rejected
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        408:
          description: No data was received for a certain amount of time, upload aborted
        413:
          description: Upload package is too big/no space left
        423:
          description: Another upload/update is already running
      summary: Configure update schedule
      tags:
      - Update
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: update_write
  /updates/state:
    get:
      description: '## Description

        This endpoint can be used to retrieve the current update state.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/update_state'
          description: Current general device configuration
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve current update state.
      tags:
      - Update
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: update_read
  /updates/{version}:
    delete:
      description: '## Description

        This endpoint can be used to delete an update package.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of the update package
        in: path
        name: version
        required: true
        schema:
          type: string
      responses:
        200:
          description: Upgrade packages successfully deleted
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          description: Update package not found.
      summary: Delete specific update packages
      tags:
      - Update
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: update_write
  /updates/{version}/install:
    post:
      description: '## Description

        This endpoint can be used to install an update which is already on the sensor.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: Identification of the update package
        in: path
        name: version
        required: true
        schema:
          type: string
      - description: Force application of update installation
        in: query
        name: force
        required: false
        schema:
          default: false
          type: boolean
      responses:
        200:
          description: Upgrade packages successfully deleted
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
          description: Update installation has been failed.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          description: Update package not found.
        412:
          description: A sensor downgrade must be forced because the sensor configuration
            might be lost.
      summary: Install specific update package
      tags:
      - Update
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: update_write
  /users:
    delete:
      description: '## Description

        Used to reset user configuration to factory default.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Successfully reset user configuration to factory default
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Apply factory defaults for user configuration
      tags:
      - Users
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: hard_reset
    get:
      description: '## Description

        Used to retrieve list of user configurations.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_details'
          description: List of all users
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve list of all users
      tags:
      - Users
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: other_user_read
  /users/current:
    get:
      description: '## Description

        Used to retrieve current user''s configuration.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_detail'
          description: List of all users
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Retrieve info about current user
      tags:
      - Users
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: own_user_read
  /users/current/password:
    put:
      description: '## Description

        Used to change passwords of current user.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_credentials'
        description: Users' password to change
      responses:
        200:
          description: Successfully changed password of current user
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Change password of current user
      tags:
      - Users
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: own_user_passwd_change
  /users/login:
    post:
      description: '## Description

        Create a new session. This endpoint requires basic auth.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_session'
          description: Successfully created new session
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Login to create a session for this user
      tags:
      - Users
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: own_user_read
  /users/logout:
    post:
      description: "## Description\nDelete the session used for this request. \n"
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Successfully deleted session/logout
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Logout from a session
      tags:
      - Users
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: own_user_read
  /users/reset:
    post:
      description: '## Description

        Used to reset user configuration to factory default. Smk in payload, no basic
        auth.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_smk'
        description: ''
      responses:
        200:
          description: Successfully reset user configuration to factory default
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Apply factory defaults for user configuration
      tags:
      - Users
      - Public
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: unrestricted
  /users/{user_id}:
    get:
      description: '## Description

        Used to retrieve specific user configuration.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: User identifier
        in: path
        name: user_id
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_detail'
          description: List of all users
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Retrieve information of specific user
      tags:
      - Users
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: other_user_read
  /users/{user_id}/activation:
    put:
      description: '## Description

        Used to activate / deactivate other users.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: User identifier
        in: path
        name: user_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_activation'
        description: ''
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_activation'
          description: Successfully changed active flag of user
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Change activation of user
      tags:
      - Users
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: other_user_activate
  /users/{user_id}/password:
    delete:
      description: '## Description

        Reset password of user to default.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      - description: User identifier
        in: path
        name: user_id
        required: true
        schema:
          type: string
      responses:
        200:
          description: Password successfully reset.
        400:
          $ref: '#/components/responses/400_bad_request_json_body'
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
        404:
          $ref: '#/components/responses/404_id_not_found'
      summary: Reset password of user to default
      tags:
      - Users
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: other_user_passwd_change
  /www/config:
    get:
      description: '## Description

        Used to retrieve configuration of web-server.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/www_config'
          description: Web-server configuration
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get configuration of web-server
      tags:
      - API
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: www_config_read
    put:
      description: '## Description

        Used to store configuration of web-server. This call will reboot the sensor.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/www_config'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/www_config'
          description: Configuration successfully changed
        400:
          description: Configuration invalid.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Update / replace configuration of web-server
      tags:
      - API
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: www_config_write
  /www/config/x509/keystore:
    delete:
      description: '## Description

        Used to store configuration of web-server. This call will reboot the sensor.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          description: Configuration successfully changed
        400:
          description: Configuration invalid.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Reset server identity to factory-default
      tags:
      - API
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: www_config_write
    get:
      description: '## Description

        Used to retrieve configuration of web-server.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/x509_certificate_chain'
          description: Web-server configuration
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get server identity
      tags:
      - API
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: www_config_read
    put:
      description: '## Description

        Used to store configuration of web-server. This call will reboot the sensor.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
      responses:
        200:
          description: Configuration successfully changed
        400:
          description: Configuration invalid.
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Update / replace server identity
      tags:
      - API
      x-generic-push: false
      x-privacy-mode: IGNORE
      x-privilege: www_config_write
  /www/state:
    get:
      description: '## Description

        Used to retrieve current state of web-server. Currently all registered API
        endpoints are listed.

        '
      parameters:
      - $ref: '#/components/parameters/X-Requested-With'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/www_routes'
          description: Registered API endpoints
        401:
          $ref: '#/components/responses/401_unauthorized'
        403:
          $ref: '#/components/responses/403_forbidden'
      summary: Get state of web-server
      tags:
      - API
      x-generic-push: true
      x-privacy-mode: IGNORE
      x-privilege: www_state_read
security:
- basicAuth: []
servers:
- url: /api/v5
tags:
- name: API
- name: Configuration Changes
- name: Date & Time
- name: Device
- name: License
- name: Networking
- name: Privacy
- name: Recordings
- name: Remote Access
- name: RF Monitoring
- name: Trusted Authorities
- name: Sensor discover
- name: Update
- name: Users
- name: Singlesensor
- name: Singlesensor History Data
- name: Singlesensor Live Data
- name: Singlesensor Data Push
- name: Singlesensor Recording
- name: Multisensor
- name: Multisensor History Data
- name: Multisensor Live Data
- name: Multisensor Data Push
- name: Multisensor Recording
- name: Multisensor Stitching
- name: ITxPT
- name: Sandbox
- description: accessing blobstore for storing front end data
  name: UI
- name: PIP
- name: Public
