/*
Airthings API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: support@airthings.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the GetLocationsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetLocationsResponse{}

// GetLocationsResponse struct for GetLocationsResponse
type GetLocationsResponse struct {
	Locations []LocationResponse `json:"locations"`
}

type _GetLocationsResponse GetLocationsResponse

// NewGetLocationsResponse instantiates a new GetLocationsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetLocationsResponse(locations []LocationResponse) *GetLocationsResponse {
	this := GetLocationsResponse{}
	this.Locations = locations
	return &this
}

// NewGetLocationsResponseWithDefaults instantiates a new GetLocationsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetLocationsResponseWithDefaults() *GetLocationsResponse {
	this := GetLocationsResponse{}
	return &this
}

// GetLocations returns the Locations field value
func (o *GetLocationsResponse) GetLocations() []LocationResponse {
	if o == nil {
		var ret []LocationResponse
		return ret
	}

	return o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value
// and a boolean to check if the value has been set.
func (o *GetLocationsResponse) GetLocationsOk() ([]LocationResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Locations, true
}

// SetLocations sets field value
func (o *GetLocationsResponse) SetLocations(v []LocationResponse) {
	o.Locations = v
}

func (o GetLocationsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetLocationsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locations"] = o.Locations
	return toSerialize, nil
}

func (o *GetLocationsResponse) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locations",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetLocationsResponse := _GetLocationsResponse{}

	err = json.Unmarshal(bytes, &varGetLocationsResponse)

	if err != nil {
		return err
	}

	*o = GetLocationsResponse(varGetLocationsResponse)

	return err
}

type NullableGetLocationsResponse struct {
	value *GetLocationsResponse
	isSet bool
}

func (v NullableGetLocationsResponse) Get() *GetLocationsResponse {
	return v.value
}

func (v *NullableGetLocationsResponse) Set(val *GetLocationsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetLocationsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetLocationsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetLocationsResponse(val *GetLocationsResponse) *NullableGetLocationsResponse {
	return &NullableGetLocationsResponse{value: val, isSet: true}
}

func (v NullableGetLocationsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetLocationsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
