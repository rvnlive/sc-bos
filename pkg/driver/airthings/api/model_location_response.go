/*
Airthings API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: support@airthings.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the LocationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationResponse{}

// LocationResponse struct for LocationResponse
type LocationResponse struct {
	Id     string            `json:"id"`
	Labels map[string]string `json:"labels"`
	Name   string            `json:"name"`
}

type _LocationResponse LocationResponse

// NewLocationResponse instantiates a new LocationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationResponse(id string, labels map[string]string, name string) *LocationResponse {
	this := LocationResponse{}
	this.Id = id
	this.Labels = labels
	this.Name = name
	return &this
}

// NewLocationResponseWithDefaults instantiates a new LocationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationResponseWithDefaults() *LocationResponse {
	this := LocationResponse{}
	return &this
}

// GetId returns the Id field value
func (o *LocationResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LocationResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LocationResponse) SetId(v string) {
	o.Id = v
}

// GetLabels returns the Labels field value
// If the value is explicit nil, the zero value for map[string]string will be returned
func (o *LocationResponse) GetLabels() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationResponse) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return &o.Labels, true
}

// SetLabels sets field value
func (o *LocationResponse) SetLabels(v map[string]string) {
	o.Labels = v
}

// GetName returns the Name field value
func (o *LocationResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LocationResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LocationResponse) SetName(v string) {
	o.Name = v
}

func (o LocationResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *LocationResponse) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"labels",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLocationResponse := _LocationResponse{}

	err = json.Unmarshal(bytes, &varLocationResponse)

	if err != nil {
		return err
	}

	*o = LocationResponse(varLocationResponse)

	return err
}

type NullableLocationResponse struct {
	value *LocationResponse
	isSet bool
}

func (v NullableLocationResponse) Get() *LocationResponse {
	return v.value
}

func (v *NullableLocationResponse) Set(val *LocationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationResponse(val *LocationResponse) *NullableLocationResponse {
	return &NullableLocationResponse{value: val, isSet: true}
}

func (v NullableLocationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
