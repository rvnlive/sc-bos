/*
Airthings API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: support@airthings.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the DeviceSampleResponseEnriched type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceSampleResponseEnriched{}

// DeviceSampleResponseEnriched struct for DeviceSampleResponseEnriched
type DeviceSampleResponseEnriched struct {
	// latest sample data for the device
	Data    SingleSampleDataEnriched `json:"data"`
	Id      string                   `json:"id"`
	Segment SegmentSimpleResponse    `json:"segment"`
}

type _DeviceSampleResponseEnriched DeviceSampleResponseEnriched

// NewDeviceSampleResponseEnriched instantiates a new DeviceSampleResponseEnriched object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceSampleResponseEnriched(data SingleSampleDataEnriched, id string, segment SegmentSimpleResponse) *DeviceSampleResponseEnriched {
	this := DeviceSampleResponseEnriched{}
	this.Data = data
	this.Id = id
	this.Segment = segment
	return &this
}

// NewDeviceSampleResponseEnrichedWithDefaults instantiates a new DeviceSampleResponseEnriched object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceSampleResponseEnrichedWithDefaults() *DeviceSampleResponseEnriched {
	this := DeviceSampleResponseEnriched{}
	return &this
}

// GetData returns the Data field value
func (o *DeviceSampleResponseEnriched) GetData() SingleSampleDataEnriched {
	if o == nil {
		var ret SingleSampleDataEnriched
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *DeviceSampleResponseEnriched) GetDataOk() (*SingleSampleDataEnriched, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *DeviceSampleResponseEnriched) SetData(v SingleSampleDataEnriched) {
	o.Data = v
}

// GetId returns the Id field value
func (o *DeviceSampleResponseEnriched) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DeviceSampleResponseEnriched) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DeviceSampleResponseEnriched) SetId(v string) {
	o.Id = v
}

// GetSegment returns the Segment field value
func (o *DeviceSampleResponseEnriched) GetSegment() SegmentSimpleResponse {
	if o == nil {
		var ret SegmentSimpleResponse
		return ret
	}

	return o.Segment
}

// GetSegmentOk returns a tuple with the Segment field value
// and a boolean to check if the value has been set.
func (o *DeviceSampleResponseEnriched) GetSegmentOk() (*SegmentSimpleResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Segment, true
}

// SetSegment sets field value
func (o *DeviceSampleResponseEnriched) SetSegment(v SegmentSimpleResponse) {
	o.Segment = v
}

func (o DeviceSampleResponseEnriched) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceSampleResponseEnriched) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["id"] = o.Id
	toSerialize["segment"] = o.Segment
	return toSerialize, nil
}

func (o *DeviceSampleResponseEnriched) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"id",
		"segment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceSampleResponseEnriched := _DeviceSampleResponseEnriched{}

	err = json.Unmarshal(bytes, &varDeviceSampleResponseEnriched)

	if err != nil {
		return err
	}

	*o = DeviceSampleResponseEnriched(varDeviceSampleResponseEnriched)

	return err
}

type NullableDeviceSampleResponseEnriched struct {
	value *DeviceSampleResponseEnriched
	isSet bool
}

func (v NullableDeviceSampleResponseEnriched) Get() *DeviceSampleResponseEnriched {
	return v.value
}

func (v *NullableDeviceSampleResponseEnriched) Set(val *DeviceSampleResponseEnriched) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceSampleResponseEnriched) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceSampleResponseEnriched) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceSampleResponseEnriched(val *DeviceSampleResponseEnriched) *NullableDeviceSampleResponseEnriched {
	return &NullableDeviceSampleResponseEnriched{value: val, isSet: true}
}

func (v NullableDeviceSampleResponseEnriched) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceSampleResponseEnriched) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
