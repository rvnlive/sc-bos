/*
Airthings API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: support@airthings.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// SingleSampleDataEnrichedControlSignal - struct for SingleSampleDataEnrichedControlSignal
type SingleSampleDataEnrichedControlSignal struct {
	Float64 *float64
}

// float64AsSingleSampleDataEnrichedControlSignal is a convenience function that returns float64 wrapped in SingleSampleDataEnrichedControlSignal
func Float64AsSingleSampleDataEnrichedControlSignal(v *float64) SingleSampleDataEnrichedControlSignal {
	return SingleSampleDataEnrichedControlSignal{
		Float64: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SingleSampleDataEnrichedControlSignal) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into Float64
	err = newStrictDecoder(data).Decode(&dst.Float64)
	if err == nil {
		jsonFloat64, _ := json.Marshal(dst.Float64)
		if string(jsonFloat64) == "{}" { // empty struct
			dst.Float64 = nil
		} else {
			match++
		}
	} else {
		dst.Float64 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Float64 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SingleSampleDataEnrichedControlSignal)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SingleSampleDataEnrichedControlSignal)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SingleSampleDataEnrichedControlSignal) MarshalJSON() ([]byte, error) {
	if src.Float64 != nil {
		return json.Marshal(&src.Float64)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SingleSampleDataEnrichedControlSignal) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Float64 != nil {
		return obj.Float64
	}

	// all schemas are nil
	return nil
}

type NullableSingleSampleDataEnrichedControlSignal struct {
	value *SingleSampleDataEnrichedControlSignal
	isSet bool
}

func (v NullableSingleSampleDataEnrichedControlSignal) Get() *SingleSampleDataEnrichedControlSignal {
	return v.value
}

func (v *NullableSingleSampleDataEnrichedControlSignal) Set(val *SingleSampleDataEnrichedControlSignal) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleSampleDataEnrichedControlSignal) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleSampleDataEnrichedControlSignal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleSampleDataEnrichedControlSignal(val *SingleSampleDataEnrichedControlSignal) *NullableSingleSampleDataEnrichedControlSignal {
	return &NullableSingleSampleDataEnrichedControlSignal{value: val, isSet: true}
}

func (v NullableSingleSampleDataEnrichedControlSignal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleSampleDataEnrichedControlSignal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
