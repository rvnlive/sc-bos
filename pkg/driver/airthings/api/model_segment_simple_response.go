/*
Airthings API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: support@airthings.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the SegmentSimpleResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SegmentSimpleResponse{}

// SegmentSimpleResponse struct for SegmentSimpleResponse
type SegmentSimpleResponse struct {
	Active  bool   `json:"active"`
	Id      string `json:"id"`
	Name    string `json:"name"`
	Started Time   `json:"started"`
}

type _SegmentSimpleResponse SegmentSimpleResponse

// NewSegmentSimpleResponse instantiates a new SegmentSimpleResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSegmentSimpleResponse(active bool, id string, name string, started time.Time) *SegmentSimpleResponse {
	this := SegmentSimpleResponse{}
	this.Active = active
	this.Id = id
	this.Name = name
	this.Started = Time{started}
	return &this
}

// NewSegmentSimpleResponseWithDefaults instantiates a new SegmentSimpleResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSegmentSimpleResponseWithDefaults() *SegmentSimpleResponse {
	this := SegmentSimpleResponse{}
	return &this
}

// GetActive returns the Active field value
func (o *SegmentSimpleResponse) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *SegmentSimpleResponse) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *SegmentSimpleResponse) SetActive(v bool) {
	o.Active = v
}

// GetId returns the Id field value
func (o *SegmentSimpleResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SegmentSimpleResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SegmentSimpleResponse) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *SegmentSimpleResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SegmentSimpleResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SegmentSimpleResponse) SetName(v string) {
	o.Name = v
}

// GetStarted returns the Started field value
func (o *SegmentSimpleResponse) GetStarted() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Started.Time
}

// GetStartedOk returns a tuple with the Started field value
// and a boolean to check if the value has been set.
func (o *SegmentSimpleResponse) GetStartedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Started.Time, true
}

// SetStarted sets field value
func (o *SegmentSimpleResponse) SetStarted(v time.Time) {
	o.Started = Time{v}
}

func (o SegmentSimpleResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SegmentSimpleResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["active"] = o.Active
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["started"] = o.Started
	return toSerialize, nil
}

func (o *SegmentSimpleResponse) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"active",
		"id",
		"name",
		"started",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSegmentSimpleResponse := _SegmentSimpleResponse{}

	err = json.Unmarshal(bytes, &varSegmentSimpleResponse)

	if err != nil {
		return err
	}

	*o = SegmentSimpleResponse(varSegmentSimpleResponse)

	return err
}

type NullableSegmentSimpleResponse struct {
	value *SegmentSimpleResponse
	isSet bool
}

func (v NullableSegmentSimpleResponse) Get() *SegmentSimpleResponse {
	return v.value
}

func (v *NullableSegmentSimpleResponse) Set(val *SegmentSimpleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSegmentSimpleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSegmentSimpleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSegmentSimpleResponse(val *SegmentSimpleResponse) *NullableSegmentSimpleResponse {
	return &NullableSegmentSimpleResponse{value: val, isSet: true}
}

func (v NullableSegmentSimpleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSegmentSimpleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
