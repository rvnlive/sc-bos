/*
Airthings API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: support@airthings.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the SingleSampleDataEnriched type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SingleSampleDataEnriched{}

// SingleSampleDataEnriched struct for SingleSampleDataEnriched
type SingleSampleDataEnriched struct {
	AirExchangeRate     NullableFloat64                               `json:"airExchangeRate,omitempty"`
	Airflow             NullableFloat64                               `json:"airflow,omitempty"`
	Battery             NullableFloat32                               `json:"battery,omitempty"`
	Co2                 NullableFloat64                               `json:"co2,omitempty"`
	ControlSignal       NullableSingleSampleDataEnrichedControlSignal `json:"controlSignal,omitempty"`
	ControlSignalSlot01 NullableSingleSampleDataEnrichedControlSignal `json:"controlSignalSlot01,omitempty"`
	ControlSignalSlot02 NullableSingleSampleDataEnrichedControlSignal `json:"controlSignalSlot02,omitempty"`
	ControlSignalSlot03 NullableSingleSampleDataEnrichedControlSignal `json:"controlSignalSlot03,omitempty"`
	ControlSignalSlot04 NullableSingleSampleDataEnrichedControlSignal `json:"controlSignalSlot04,omitempty"`
	ControlSignalSlot05 NullableSingleSampleDataEnrichedControlSignal `json:"controlSignalSlot05,omitempty"`
	ControlSignalSlot06 NullableSingleSampleDataEnrichedControlSignal `json:"controlSignalSlot06,omitempty"`
	ControlSignalSlot07 NullableSingleSampleDataEnrichedControlSignal `json:"controlSignalSlot07,omitempty"`
	ControlSignalSlot08 NullableSingleSampleDataEnrichedControlSignal `json:"controlSignalSlot08,omitempty"`
	Humidity            NullableSingleSampleDataEnrichedControlSignal `json:"humidity,omitempty"`
	Light               NullableSingleSampleDataEnrichedLight         `json:"light,omitempty"`
	Lux                 NullableFloat32                               `json:"lux,omitempty"`
	Mold                NullableSingleSampleDataEnrichedControlSignal `json:"mold,omitempty"`
	Occupants           NullableSingleSampleDataEnrichedLight         `json:"occupants,omitempty"`
	OccupantsLower      NullableSingleSampleDataEnrichedLight         `json:"occupantsLower,omitempty"`
	OccupantsUpper      NullableSingleSampleDataEnrichedLight         `json:"occupantsUpper,omitempty"`
	OutdoorCo           NullableSingleSampleDataEnrichedControlSignal `json:"outdoorCo,omitempty"`
	OutdoorHumidity     NullableSingleSampleDataEnrichedControlSignal `json:"outdoorHumidity,omitempty"`
	OutdoorNo           NullableSingleSampleDataEnrichedControlSignal `json:"outdoorNo,omitempty"`
	OutdoorNo2          NullableSingleSampleDataEnrichedControlSignal `json:"outdoorNo2,omitempty"`
	OutdoorO3           NullableSingleSampleDataEnrichedControlSignal `json:"outdoorO3,omitempty"`
	OutdoorPm1          NullableSingleSampleDataEnrichedControlSignal `json:"outdoorPm1,omitempty"`
	OutdoorPm10         NullableSingleSampleDataEnrichedControlSignal `json:"outdoorPm10,omitempty"`
	OutdoorPm25         NullableSingleSampleDataEnrichedControlSignal `json:"outdoorPm25,omitempty"`
	OutdoorPressure     NullableSingleSampleDataEnrichedControlSignal `json:"outdoorPressure,omitempty"`
	OutdoorSo2          NullableSingleSampleDataEnrichedControlSignal `json:"outdoorSo2,omitempty"`
	OutdoorTemp         NullableSingleSampleDataEnrichedControlSignal `json:"outdoorTemp,omitempty"`
	Pm1                 NullableSingleSampleDataEnrichedControlSignal `json:"pm1,omitempty"`
	Pm10                NullableSingleSampleDataEnrichedControlSignal `json:"pm10,omitempty"`
	Pm25                NullableSingleSampleDataEnrichedControlSignal `json:"pm25,omitempty"`
	Pressure            NullableSingleSampleDataEnrichedControlSignal `json:"pressure,omitempty"`
	PressureDifference  NullableSingleSampleDataEnrichedControlSignal `json:"pressureDifference,omitempty"`
	RadonShortTermAvg   NullableSingleSampleDataEnrichedControlSignal `json:"radonShortTermAvg,omitempty"`
	RegulationHeight    NullableSingleSampleDataEnrichedControlSignal `json:"regulationHeight,omitempty"`
	RegulationPressure  NullableSingleSampleDataEnrichedControlSignal `json:"regulationPressure,omitempty"`
	RelayDeviceType     NullableString                                `json:"relayDeviceType,omitempty"`
	Rssi                NullableSingleSampleDataEnrichedLight         `json:"rssi,omitempty"`
	Sla                 NullableSingleSampleDataEnrichedControlSignal `json:"sla,omitempty"`
	Temp                NullableSingleSampleDataEnrichedControlSignal `json:"temp,omitempty"`
	Time                NullableSingleSampleDataEnrichedLight         `json:"time,omitempty"`
	VirusRisk           NullableSingleSampleDataEnrichedControlSignal `json:"virusRisk,omitempty"`
	Voc                 NullableSingleSampleDataEnrichedControlSignal `json:"voc,omitempty"`
}

// NewSingleSampleDataEnriched instantiates a new SingleSampleDataEnriched object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleSampleDataEnriched() *SingleSampleDataEnriched {
	this := SingleSampleDataEnriched{}
	return &this
}

// NewSingleSampleDataEnrichedWithDefaults instantiates a new SingleSampleDataEnriched object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleSampleDataEnrichedWithDefaults() *SingleSampleDataEnriched {
	this := SingleSampleDataEnriched{}
	return &this
}

// GetAirExchangeRate returns the AirExchangeRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetAirExchangeRate() float64 {
	if o == nil || IsNil(o.AirExchangeRate.Get()) {
		var ret float64
		return ret
	}
	return *o.AirExchangeRate.Get()
}

// GetAirExchangeRateOk returns a tuple with the AirExchangeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetAirExchangeRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AirExchangeRate.Get(), o.AirExchangeRate.IsSet()
}

// HasAirExchangeRate returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasAirExchangeRate() bool {
	if o != nil && o.AirExchangeRate.IsSet() {
		return true
	}

	return false
}

// SetAirExchangeRate gets a reference to the given NullableFloat64 and assigns it to the AirExchangeRate field.
func (o *SingleSampleDataEnriched) SetAirExchangeRate(v float64) {
	o.AirExchangeRate.Set(&v)
}

// SetAirExchangeRateNil sets the value for AirExchangeRate to be an explicit nil
func (o *SingleSampleDataEnriched) SetAirExchangeRateNil() {
	o.AirExchangeRate.Set(nil)
}

// UnsetAirExchangeRate ensures that no value is present for AirExchangeRate, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetAirExchangeRate() {
	o.AirExchangeRate.Unset()
}

// GetAirflow returns the Airflow field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetAirflow() float64 {
	if o == nil || IsNil(o.Airflow.Get()) {
		var ret float64
		return ret
	}
	return *o.Airflow.Get()
}

// GetAirflowOk returns a tuple with the Airflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetAirflowOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Airflow.Get(), o.Airflow.IsSet()
}

// HasAirflow returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasAirflow() bool {
	if o != nil && o.Airflow.IsSet() {
		return true
	}

	return false
}

// SetAirflow gets a reference to the given NullableFloat64 and assigns it to the Airflow field.
func (o *SingleSampleDataEnriched) SetAirflow(v float64) {
	o.Airflow.Set(&v)
}

// SetAirflowNil sets the value for Airflow to be an explicit nil
func (o *SingleSampleDataEnriched) SetAirflowNil() {
	o.Airflow.Set(nil)
}

// UnsetAirflow ensures that no value is present for Airflow, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetAirflow() {
	o.Airflow.Unset()
}

// GetBattery returns the Battery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetBattery() float32 {
	if o == nil || IsNil(o.Battery.Get()) {
		var ret float32
		return ret
	}
	return *o.Battery.Get()
}

// GetBatteryOk returns a tuple with the Battery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetBatteryOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Battery.Get(), o.Battery.IsSet()
}

// HasBattery returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasBattery() bool {
	if o != nil && o.Battery.IsSet() {
		return true
	}

	return false
}

// SetBattery gets a reference to the given NullableFloat32 and assigns it to the Battery field.
func (o *SingleSampleDataEnriched) SetBattery(v float32) {
	o.Battery.Set(&v)
}

// SetBatteryNil sets the value for Battery to be an explicit nil
func (o *SingleSampleDataEnriched) SetBatteryNil() {
	o.Battery.Set(nil)
}

// UnsetBattery ensures that no value is present for Battery, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetBattery() {
	o.Battery.Unset()
}

// GetCo2 returns the Co2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetCo2() float64 {
	if o == nil || IsNil(o.Co2.Get()) {
		var ret float64
		return ret
	}
	return *o.Co2.Get()
}

// GetCo2Ok returns a tuple with the Co2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetCo2Ok() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Co2.Get(), o.Co2.IsSet()
}

// HasCo2 returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasCo2() bool {
	if o != nil && o.Co2.IsSet() {
		return true
	}

	return false
}

// SetCo2 gets a reference to the given NullableFloat64 and assigns it to the Co2 field.
func (o *SingleSampleDataEnriched) SetCo2(v float64) {
	o.Co2.Set(&v)
}

// SetCo2Nil sets the value for Co2 to be an explicit nil
func (o *SingleSampleDataEnriched) SetCo2Nil() {
	o.Co2.Set(nil)
}

// UnsetCo2 ensures that no value is present for Co2, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetCo2() {
	o.Co2.Unset()
}

// GetControlSignal returns the ControlSignal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetControlSignal() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.ControlSignal.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.ControlSignal.Get()
}

// GetControlSignalOk returns a tuple with the ControlSignal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetControlSignalOk() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.ControlSignal.Get(), o.ControlSignal.IsSet()
}

// HasControlSignal returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasControlSignal() bool {
	if o != nil && o.ControlSignal.IsSet() {
		return true
	}

	return false
}

// SetControlSignal gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the ControlSignal field.
func (o *SingleSampleDataEnriched) SetControlSignal(v SingleSampleDataEnrichedControlSignal) {
	o.ControlSignal.Set(&v)
}

// SetControlSignalNil sets the value for ControlSignal to be an explicit nil
func (o *SingleSampleDataEnriched) SetControlSignalNil() {
	o.ControlSignal.Set(nil)
}

// UnsetControlSignal ensures that no value is present for ControlSignal, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetControlSignal() {
	o.ControlSignal.Unset()
}

// GetControlSignalSlot01 returns the ControlSignalSlot01 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetControlSignalSlot01() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.ControlSignalSlot01.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.ControlSignalSlot01.Get()
}

// GetControlSignalSlot01Ok returns a tuple with the ControlSignalSlot01 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetControlSignalSlot01Ok() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.ControlSignalSlot01.Get(), o.ControlSignalSlot01.IsSet()
}

// HasControlSignalSlot01 returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasControlSignalSlot01() bool {
	if o != nil && o.ControlSignalSlot01.IsSet() {
		return true
	}

	return false
}

// SetControlSignalSlot01 gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the ControlSignalSlot01 field.
func (o *SingleSampleDataEnriched) SetControlSignalSlot01(v SingleSampleDataEnrichedControlSignal) {
	o.ControlSignalSlot01.Set(&v)
}

// SetControlSignalSlot01Nil sets the value for ControlSignalSlot01 to be an explicit nil
func (o *SingleSampleDataEnriched) SetControlSignalSlot01Nil() {
	o.ControlSignalSlot01.Set(nil)
}

// UnsetControlSignalSlot01 ensures that no value is present for ControlSignalSlot01, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetControlSignalSlot01() {
	o.ControlSignalSlot01.Unset()
}

// GetControlSignalSlot02 returns the ControlSignalSlot02 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetControlSignalSlot02() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.ControlSignalSlot02.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.ControlSignalSlot02.Get()
}

// GetControlSignalSlot02Ok returns a tuple with the ControlSignalSlot02 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetControlSignalSlot02Ok() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.ControlSignalSlot02.Get(), o.ControlSignalSlot02.IsSet()
}

// HasControlSignalSlot02 returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasControlSignalSlot02() bool {
	if o != nil && o.ControlSignalSlot02.IsSet() {
		return true
	}

	return false
}

// SetControlSignalSlot02 gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the ControlSignalSlot02 field.
func (o *SingleSampleDataEnriched) SetControlSignalSlot02(v SingleSampleDataEnrichedControlSignal) {
	o.ControlSignalSlot02.Set(&v)
}

// SetControlSignalSlot02Nil sets the value for ControlSignalSlot02 to be an explicit nil
func (o *SingleSampleDataEnriched) SetControlSignalSlot02Nil() {
	o.ControlSignalSlot02.Set(nil)
}

// UnsetControlSignalSlot02 ensures that no value is present for ControlSignalSlot02, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetControlSignalSlot02() {
	o.ControlSignalSlot02.Unset()
}

// GetControlSignalSlot03 returns the ControlSignalSlot03 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetControlSignalSlot03() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.ControlSignalSlot03.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.ControlSignalSlot03.Get()
}

// GetControlSignalSlot03Ok returns a tuple with the ControlSignalSlot03 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetControlSignalSlot03Ok() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.ControlSignalSlot03.Get(), o.ControlSignalSlot03.IsSet()
}

// HasControlSignalSlot03 returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasControlSignalSlot03() bool {
	if o != nil && o.ControlSignalSlot03.IsSet() {
		return true
	}

	return false
}

// SetControlSignalSlot03 gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the ControlSignalSlot03 field.
func (o *SingleSampleDataEnriched) SetControlSignalSlot03(v SingleSampleDataEnrichedControlSignal) {
	o.ControlSignalSlot03.Set(&v)
}

// SetControlSignalSlot03Nil sets the value for ControlSignalSlot03 to be an explicit nil
func (o *SingleSampleDataEnriched) SetControlSignalSlot03Nil() {
	o.ControlSignalSlot03.Set(nil)
}

// UnsetControlSignalSlot03 ensures that no value is present for ControlSignalSlot03, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetControlSignalSlot03() {
	o.ControlSignalSlot03.Unset()
}

// GetControlSignalSlot04 returns the ControlSignalSlot04 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetControlSignalSlot04() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.ControlSignalSlot04.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.ControlSignalSlot04.Get()
}

// GetControlSignalSlot04Ok returns a tuple with the ControlSignalSlot04 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetControlSignalSlot04Ok() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.ControlSignalSlot04.Get(), o.ControlSignalSlot04.IsSet()
}

// HasControlSignalSlot04 returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasControlSignalSlot04() bool {
	if o != nil && o.ControlSignalSlot04.IsSet() {
		return true
	}

	return false
}

// SetControlSignalSlot04 gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the ControlSignalSlot04 field.
func (o *SingleSampleDataEnriched) SetControlSignalSlot04(v SingleSampleDataEnrichedControlSignal) {
	o.ControlSignalSlot04.Set(&v)
}

// SetControlSignalSlot04Nil sets the value for ControlSignalSlot04 to be an explicit nil
func (o *SingleSampleDataEnriched) SetControlSignalSlot04Nil() {
	o.ControlSignalSlot04.Set(nil)
}

// UnsetControlSignalSlot04 ensures that no value is present for ControlSignalSlot04, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetControlSignalSlot04() {
	o.ControlSignalSlot04.Unset()
}

// GetControlSignalSlot05 returns the ControlSignalSlot05 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetControlSignalSlot05() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.ControlSignalSlot05.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.ControlSignalSlot05.Get()
}

// GetControlSignalSlot05Ok returns a tuple with the ControlSignalSlot05 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetControlSignalSlot05Ok() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.ControlSignalSlot05.Get(), o.ControlSignalSlot05.IsSet()
}

// HasControlSignalSlot05 returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasControlSignalSlot05() bool {
	if o != nil && o.ControlSignalSlot05.IsSet() {
		return true
	}

	return false
}

// SetControlSignalSlot05 gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the ControlSignalSlot05 field.
func (o *SingleSampleDataEnriched) SetControlSignalSlot05(v SingleSampleDataEnrichedControlSignal) {
	o.ControlSignalSlot05.Set(&v)
}

// SetControlSignalSlot05Nil sets the value for ControlSignalSlot05 to be an explicit nil
func (o *SingleSampleDataEnriched) SetControlSignalSlot05Nil() {
	o.ControlSignalSlot05.Set(nil)
}

// UnsetControlSignalSlot05 ensures that no value is present for ControlSignalSlot05, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetControlSignalSlot05() {
	o.ControlSignalSlot05.Unset()
}

// GetControlSignalSlot06 returns the ControlSignalSlot06 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetControlSignalSlot06() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.ControlSignalSlot06.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.ControlSignalSlot06.Get()
}

// GetControlSignalSlot06Ok returns a tuple with the ControlSignalSlot06 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetControlSignalSlot06Ok() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.ControlSignalSlot06.Get(), o.ControlSignalSlot06.IsSet()
}

// HasControlSignalSlot06 returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasControlSignalSlot06() bool {
	if o != nil && o.ControlSignalSlot06.IsSet() {
		return true
	}

	return false
}

// SetControlSignalSlot06 gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the ControlSignalSlot06 field.
func (o *SingleSampleDataEnriched) SetControlSignalSlot06(v SingleSampleDataEnrichedControlSignal) {
	o.ControlSignalSlot06.Set(&v)
}

// SetControlSignalSlot06Nil sets the value for ControlSignalSlot06 to be an explicit nil
func (o *SingleSampleDataEnriched) SetControlSignalSlot06Nil() {
	o.ControlSignalSlot06.Set(nil)
}

// UnsetControlSignalSlot06 ensures that no value is present for ControlSignalSlot06, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetControlSignalSlot06() {
	o.ControlSignalSlot06.Unset()
}

// GetControlSignalSlot07 returns the ControlSignalSlot07 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetControlSignalSlot07() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.ControlSignalSlot07.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.ControlSignalSlot07.Get()
}

// GetControlSignalSlot07Ok returns a tuple with the ControlSignalSlot07 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetControlSignalSlot07Ok() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.ControlSignalSlot07.Get(), o.ControlSignalSlot07.IsSet()
}

// HasControlSignalSlot07 returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasControlSignalSlot07() bool {
	if o != nil && o.ControlSignalSlot07.IsSet() {
		return true
	}

	return false
}

// SetControlSignalSlot07 gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the ControlSignalSlot07 field.
func (o *SingleSampleDataEnriched) SetControlSignalSlot07(v SingleSampleDataEnrichedControlSignal) {
	o.ControlSignalSlot07.Set(&v)
}

// SetControlSignalSlot07Nil sets the value for ControlSignalSlot07 to be an explicit nil
func (o *SingleSampleDataEnriched) SetControlSignalSlot07Nil() {
	o.ControlSignalSlot07.Set(nil)
}

// UnsetControlSignalSlot07 ensures that no value is present for ControlSignalSlot07, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetControlSignalSlot07() {
	o.ControlSignalSlot07.Unset()
}

// GetControlSignalSlot08 returns the ControlSignalSlot08 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetControlSignalSlot08() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.ControlSignalSlot08.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.ControlSignalSlot08.Get()
}

// GetControlSignalSlot08Ok returns a tuple with the ControlSignalSlot08 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetControlSignalSlot08Ok() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.ControlSignalSlot08.Get(), o.ControlSignalSlot08.IsSet()
}

// HasControlSignalSlot08 returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasControlSignalSlot08() bool {
	if o != nil && o.ControlSignalSlot08.IsSet() {
		return true
	}

	return false
}

// SetControlSignalSlot08 gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the ControlSignalSlot08 field.
func (o *SingleSampleDataEnriched) SetControlSignalSlot08(v SingleSampleDataEnrichedControlSignal) {
	o.ControlSignalSlot08.Set(&v)
}

// SetControlSignalSlot08Nil sets the value for ControlSignalSlot08 to be an explicit nil
func (o *SingleSampleDataEnriched) SetControlSignalSlot08Nil() {
	o.ControlSignalSlot08.Set(nil)
}

// UnsetControlSignalSlot08 ensures that no value is present for ControlSignalSlot08, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetControlSignalSlot08() {
	o.ControlSignalSlot08.Unset()
}

// GetHumidity returns the Humidity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetHumidity() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.Humidity.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.Humidity.Get()
}

// GetHumidityOk returns a tuple with the Humidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetHumidityOk() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.Humidity.Get(), o.Humidity.IsSet()
}

// HasHumidity returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasHumidity() bool {
	if o != nil && o.Humidity.IsSet() {
		return true
	}

	return false
}

// SetHumidity gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the Humidity field.
func (o *SingleSampleDataEnriched) SetHumidity(v SingleSampleDataEnrichedControlSignal) {
	o.Humidity.Set(&v)
}

// SetHumidityNil sets the value for Humidity to be an explicit nil
func (o *SingleSampleDataEnriched) SetHumidityNil() {
	o.Humidity.Set(nil)
}

// UnsetHumidity ensures that no value is present for Humidity, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetHumidity() {
	o.Humidity.Unset()
}

// GetLight returns the Light field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetLight() SingleSampleDataEnrichedLight {
	if o == nil || IsNil(o.Light.Get()) {
		var ret SingleSampleDataEnrichedLight
		return ret
	}
	return *o.Light.Get()
}

// GetLightOk returns a tuple with the Light field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetLightOk() (*SingleSampleDataEnrichedLight, bool) {
	if o == nil {
		return nil, false
	}
	return o.Light.Get(), o.Light.IsSet()
}

// HasLight returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasLight() bool {
	if o != nil && o.Light.IsSet() {
		return true
	}

	return false
}

// SetLight gets a reference to the given NullableSingleSampleDataEnrichedLight and assigns it to the Light field.
func (o *SingleSampleDataEnriched) SetLight(v SingleSampleDataEnrichedLight) {
	o.Light.Set(&v)
}

// SetLightNil sets the value for Light to be an explicit nil
func (o *SingleSampleDataEnriched) SetLightNil() {
	o.Light.Set(nil)
}

// UnsetLight ensures that no value is present for Light, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetLight() {
	o.Light.Unset()
}

// GetLux returns the Lux field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetLux() float32 {
	if o == nil || IsNil(o.Lux.Get()) {
		var ret float32
		return ret
	}
	return *o.Lux.Get()
}

// GetLuxOk returns a tuple with the Lux field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetLuxOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lux.Get(), o.Lux.IsSet()
}

// HasLux returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasLux() bool {
	if o != nil && o.Lux.IsSet() {
		return true
	}

	return false
}

// SetLux gets a reference to the given NullableFloat32 and assigns it to the Lux field.
func (o *SingleSampleDataEnriched) SetLux(v float32) {
	o.Lux.Set(&v)
}

// SetLuxNil sets the value for Lux to be an explicit nil
func (o *SingleSampleDataEnriched) SetLuxNil() {
	o.Lux.Set(nil)
}

// UnsetLux ensures that no value is present for Lux, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetLux() {
	o.Lux.Unset()
}

// GetMold returns the Mold field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetMold() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.Mold.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.Mold.Get()
}

// GetMoldOk returns a tuple with the Mold field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetMoldOk() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mold.Get(), o.Mold.IsSet()
}

// HasMold returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasMold() bool {
	if o != nil && o.Mold.IsSet() {
		return true
	}

	return false
}

// SetMold gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the Mold field.
func (o *SingleSampleDataEnriched) SetMold(v SingleSampleDataEnrichedControlSignal) {
	o.Mold.Set(&v)
}

// SetMoldNil sets the value for Mold to be an explicit nil
func (o *SingleSampleDataEnriched) SetMoldNil() {
	o.Mold.Set(nil)
}

// UnsetMold ensures that no value is present for Mold, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetMold() {
	o.Mold.Unset()
}

// GetOccupants returns the Occupants field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetOccupants() SingleSampleDataEnrichedLight {
	if o == nil || IsNil(o.Occupants.Get()) {
		var ret SingleSampleDataEnrichedLight
		return ret
	}
	return *o.Occupants.Get()
}

// GetOccupantsOk returns a tuple with the Occupants field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetOccupantsOk() (*SingleSampleDataEnrichedLight, bool) {
	if o == nil {
		return nil, false
	}
	return o.Occupants.Get(), o.Occupants.IsSet()
}

// HasOccupants returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasOccupants() bool {
	if o != nil && o.Occupants.IsSet() {
		return true
	}

	return false
}

// SetOccupants gets a reference to the given NullableSingleSampleDataEnrichedLight and assigns it to the Occupants field.
func (o *SingleSampleDataEnriched) SetOccupants(v SingleSampleDataEnrichedLight) {
	o.Occupants.Set(&v)
}

// SetOccupantsNil sets the value for Occupants to be an explicit nil
func (o *SingleSampleDataEnriched) SetOccupantsNil() {
	o.Occupants.Set(nil)
}

// UnsetOccupants ensures that no value is present for Occupants, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetOccupants() {
	o.Occupants.Unset()
}

// GetOccupantsLower returns the OccupantsLower field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetOccupantsLower() SingleSampleDataEnrichedLight {
	if o == nil || IsNil(o.OccupantsLower.Get()) {
		var ret SingleSampleDataEnrichedLight
		return ret
	}
	return *o.OccupantsLower.Get()
}

// GetOccupantsLowerOk returns a tuple with the OccupantsLower field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetOccupantsLowerOk() (*SingleSampleDataEnrichedLight, bool) {
	if o == nil {
		return nil, false
	}
	return o.OccupantsLower.Get(), o.OccupantsLower.IsSet()
}

// HasOccupantsLower returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasOccupantsLower() bool {
	if o != nil && o.OccupantsLower.IsSet() {
		return true
	}

	return false
}

// SetOccupantsLower gets a reference to the given NullableSingleSampleDataEnrichedLight and assigns it to the OccupantsLower field.
func (o *SingleSampleDataEnriched) SetOccupantsLower(v SingleSampleDataEnrichedLight) {
	o.OccupantsLower.Set(&v)
}

// SetOccupantsLowerNil sets the value for OccupantsLower to be an explicit nil
func (o *SingleSampleDataEnriched) SetOccupantsLowerNil() {
	o.OccupantsLower.Set(nil)
}

// UnsetOccupantsLower ensures that no value is present for OccupantsLower, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetOccupantsLower() {
	o.OccupantsLower.Unset()
}

// GetOccupantsUpper returns the OccupantsUpper field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetOccupantsUpper() SingleSampleDataEnrichedLight {
	if o == nil || IsNil(o.OccupantsUpper.Get()) {
		var ret SingleSampleDataEnrichedLight
		return ret
	}
	return *o.OccupantsUpper.Get()
}

// GetOccupantsUpperOk returns a tuple with the OccupantsUpper field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetOccupantsUpperOk() (*SingleSampleDataEnrichedLight, bool) {
	if o == nil {
		return nil, false
	}
	return o.OccupantsUpper.Get(), o.OccupantsUpper.IsSet()
}

// HasOccupantsUpper returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasOccupantsUpper() bool {
	if o != nil && o.OccupantsUpper.IsSet() {
		return true
	}

	return false
}

// SetOccupantsUpper gets a reference to the given NullableSingleSampleDataEnrichedLight and assigns it to the OccupantsUpper field.
func (o *SingleSampleDataEnriched) SetOccupantsUpper(v SingleSampleDataEnrichedLight) {
	o.OccupantsUpper.Set(&v)
}

// SetOccupantsUpperNil sets the value for OccupantsUpper to be an explicit nil
func (o *SingleSampleDataEnriched) SetOccupantsUpperNil() {
	o.OccupantsUpper.Set(nil)
}

// UnsetOccupantsUpper ensures that no value is present for OccupantsUpper, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetOccupantsUpper() {
	o.OccupantsUpper.Unset()
}

// GetOutdoorCo returns the OutdoorCo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetOutdoorCo() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.OutdoorCo.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.OutdoorCo.Get()
}

// GetOutdoorCoOk returns a tuple with the OutdoorCo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetOutdoorCoOk() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.OutdoorCo.Get(), o.OutdoorCo.IsSet()
}

// HasOutdoorCo returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasOutdoorCo() bool {
	if o != nil && o.OutdoorCo.IsSet() {
		return true
	}

	return false
}

// SetOutdoorCo gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the OutdoorCo field.
func (o *SingleSampleDataEnriched) SetOutdoorCo(v SingleSampleDataEnrichedControlSignal) {
	o.OutdoorCo.Set(&v)
}

// SetOutdoorCoNil sets the value for OutdoorCo to be an explicit nil
func (o *SingleSampleDataEnriched) SetOutdoorCoNil() {
	o.OutdoorCo.Set(nil)
}

// UnsetOutdoorCo ensures that no value is present for OutdoorCo, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetOutdoorCo() {
	o.OutdoorCo.Unset()
}

// GetOutdoorHumidity returns the OutdoorHumidity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetOutdoorHumidity() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.OutdoorHumidity.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.OutdoorHumidity.Get()
}

// GetOutdoorHumidityOk returns a tuple with the OutdoorHumidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetOutdoorHumidityOk() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.OutdoorHumidity.Get(), o.OutdoorHumidity.IsSet()
}

// HasOutdoorHumidity returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasOutdoorHumidity() bool {
	if o != nil && o.OutdoorHumidity.IsSet() {
		return true
	}

	return false
}

// SetOutdoorHumidity gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the OutdoorHumidity field.
func (o *SingleSampleDataEnriched) SetOutdoorHumidity(v SingleSampleDataEnrichedControlSignal) {
	o.OutdoorHumidity.Set(&v)
}

// SetOutdoorHumidityNil sets the value for OutdoorHumidity to be an explicit nil
func (o *SingleSampleDataEnriched) SetOutdoorHumidityNil() {
	o.OutdoorHumidity.Set(nil)
}

// UnsetOutdoorHumidity ensures that no value is present for OutdoorHumidity, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetOutdoorHumidity() {
	o.OutdoorHumidity.Unset()
}

// GetOutdoorNo returns the OutdoorNo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetOutdoorNo() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.OutdoorNo.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.OutdoorNo.Get()
}

// GetOutdoorNoOk returns a tuple with the OutdoorNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetOutdoorNoOk() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.OutdoorNo.Get(), o.OutdoorNo.IsSet()
}

// HasOutdoorNo returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasOutdoorNo() bool {
	if o != nil && o.OutdoorNo.IsSet() {
		return true
	}

	return false
}

// SetOutdoorNo gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the OutdoorNo field.
func (o *SingleSampleDataEnriched) SetOutdoorNo(v SingleSampleDataEnrichedControlSignal) {
	o.OutdoorNo.Set(&v)
}

// SetOutdoorNoNil sets the value for OutdoorNo to be an explicit nil
func (o *SingleSampleDataEnriched) SetOutdoorNoNil() {
	o.OutdoorNo.Set(nil)
}

// UnsetOutdoorNo ensures that no value is present for OutdoorNo, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetOutdoorNo() {
	o.OutdoorNo.Unset()
}

// GetOutdoorNo2 returns the OutdoorNo2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetOutdoorNo2() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.OutdoorNo2.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.OutdoorNo2.Get()
}

// GetOutdoorNo2Ok returns a tuple with the OutdoorNo2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetOutdoorNo2Ok() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.OutdoorNo2.Get(), o.OutdoorNo2.IsSet()
}

// HasOutdoorNo2 returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasOutdoorNo2() bool {
	if o != nil && o.OutdoorNo2.IsSet() {
		return true
	}

	return false
}

// SetOutdoorNo2 gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the OutdoorNo2 field.
func (o *SingleSampleDataEnriched) SetOutdoorNo2(v SingleSampleDataEnrichedControlSignal) {
	o.OutdoorNo2.Set(&v)
}

// SetOutdoorNo2Nil sets the value for OutdoorNo2 to be an explicit nil
func (o *SingleSampleDataEnriched) SetOutdoorNo2Nil() {
	o.OutdoorNo2.Set(nil)
}

// UnsetOutdoorNo2 ensures that no value is present for OutdoorNo2, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetOutdoorNo2() {
	o.OutdoorNo2.Unset()
}

// GetOutdoorO3 returns the OutdoorO3 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetOutdoorO3() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.OutdoorO3.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.OutdoorO3.Get()
}

// GetOutdoorO3Ok returns a tuple with the OutdoorO3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetOutdoorO3Ok() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.OutdoorO3.Get(), o.OutdoorO3.IsSet()
}

// HasOutdoorO3 returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasOutdoorO3() bool {
	if o != nil && o.OutdoorO3.IsSet() {
		return true
	}

	return false
}

// SetOutdoorO3 gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the OutdoorO3 field.
func (o *SingleSampleDataEnriched) SetOutdoorO3(v SingleSampleDataEnrichedControlSignal) {
	o.OutdoorO3.Set(&v)
}

// SetOutdoorO3Nil sets the value for OutdoorO3 to be an explicit nil
func (o *SingleSampleDataEnriched) SetOutdoorO3Nil() {
	o.OutdoorO3.Set(nil)
}

// UnsetOutdoorO3 ensures that no value is present for OutdoorO3, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetOutdoorO3() {
	o.OutdoorO3.Unset()
}

// GetOutdoorPm1 returns the OutdoorPm1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetOutdoorPm1() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.OutdoorPm1.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.OutdoorPm1.Get()
}

// GetOutdoorPm1Ok returns a tuple with the OutdoorPm1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetOutdoorPm1Ok() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.OutdoorPm1.Get(), o.OutdoorPm1.IsSet()
}

// HasOutdoorPm1 returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasOutdoorPm1() bool {
	if o != nil && o.OutdoorPm1.IsSet() {
		return true
	}

	return false
}

// SetOutdoorPm1 gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the OutdoorPm1 field.
func (o *SingleSampleDataEnriched) SetOutdoorPm1(v SingleSampleDataEnrichedControlSignal) {
	o.OutdoorPm1.Set(&v)
}

// SetOutdoorPm1Nil sets the value for OutdoorPm1 to be an explicit nil
func (o *SingleSampleDataEnriched) SetOutdoorPm1Nil() {
	o.OutdoorPm1.Set(nil)
}

// UnsetOutdoorPm1 ensures that no value is present for OutdoorPm1, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetOutdoorPm1() {
	o.OutdoorPm1.Unset()
}

// GetOutdoorPm10 returns the OutdoorPm10 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetOutdoorPm10() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.OutdoorPm10.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.OutdoorPm10.Get()
}

// GetOutdoorPm10Ok returns a tuple with the OutdoorPm10 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetOutdoorPm10Ok() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.OutdoorPm10.Get(), o.OutdoorPm10.IsSet()
}

// HasOutdoorPm10 returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasOutdoorPm10() bool {
	if o != nil && o.OutdoorPm10.IsSet() {
		return true
	}

	return false
}

// SetOutdoorPm10 gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the OutdoorPm10 field.
func (o *SingleSampleDataEnriched) SetOutdoorPm10(v SingleSampleDataEnrichedControlSignal) {
	o.OutdoorPm10.Set(&v)
}

// SetOutdoorPm10Nil sets the value for OutdoorPm10 to be an explicit nil
func (o *SingleSampleDataEnriched) SetOutdoorPm10Nil() {
	o.OutdoorPm10.Set(nil)
}

// UnsetOutdoorPm10 ensures that no value is present for OutdoorPm10, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetOutdoorPm10() {
	o.OutdoorPm10.Unset()
}

// GetOutdoorPm25 returns the OutdoorPm25 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetOutdoorPm25() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.OutdoorPm25.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.OutdoorPm25.Get()
}

// GetOutdoorPm25Ok returns a tuple with the OutdoorPm25 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetOutdoorPm25Ok() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.OutdoorPm25.Get(), o.OutdoorPm25.IsSet()
}

// HasOutdoorPm25 returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasOutdoorPm25() bool {
	if o != nil && o.OutdoorPm25.IsSet() {
		return true
	}

	return false
}

// SetOutdoorPm25 gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the OutdoorPm25 field.
func (o *SingleSampleDataEnriched) SetOutdoorPm25(v SingleSampleDataEnrichedControlSignal) {
	o.OutdoorPm25.Set(&v)
}

// SetOutdoorPm25Nil sets the value for OutdoorPm25 to be an explicit nil
func (o *SingleSampleDataEnriched) SetOutdoorPm25Nil() {
	o.OutdoorPm25.Set(nil)
}

// UnsetOutdoorPm25 ensures that no value is present for OutdoorPm25, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetOutdoorPm25() {
	o.OutdoorPm25.Unset()
}

// GetOutdoorPressure returns the OutdoorPressure field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetOutdoorPressure() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.OutdoorPressure.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.OutdoorPressure.Get()
}

// GetOutdoorPressureOk returns a tuple with the OutdoorPressure field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetOutdoorPressureOk() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.OutdoorPressure.Get(), o.OutdoorPressure.IsSet()
}

// HasOutdoorPressure returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasOutdoorPressure() bool {
	if o != nil && o.OutdoorPressure.IsSet() {
		return true
	}

	return false
}

// SetOutdoorPressure gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the OutdoorPressure field.
func (o *SingleSampleDataEnriched) SetOutdoorPressure(v SingleSampleDataEnrichedControlSignal) {
	o.OutdoorPressure.Set(&v)
}

// SetOutdoorPressureNil sets the value for OutdoorPressure to be an explicit nil
func (o *SingleSampleDataEnriched) SetOutdoorPressureNil() {
	o.OutdoorPressure.Set(nil)
}

// UnsetOutdoorPressure ensures that no value is present for OutdoorPressure, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetOutdoorPressure() {
	o.OutdoorPressure.Unset()
}

// GetOutdoorSo2 returns the OutdoorSo2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetOutdoorSo2() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.OutdoorSo2.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.OutdoorSo2.Get()
}

// GetOutdoorSo2Ok returns a tuple with the OutdoorSo2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetOutdoorSo2Ok() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.OutdoorSo2.Get(), o.OutdoorSo2.IsSet()
}

// HasOutdoorSo2 returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasOutdoorSo2() bool {
	if o != nil && o.OutdoorSo2.IsSet() {
		return true
	}

	return false
}

// SetOutdoorSo2 gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the OutdoorSo2 field.
func (o *SingleSampleDataEnriched) SetOutdoorSo2(v SingleSampleDataEnrichedControlSignal) {
	o.OutdoorSo2.Set(&v)
}

// SetOutdoorSo2Nil sets the value for OutdoorSo2 to be an explicit nil
func (o *SingleSampleDataEnriched) SetOutdoorSo2Nil() {
	o.OutdoorSo2.Set(nil)
}

// UnsetOutdoorSo2 ensures that no value is present for OutdoorSo2, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetOutdoorSo2() {
	o.OutdoorSo2.Unset()
}

// GetOutdoorTemp returns the OutdoorTemp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetOutdoorTemp() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.OutdoorTemp.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.OutdoorTemp.Get()
}

// GetOutdoorTempOk returns a tuple with the OutdoorTemp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetOutdoorTempOk() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.OutdoorTemp.Get(), o.OutdoorTemp.IsSet()
}

// HasOutdoorTemp returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasOutdoorTemp() bool {
	if o != nil && o.OutdoorTemp.IsSet() {
		return true
	}

	return false
}

// SetOutdoorTemp gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the OutdoorTemp field.
func (o *SingleSampleDataEnriched) SetOutdoorTemp(v SingleSampleDataEnrichedControlSignal) {
	o.OutdoorTemp.Set(&v)
}

// SetOutdoorTempNil sets the value for OutdoorTemp to be an explicit nil
func (o *SingleSampleDataEnriched) SetOutdoorTempNil() {
	o.OutdoorTemp.Set(nil)
}

// UnsetOutdoorTemp ensures that no value is present for OutdoorTemp, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetOutdoorTemp() {
	o.OutdoorTemp.Unset()
}

// GetPm1 returns the Pm1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetPm1() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.Pm1.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.Pm1.Get()
}

// GetPm1Ok returns a tuple with the Pm1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetPm1Ok() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pm1.Get(), o.Pm1.IsSet()
}

// HasPm1 returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasPm1() bool {
	if o != nil && o.Pm1.IsSet() {
		return true
	}

	return false
}

// SetPm1 gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the Pm1 field.
func (o *SingleSampleDataEnriched) SetPm1(v SingleSampleDataEnrichedControlSignal) {
	o.Pm1.Set(&v)
}

// SetPm1Nil sets the value for Pm1 to be an explicit nil
func (o *SingleSampleDataEnriched) SetPm1Nil() {
	o.Pm1.Set(nil)
}

// UnsetPm1 ensures that no value is present for Pm1, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetPm1() {
	o.Pm1.Unset()
}

// GetPm10 returns the Pm10 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetPm10() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.Pm10.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.Pm10.Get()
}

// GetPm10Ok returns a tuple with the Pm10 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetPm10Ok() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pm10.Get(), o.Pm10.IsSet()
}

// HasPm10 returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasPm10() bool {
	if o != nil && o.Pm10.IsSet() {
		return true
	}

	return false
}

// SetPm10 gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the Pm10 field.
func (o *SingleSampleDataEnriched) SetPm10(v SingleSampleDataEnrichedControlSignal) {
	o.Pm10.Set(&v)
}

// SetPm10Nil sets the value for Pm10 to be an explicit nil
func (o *SingleSampleDataEnriched) SetPm10Nil() {
	o.Pm10.Set(nil)
}

// UnsetPm10 ensures that no value is present for Pm10, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetPm10() {
	o.Pm10.Unset()
}

// GetPm25 returns the Pm25 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetPm25() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.Pm25.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.Pm25.Get()
}

// GetPm25Ok returns a tuple with the Pm25 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetPm25Ok() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pm25.Get(), o.Pm25.IsSet()
}

// HasPm25 returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasPm25() bool {
	if o != nil && o.Pm25.IsSet() {
		return true
	}

	return false
}

// SetPm25 gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the Pm25 field.
func (o *SingleSampleDataEnriched) SetPm25(v SingleSampleDataEnrichedControlSignal) {
	o.Pm25.Set(&v)
}

// SetPm25Nil sets the value for Pm25 to be an explicit nil
func (o *SingleSampleDataEnriched) SetPm25Nil() {
	o.Pm25.Set(nil)
}

// UnsetPm25 ensures that no value is present for Pm25, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetPm25() {
	o.Pm25.Unset()
}

// GetPressure returns the Pressure field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetPressure() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.Pressure.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.Pressure.Get()
}

// GetPressureOk returns a tuple with the Pressure field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetPressureOk() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pressure.Get(), o.Pressure.IsSet()
}

// HasPressure returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasPressure() bool {
	if o != nil && o.Pressure.IsSet() {
		return true
	}

	return false
}

// SetPressure gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the Pressure field.
func (o *SingleSampleDataEnriched) SetPressure(v SingleSampleDataEnrichedControlSignal) {
	o.Pressure.Set(&v)
}

// SetPressureNil sets the value for Pressure to be an explicit nil
func (o *SingleSampleDataEnriched) SetPressureNil() {
	o.Pressure.Set(nil)
}

// UnsetPressure ensures that no value is present for Pressure, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetPressure() {
	o.Pressure.Unset()
}

// GetPressureDifference returns the PressureDifference field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetPressureDifference() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.PressureDifference.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.PressureDifference.Get()
}

// GetPressureDifferenceOk returns a tuple with the PressureDifference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetPressureDifferenceOk() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.PressureDifference.Get(), o.PressureDifference.IsSet()
}

// HasPressureDifference returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasPressureDifference() bool {
	if o != nil && o.PressureDifference.IsSet() {
		return true
	}

	return false
}

// SetPressureDifference gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the PressureDifference field.
func (o *SingleSampleDataEnriched) SetPressureDifference(v SingleSampleDataEnrichedControlSignal) {
	o.PressureDifference.Set(&v)
}

// SetPressureDifferenceNil sets the value for PressureDifference to be an explicit nil
func (o *SingleSampleDataEnriched) SetPressureDifferenceNil() {
	o.PressureDifference.Set(nil)
}

// UnsetPressureDifference ensures that no value is present for PressureDifference, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetPressureDifference() {
	o.PressureDifference.Unset()
}

// GetRadonShortTermAvg returns the RadonShortTermAvg field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetRadonShortTermAvg() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.RadonShortTermAvg.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.RadonShortTermAvg.Get()
}

// GetRadonShortTermAvgOk returns a tuple with the RadonShortTermAvg field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetRadonShortTermAvgOk() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.RadonShortTermAvg.Get(), o.RadonShortTermAvg.IsSet()
}

// HasRadonShortTermAvg returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasRadonShortTermAvg() bool {
	if o != nil && o.RadonShortTermAvg.IsSet() {
		return true
	}

	return false
}

// SetRadonShortTermAvg gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the RadonShortTermAvg field.
func (o *SingleSampleDataEnriched) SetRadonShortTermAvg(v SingleSampleDataEnrichedControlSignal) {
	o.RadonShortTermAvg.Set(&v)
}

// SetRadonShortTermAvgNil sets the value for RadonShortTermAvg to be an explicit nil
func (o *SingleSampleDataEnriched) SetRadonShortTermAvgNil() {
	o.RadonShortTermAvg.Set(nil)
}

// UnsetRadonShortTermAvg ensures that no value is present for RadonShortTermAvg, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetRadonShortTermAvg() {
	o.RadonShortTermAvg.Unset()
}

// GetRegulationHeight returns the RegulationHeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetRegulationHeight() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.RegulationHeight.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.RegulationHeight.Get()
}

// GetRegulationHeightOk returns a tuple with the RegulationHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetRegulationHeightOk() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegulationHeight.Get(), o.RegulationHeight.IsSet()
}

// HasRegulationHeight returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasRegulationHeight() bool {
	if o != nil && o.RegulationHeight.IsSet() {
		return true
	}

	return false
}

// SetRegulationHeight gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the RegulationHeight field.
func (o *SingleSampleDataEnriched) SetRegulationHeight(v SingleSampleDataEnrichedControlSignal) {
	o.RegulationHeight.Set(&v)
}

// SetRegulationHeightNil sets the value for RegulationHeight to be an explicit nil
func (o *SingleSampleDataEnriched) SetRegulationHeightNil() {
	o.RegulationHeight.Set(nil)
}

// UnsetRegulationHeight ensures that no value is present for RegulationHeight, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetRegulationHeight() {
	o.RegulationHeight.Unset()
}

// GetRegulationPressure returns the RegulationPressure field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetRegulationPressure() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.RegulationPressure.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.RegulationPressure.Get()
}

// GetRegulationPressureOk returns a tuple with the RegulationPressure field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetRegulationPressureOk() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegulationPressure.Get(), o.RegulationPressure.IsSet()
}

// HasRegulationPressure returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasRegulationPressure() bool {
	if o != nil && o.RegulationPressure.IsSet() {
		return true
	}

	return false
}

// SetRegulationPressure gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the RegulationPressure field.
func (o *SingleSampleDataEnriched) SetRegulationPressure(v SingleSampleDataEnrichedControlSignal) {
	o.RegulationPressure.Set(&v)
}

// SetRegulationPressureNil sets the value for RegulationPressure to be an explicit nil
func (o *SingleSampleDataEnriched) SetRegulationPressureNil() {
	o.RegulationPressure.Set(nil)
}

// UnsetRegulationPressure ensures that no value is present for RegulationPressure, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetRegulationPressure() {
	o.RegulationPressure.Unset()
}

// GetRelayDeviceType returns the RelayDeviceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetRelayDeviceType() string {
	if o == nil || IsNil(o.RelayDeviceType.Get()) {
		var ret string
		return ret
	}
	return *o.RelayDeviceType.Get()
}

// GetRelayDeviceTypeOk returns a tuple with the RelayDeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetRelayDeviceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RelayDeviceType.Get(), o.RelayDeviceType.IsSet()
}

// HasRelayDeviceType returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasRelayDeviceType() bool {
	if o != nil && o.RelayDeviceType.IsSet() {
		return true
	}

	return false
}

// SetRelayDeviceType gets a reference to the given NullableString and assigns it to the RelayDeviceType field.
func (o *SingleSampleDataEnriched) SetRelayDeviceType(v string) {
	o.RelayDeviceType.Set(&v)
}

// SetRelayDeviceTypeNil sets the value for RelayDeviceType to be an explicit nil
func (o *SingleSampleDataEnriched) SetRelayDeviceTypeNil() {
	o.RelayDeviceType.Set(nil)
}

// UnsetRelayDeviceType ensures that no value is present for RelayDeviceType, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetRelayDeviceType() {
	o.RelayDeviceType.Unset()
}

// GetRssi returns the Rssi field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetRssi() SingleSampleDataEnrichedLight {
	if o == nil || IsNil(o.Rssi.Get()) {
		var ret SingleSampleDataEnrichedLight
		return ret
	}
	return *o.Rssi.Get()
}

// GetRssiOk returns a tuple with the Rssi field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetRssiOk() (*SingleSampleDataEnrichedLight, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rssi.Get(), o.Rssi.IsSet()
}

// HasRssi returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasRssi() bool {
	if o != nil && o.Rssi.IsSet() {
		return true
	}

	return false
}

// SetRssi gets a reference to the given NullableSingleSampleDataEnrichedLight and assigns it to the Rssi field.
func (o *SingleSampleDataEnriched) SetRssi(v SingleSampleDataEnrichedLight) {
	o.Rssi.Set(&v)
}

// SetRssiNil sets the value for Rssi to be an explicit nil
func (o *SingleSampleDataEnriched) SetRssiNil() {
	o.Rssi.Set(nil)
}

// UnsetRssi ensures that no value is present for Rssi, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetRssi() {
	o.Rssi.Unset()
}

// GetSla returns the Sla field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetSla() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.Sla.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.Sla.Get()
}

// GetSlaOk returns a tuple with the Sla field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetSlaOk() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sla.Get(), o.Sla.IsSet()
}

// HasSla returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasSla() bool {
	if o != nil && o.Sla.IsSet() {
		return true
	}

	return false
}

// SetSla gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the Sla field.
func (o *SingleSampleDataEnriched) SetSla(v SingleSampleDataEnrichedControlSignal) {
	o.Sla.Set(&v)
}

// SetSlaNil sets the value for Sla to be an explicit nil
func (o *SingleSampleDataEnriched) SetSlaNil() {
	o.Sla.Set(nil)
}

// UnsetSla ensures that no value is present for Sla, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetSla() {
	o.Sla.Unset()
}

// GetTemp returns the Temp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetTemp() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.Temp.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.Temp.Get()
}

// GetTempOk returns a tuple with the Temp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetTempOk() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.Temp.Get(), o.Temp.IsSet()
}

// HasTemp returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasTemp() bool {
	if o != nil && o.Temp.IsSet() {
		return true
	}

	return false
}

// SetTemp gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the Temp field.
func (o *SingleSampleDataEnriched) SetTemp(v SingleSampleDataEnrichedControlSignal) {
	o.Temp.Set(&v)
}

// SetTempNil sets the value for Temp to be an explicit nil
func (o *SingleSampleDataEnriched) SetTempNil() {
	o.Temp.Set(nil)
}

// UnsetTemp ensures that no value is present for Temp, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetTemp() {
	o.Temp.Unset()
}

// GetTime returns the Time field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetTime() SingleSampleDataEnrichedLight {
	if o == nil || IsNil(o.Time.Get()) {
		var ret SingleSampleDataEnrichedLight
		return ret
	}
	return *o.Time.Get()
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetTimeOk() (*SingleSampleDataEnrichedLight, bool) {
	if o == nil {
		return nil, false
	}
	return o.Time.Get(), o.Time.IsSet()
}

// HasTime returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasTime() bool {
	if o != nil && o.Time.IsSet() {
		return true
	}

	return false
}

// SetTime gets a reference to the given NullableSingleSampleDataEnrichedLight and assigns it to the Time field.
func (o *SingleSampleDataEnriched) SetTime(v SingleSampleDataEnrichedLight) {
	o.Time.Set(&v)
}

// SetTimeNil sets the value for Time to be an explicit nil
func (o *SingleSampleDataEnriched) SetTimeNil() {
	o.Time.Set(nil)
}

// UnsetTime ensures that no value is present for Time, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetTime() {
	o.Time.Unset()
}

// GetVirusRisk returns the VirusRisk field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetVirusRisk() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.VirusRisk.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.VirusRisk.Get()
}

// GetVirusRiskOk returns a tuple with the VirusRisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetVirusRiskOk() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.VirusRisk.Get(), o.VirusRisk.IsSet()
}

// HasVirusRisk returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasVirusRisk() bool {
	if o != nil && o.VirusRisk.IsSet() {
		return true
	}

	return false
}

// SetVirusRisk gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the VirusRisk field.
func (o *SingleSampleDataEnriched) SetVirusRisk(v SingleSampleDataEnrichedControlSignal) {
	o.VirusRisk.Set(&v)
}

// SetVirusRiskNil sets the value for VirusRisk to be an explicit nil
func (o *SingleSampleDataEnriched) SetVirusRiskNil() {
	o.VirusRisk.Set(nil)
}

// UnsetVirusRisk ensures that no value is present for VirusRisk, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetVirusRisk() {
	o.VirusRisk.Unset()
}

// GetVoc returns the Voc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleSampleDataEnriched) GetVoc() SingleSampleDataEnrichedControlSignal {
	if o == nil || IsNil(o.Voc.Get()) {
		var ret SingleSampleDataEnrichedControlSignal
		return ret
	}
	return *o.Voc.Get()
}

// GetVocOk returns a tuple with the Voc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleSampleDataEnriched) GetVocOk() (*SingleSampleDataEnrichedControlSignal, bool) {
	if o == nil {
		return nil, false
	}
	return o.Voc.Get(), o.Voc.IsSet()
}

// HasVoc returns a boolean if a field has been set.
func (o *SingleSampleDataEnriched) HasVoc() bool {
	if o != nil && o.Voc.IsSet() {
		return true
	}

	return false
}

// SetVoc gets a reference to the given NullableSingleSampleDataEnrichedControlSignal and assigns it to the Voc field.
func (o *SingleSampleDataEnriched) SetVoc(v SingleSampleDataEnrichedControlSignal) {
	o.Voc.Set(&v)
}

// SetVocNil sets the value for Voc to be an explicit nil
func (o *SingleSampleDataEnriched) SetVocNil() {
	o.Voc.Set(nil)
}

// UnsetVoc ensures that no value is present for Voc, not even an explicit nil
func (o *SingleSampleDataEnriched) UnsetVoc() {
	o.Voc.Unset()
}

func (o SingleSampleDataEnriched) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SingleSampleDataEnriched) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AirExchangeRate.IsSet() {
		toSerialize["airExchangeRate"] = o.AirExchangeRate.Get()
	}
	if o.Airflow.IsSet() {
		toSerialize["airflow"] = o.Airflow.Get()
	}
	if o.Battery.IsSet() {
		toSerialize["battery"] = o.Battery.Get()
	}
	if o.Co2.IsSet() {
		toSerialize["co2"] = o.Co2.Get()
	}
	if o.ControlSignal.IsSet() {
		toSerialize["controlSignal"] = o.ControlSignal.Get()
	}
	if o.ControlSignalSlot01.IsSet() {
		toSerialize["controlSignalSlot01"] = o.ControlSignalSlot01.Get()
	}
	if o.ControlSignalSlot02.IsSet() {
		toSerialize["controlSignalSlot02"] = o.ControlSignalSlot02.Get()
	}
	if o.ControlSignalSlot03.IsSet() {
		toSerialize["controlSignalSlot03"] = o.ControlSignalSlot03.Get()
	}
	if o.ControlSignalSlot04.IsSet() {
		toSerialize["controlSignalSlot04"] = o.ControlSignalSlot04.Get()
	}
	if o.ControlSignalSlot05.IsSet() {
		toSerialize["controlSignalSlot05"] = o.ControlSignalSlot05.Get()
	}
	if o.ControlSignalSlot06.IsSet() {
		toSerialize["controlSignalSlot06"] = o.ControlSignalSlot06.Get()
	}
	if o.ControlSignalSlot07.IsSet() {
		toSerialize["controlSignalSlot07"] = o.ControlSignalSlot07.Get()
	}
	if o.ControlSignalSlot08.IsSet() {
		toSerialize["controlSignalSlot08"] = o.ControlSignalSlot08.Get()
	}
	if o.Humidity.IsSet() {
		toSerialize["humidity"] = o.Humidity.Get()
	}
	if o.Light.IsSet() {
		toSerialize["light"] = o.Light.Get()
	}
	if o.Lux.IsSet() {
		toSerialize["lux"] = o.Lux.Get()
	}
	if o.Mold.IsSet() {
		toSerialize["mold"] = o.Mold.Get()
	}
	if o.Occupants.IsSet() {
		toSerialize["occupants"] = o.Occupants.Get()
	}
	if o.OccupantsLower.IsSet() {
		toSerialize["occupantsLower"] = o.OccupantsLower.Get()
	}
	if o.OccupantsUpper.IsSet() {
		toSerialize["occupantsUpper"] = o.OccupantsUpper.Get()
	}
	if o.OutdoorCo.IsSet() {
		toSerialize["outdoorCo"] = o.OutdoorCo.Get()
	}
	if o.OutdoorHumidity.IsSet() {
		toSerialize["outdoorHumidity"] = o.OutdoorHumidity.Get()
	}
	if o.OutdoorNo.IsSet() {
		toSerialize["outdoorNo"] = o.OutdoorNo.Get()
	}
	if o.OutdoorNo2.IsSet() {
		toSerialize["outdoorNo2"] = o.OutdoorNo2.Get()
	}
	if o.OutdoorO3.IsSet() {
		toSerialize["outdoorO3"] = o.OutdoorO3.Get()
	}
	if o.OutdoorPm1.IsSet() {
		toSerialize["outdoorPm1"] = o.OutdoorPm1.Get()
	}
	if o.OutdoorPm10.IsSet() {
		toSerialize["outdoorPm10"] = o.OutdoorPm10.Get()
	}
	if o.OutdoorPm25.IsSet() {
		toSerialize["outdoorPm25"] = o.OutdoorPm25.Get()
	}
	if o.OutdoorPressure.IsSet() {
		toSerialize["outdoorPressure"] = o.OutdoorPressure.Get()
	}
	if o.OutdoorSo2.IsSet() {
		toSerialize["outdoorSo2"] = o.OutdoorSo2.Get()
	}
	if o.OutdoorTemp.IsSet() {
		toSerialize["outdoorTemp"] = o.OutdoorTemp.Get()
	}
	if o.Pm1.IsSet() {
		toSerialize["pm1"] = o.Pm1.Get()
	}
	if o.Pm10.IsSet() {
		toSerialize["pm10"] = o.Pm10.Get()
	}
	if o.Pm25.IsSet() {
		toSerialize["pm25"] = o.Pm25.Get()
	}
	if o.Pressure.IsSet() {
		toSerialize["pressure"] = o.Pressure.Get()
	}
	if o.PressureDifference.IsSet() {
		toSerialize["pressureDifference"] = o.PressureDifference.Get()
	}
	if o.RadonShortTermAvg.IsSet() {
		toSerialize["radonShortTermAvg"] = o.RadonShortTermAvg.Get()
	}
	if o.RegulationHeight.IsSet() {
		toSerialize["regulationHeight"] = o.RegulationHeight.Get()
	}
	if o.RegulationPressure.IsSet() {
		toSerialize["regulationPressure"] = o.RegulationPressure.Get()
	}
	if o.RelayDeviceType.IsSet() {
		toSerialize["relayDeviceType"] = o.RelayDeviceType.Get()
	}
	if o.Rssi.IsSet() {
		toSerialize["rssi"] = o.Rssi.Get()
	}
	if o.Sla.IsSet() {
		toSerialize["sla"] = o.Sla.Get()
	}
	if o.Temp.IsSet() {
		toSerialize["temp"] = o.Temp.Get()
	}
	if o.Time.IsSet() {
		toSerialize["time"] = o.Time.Get()
	}
	if o.VirusRisk.IsSet() {
		toSerialize["virusRisk"] = o.VirusRisk.Get()
	}
	if o.Voc.IsSet() {
		toSerialize["voc"] = o.Voc.Get()
	}
	return toSerialize, nil
}

type NullableSingleSampleDataEnriched struct {
	value *SingleSampleDataEnriched
	isSet bool
}

func (v NullableSingleSampleDataEnriched) Get() *SingleSampleDataEnriched {
	return v.value
}

func (v *NullableSingleSampleDataEnriched) Set(val *SingleSampleDataEnriched) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleSampleDataEnriched) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleSampleDataEnriched) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleSampleDataEnriched(val *SingleSampleDataEnriched) *NullableSingleSampleDataEnriched {
	return &NullableSingleSampleDataEnriched{value: val, isSet: true}
}

func (v NullableSingleSampleDataEnriched) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleSampleDataEnriched) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
