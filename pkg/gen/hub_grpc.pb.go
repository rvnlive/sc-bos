// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: hub.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HubApiClient is the client API for HubApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HubApiClient interface {
	GetHubNode(ctx context.Context, in *GetHubNodeRequest, opts ...grpc.CallOption) (*HubNode, error)
	ListHubNodes(ctx context.Context, in *ListHubNodesRequest, opts ...grpc.CallOption) (*ListHubNodesResponse, error)
	InspectHubNode(ctx context.Context, in *InspectHubNodeRequest, opts ...grpc.CallOption) (*HubNodeInspection, error)
	EnrollHubNode(ctx context.Context, in *EnrollHubNodeRequest, opts ...grpc.CallOption) (*HubNode, error)
	TestHubNode(ctx context.Context, in *TestHubNodeRequest, opts ...grpc.CallOption) (*TestHubNodeResponse, error)
}

type hubApiClient struct {
	cc grpc.ClientConnInterface
}

func NewHubApiClient(cc grpc.ClientConnInterface) HubApiClient {
	return &hubApiClient{cc}
}

func (c *hubApiClient) GetHubNode(ctx context.Context, in *GetHubNodeRequest, opts ...grpc.CallOption) (*HubNode, error) {
	out := new(HubNode)
	err := c.cc.Invoke(ctx, "/smartcore.bos.HubApi/GetHubNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubApiClient) ListHubNodes(ctx context.Context, in *ListHubNodesRequest, opts ...grpc.CallOption) (*ListHubNodesResponse, error) {
	out := new(ListHubNodesResponse)
	err := c.cc.Invoke(ctx, "/smartcore.bos.HubApi/ListHubNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubApiClient) InspectHubNode(ctx context.Context, in *InspectHubNodeRequest, opts ...grpc.CallOption) (*HubNodeInspection, error) {
	out := new(HubNodeInspection)
	err := c.cc.Invoke(ctx, "/smartcore.bos.HubApi/InspectHubNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubApiClient) EnrollHubNode(ctx context.Context, in *EnrollHubNodeRequest, opts ...grpc.CallOption) (*HubNode, error) {
	out := new(HubNode)
	err := c.cc.Invoke(ctx, "/smartcore.bos.HubApi/EnrollHubNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubApiClient) TestHubNode(ctx context.Context, in *TestHubNodeRequest, opts ...grpc.CallOption) (*TestHubNodeResponse, error) {
	out := new(TestHubNodeResponse)
	err := c.cc.Invoke(ctx, "/smartcore.bos.HubApi/TestHubNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HubApiServer is the server API for HubApi service.
// All implementations must embed UnimplementedHubApiServer
// for forward compatibility
type HubApiServer interface {
	GetHubNode(context.Context, *GetHubNodeRequest) (*HubNode, error)
	ListHubNodes(context.Context, *ListHubNodesRequest) (*ListHubNodesResponse, error)
	InspectHubNode(context.Context, *InspectHubNodeRequest) (*HubNodeInspection, error)
	EnrollHubNode(context.Context, *EnrollHubNodeRequest) (*HubNode, error)
	TestHubNode(context.Context, *TestHubNodeRequest) (*TestHubNodeResponse, error)
	mustEmbedUnimplementedHubApiServer()
}

// UnimplementedHubApiServer must be embedded to have forward compatible implementations.
type UnimplementedHubApiServer struct {
}

func (UnimplementedHubApiServer) GetHubNode(context.Context, *GetHubNodeRequest) (*HubNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHubNode not implemented")
}
func (UnimplementedHubApiServer) ListHubNodes(context.Context, *ListHubNodesRequest) (*ListHubNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHubNodes not implemented")
}
func (UnimplementedHubApiServer) InspectHubNode(context.Context, *InspectHubNodeRequest) (*HubNodeInspection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectHubNode not implemented")
}
func (UnimplementedHubApiServer) EnrollHubNode(context.Context, *EnrollHubNodeRequest) (*HubNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollHubNode not implemented")
}
func (UnimplementedHubApiServer) TestHubNode(context.Context, *TestHubNodeRequest) (*TestHubNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestHubNode not implemented")
}
func (UnimplementedHubApiServer) mustEmbedUnimplementedHubApiServer() {}

// UnsafeHubApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HubApiServer will
// result in compilation errors.
type UnsafeHubApiServer interface {
	mustEmbedUnimplementedHubApiServer()
}

func RegisterHubApiServer(s grpc.ServiceRegistrar, srv HubApiServer) {
	s.RegisterService(&HubApi_ServiceDesc, srv)
}

func _HubApi_GetHubNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHubNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubApiServer).GetHubNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.bos.HubApi/GetHubNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubApiServer).GetHubNode(ctx, req.(*GetHubNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubApi_ListHubNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHubNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubApiServer).ListHubNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.bos.HubApi/ListHubNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubApiServer).ListHubNodes(ctx, req.(*ListHubNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubApi_InspectHubNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectHubNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubApiServer).InspectHubNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.bos.HubApi/InspectHubNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubApiServer).InspectHubNode(ctx, req.(*InspectHubNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubApi_EnrollHubNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollHubNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubApiServer).EnrollHubNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.bos.HubApi/EnrollHubNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubApiServer).EnrollHubNode(ctx, req.(*EnrollHubNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubApi_TestHubNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestHubNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubApiServer).TestHubNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.bos.HubApi/TestHubNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubApiServer).TestHubNode(ctx, req.(*TestHubNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HubApi_ServiceDesc is the grpc.ServiceDesc for HubApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HubApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.HubApi",
	HandlerType: (*HubApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHubNode",
			Handler:    _HubApi_GetHubNode_Handler,
		},
		{
			MethodName: "ListHubNodes",
			Handler:    _HubApi_ListHubNodes_Handler,
		},
		{
			MethodName: "InspectHubNode",
			Handler:    _HubApi_InspectHubNode_Handler,
		},
		{
			MethodName: "EnrollHubNode",
			Handler:    _HubApi_EnrollHubNode_Handler,
		},
		{
			MethodName: "TestHubNode",
			Handler:    _HubApi_TestHubNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hub.proto",
}
