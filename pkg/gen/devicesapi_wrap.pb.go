// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/smart-core-os/sc-golang/pkg/wrap"
	"google.golang.org/grpc"
)

// WrapDevicesApi	adapts a gen.DevicesApiServer	and presents it as a gen.DevicesApiClient
func WrapDevicesApi(server DevicesApiServer) DevicesApiClient {
	return &devicesApiWrapper{server}
}

type devicesApiWrapper struct {
	server DevicesApiServer
}

// compile time check that we implement the interface we need
var _ DevicesApiClient = (*devicesApiWrapper)(nil)

// UnwrapServer returns the underlying server instance.
func (w *devicesApiWrapper) UnwrapServer() DevicesApiServer {
	return w.server
}

// Unwrap implements wrap.Unwrapper and returns the underlying server instance as an unknown type.
func (w *devicesApiWrapper) Unwrap() interface{} {
	return w.UnwrapServer()
}

func (w *devicesApiWrapper) ListDevices(ctx context.Context, req *ListDevicesRequest, _ ...grpc.CallOption) (*ListDevicesResponse, error) {
	return w.server.ListDevices(ctx, req)
}

func (w *devicesApiWrapper) PullDevices(ctx context.Context, in *PullDevicesRequest, opts ...grpc.CallOption) (DevicesApi_PullDevicesClient, error) {
	stream := wrap.NewClientServerStream(ctx)
	server := &pullDevicesDevicesApiServerWrapper{stream.Server()}
	client := &pullDevicesDevicesApiClientWrapper{stream.Client()}
	go func() {
		err := w.server.PullDevices(in, server)
		stream.Close(err)
	}()
	return client, nil
}

type pullDevicesDevicesApiClientWrapper struct {
	grpc.ClientStream
}

func (w *pullDevicesDevicesApiClientWrapper) Recv() (*PullDevicesResponse, error) {
	m := new(PullDevicesResponse)
	if err := w.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

type pullDevicesDevicesApiServerWrapper struct {
	grpc.ServerStream
}

func (s *pullDevicesDevicesApiServerWrapper) Send(response *PullDevicesResponse) error {
	return s.ServerStream.SendMsg(response)
}
