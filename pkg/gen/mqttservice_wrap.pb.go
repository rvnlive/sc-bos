// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package gen

import (
	context "context"
	wrap "github.com/smart-core-os/sc-golang/pkg/wrap"
	grpc "google.golang.org/grpc"
)

// WrapMqttService	adapts a MqttServiceServer	and presents it as a MqttServiceClient
func WrapMqttService(server MqttServiceServer) MqttServiceClient {
	return &mqttServiceWrapper{server}
}

type mqttServiceWrapper struct {
	server MqttServiceServer
}

// compile time check that we implement the interface we need
var _ MqttServiceClient = (*mqttServiceWrapper)(nil)

// UnwrapServer returns the underlying server instance.
func (w *mqttServiceWrapper) UnwrapServer() MqttServiceServer {
	return w.server
}

// Unwrap implements wrap.Unwrapper and returns the underlying server instance as an unknown type.
func (w *mqttServiceWrapper) Unwrap() any {
	return w.UnwrapServer()
}

func (w *mqttServiceWrapper) PullMessages(ctx context.Context, in *PullMessagesRequest, opts ...grpc.CallOption) (MqttService_PullMessagesClient, error) {
	stream := wrap.NewClientServerStream(ctx)
	server := &pullMessagesMqttServiceServerWrapper{stream.Server()}
	client := &pullMessagesMqttServiceClientWrapper{stream.Client()}
	go func() {
		err := w.server.PullMessages(in, server)
		stream.Close(err)
	}()
	return client, nil
}

type pullMessagesMqttServiceClientWrapper struct {
	grpc.ClientStream
}

func (w *pullMessagesMqttServiceClientWrapper) Recv() (*PullMessagesResponse, error) {
	m := new(PullMessagesResponse)
	if err := w.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

type pullMessagesMqttServiceServerWrapper struct {
	grpc.ServerStream
}

func (s *pullMessagesMqttServiceServerWrapper) Send(response *PullMessagesResponse) error {
	return s.ServerStream.SendMsg(response)
}
