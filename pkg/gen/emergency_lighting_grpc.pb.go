// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: emergency_lighting.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmergencyLightingApiClient is the client API for EmergencyLightingApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmergencyLightingApiClient interface {
	GetEmergencyLight(ctx context.Context, in *GetEmergencyLightRequest, opts ...grpc.CallOption) (*EmergencyLight, error)
	ListEmergencyLights(ctx context.Context, in *ListEmergencyLightsRequest, opts ...grpc.CallOption) (*ListEmergencyLightsResponse, error)
	ListEmergencyLightEvents(ctx context.Context, in *ListEmergencyLightEventsRequest, opts ...grpc.CallOption) (*ListEmergencyLightEventsResponse, error)
	GetReportCSV(ctx context.Context, in *GetReportCSVRequest, opts ...grpc.CallOption) (*ReportCSV, error)
}

type emergencyLightingApiClient struct {
	cc grpc.ClientConnInterface
}

func NewEmergencyLightingApiClient(cc grpc.ClientConnInterface) EmergencyLightingApiClient {
	return &emergencyLightingApiClient{cc}
}

func (c *emergencyLightingApiClient) GetEmergencyLight(ctx context.Context, in *GetEmergencyLightRequest, opts ...grpc.CallOption) (*EmergencyLight, error) {
	out := new(EmergencyLight)
	err := c.cc.Invoke(ctx, "/smartcore.bos.EmergencyLightingApi/GetEmergencyLight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emergencyLightingApiClient) ListEmergencyLights(ctx context.Context, in *ListEmergencyLightsRequest, opts ...grpc.CallOption) (*ListEmergencyLightsResponse, error) {
	out := new(ListEmergencyLightsResponse)
	err := c.cc.Invoke(ctx, "/smartcore.bos.EmergencyLightingApi/ListEmergencyLights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emergencyLightingApiClient) ListEmergencyLightEvents(ctx context.Context, in *ListEmergencyLightEventsRequest, opts ...grpc.CallOption) (*ListEmergencyLightEventsResponse, error) {
	out := new(ListEmergencyLightEventsResponse)
	err := c.cc.Invoke(ctx, "/smartcore.bos.EmergencyLightingApi/ListEmergencyLightEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emergencyLightingApiClient) GetReportCSV(ctx context.Context, in *GetReportCSVRequest, opts ...grpc.CallOption) (*ReportCSV, error) {
	out := new(ReportCSV)
	err := c.cc.Invoke(ctx, "/smartcore.bos.EmergencyLightingApi/GetReportCSV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmergencyLightingApiServer is the server API for EmergencyLightingApi service.
// All implementations must embed UnimplementedEmergencyLightingApiServer
// for forward compatibility
type EmergencyLightingApiServer interface {
	GetEmergencyLight(context.Context, *GetEmergencyLightRequest) (*EmergencyLight, error)
	ListEmergencyLights(context.Context, *ListEmergencyLightsRequest) (*ListEmergencyLightsResponse, error)
	ListEmergencyLightEvents(context.Context, *ListEmergencyLightEventsRequest) (*ListEmergencyLightEventsResponse, error)
	GetReportCSV(context.Context, *GetReportCSVRequest) (*ReportCSV, error)
	mustEmbedUnimplementedEmergencyLightingApiServer()
}

// UnimplementedEmergencyLightingApiServer must be embedded to have forward compatible implementations.
type UnimplementedEmergencyLightingApiServer struct {
}

func (UnimplementedEmergencyLightingApiServer) GetEmergencyLight(context.Context, *GetEmergencyLightRequest) (*EmergencyLight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmergencyLight not implemented")
}
func (UnimplementedEmergencyLightingApiServer) ListEmergencyLights(context.Context, *ListEmergencyLightsRequest) (*ListEmergencyLightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmergencyLights not implemented")
}
func (UnimplementedEmergencyLightingApiServer) ListEmergencyLightEvents(context.Context, *ListEmergencyLightEventsRequest) (*ListEmergencyLightEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmergencyLightEvents not implemented")
}
func (UnimplementedEmergencyLightingApiServer) GetReportCSV(context.Context, *GetReportCSVRequest) (*ReportCSV, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportCSV not implemented")
}
func (UnimplementedEmergencyLightingApiServer) mustEmbedUnimplementedEmergencyLightingApiServer() {}

// UnsafeEmergencyLightingApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmergencyLightingApiServer will
// result in compilation errors.
type UnsafeEmergencyLightingApiServer interface {
	mustEmbedUnimplementedEmergencyLightingApiServer()
}

func RegisterEmergencyLightingApiServer(s grpc.ServiceRegistrar, srv EmergencyLightingApiServer) {
	s.RegisterService(&EmergencyLightingApi_ServiceDesc, srv)
}

func _EmergencyLightingApi_GetEmergencyLight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmergencyLightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmergencyLightingApiServer).GetEmergencyLight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.bos.EmergencyLightingApi/GetEmergencyLight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmergencyLightingApiServer).GetEmergencyLight(ctx, req.(*GetEmergencyLightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmergencyLightingApi_ListEmergencyLights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmergencyLightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmergencyLightingApiServer).ListEmergencyLights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.bos.EmergencyLightingApi/ListEmergencyLights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmergencyLightingApiServer).ListEmergencyLights(ctx, req.(*ListEmergencyLightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmergencyLightingApi_ListEmergencyLightEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmergencyLightEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmergencyLightingApiServer).ListEmergencyLightEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.bos.EmergencyLightingApi/ListEmergencyLightEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmergencyLightingApiServer).ListEmergencyLightEvents(ctx, req.(*ListEmergencyLightEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmergencyLightingApi_GetReportCSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportCSVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmergencyLightingApiServer).GetReportCSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.bos.EmergencyLightingApi/GetReportCSV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmergencyLightingApiServer).GetReportCSV(ctx, req.(*GetReportCSVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmergencyLightingApi_ServiceDesc is the grpc.ServiceDesc for EmergencyLightingApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmergencyLightingApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.EmergencyLightingApi",
	HandlerType: (*EmergencyLightingApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEmergencyLight",
			Handler:    _EmergencyLightingApi_GetEmergencyLight_Handler,
		},
		{
			MethodName: "ListEmergencyLights",
			Handler:    _EmergencyLightingApi_ListEmergencyLights_Handler,
		},
		{
			MethodName: "ListEmergencyLightEvents",
			Handler:    _EmergencyLightingApi_ListEmergencyLightEvents_Handler,
		},
		{
			MethodName: "GetReportCSV",
			Handler:    _EmergencyLightingApi_GetReportCSV_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emergency_lighting.proto",
}
