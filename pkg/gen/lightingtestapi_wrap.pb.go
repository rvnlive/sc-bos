// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// WrapLightingTestApi	adapts a LightingTestApiServer	and presents it as a LightingTestApiClient
func WrapLightingTestApi(server LightingTestApiServer) LightingTestApiClient {
	return &lightingTestApiWrapper{server}
}

type lightingTestApiWrapper struct {
	server LightingTestApiServer
}

// compile time check that we implement the interface we need
var _ LightingTestApiClient = (*lightingTestApiWrapper)(nil)

// UnwrapServer returns the underlying server instance.
func (w *lightingTestApiWrapper) UnwrapServer() LightingTestApiServer {
	return w.server
}

// Unwrap implements wrap.Unwrapper and returns the underlying server instance as an unknown type.
func (w *lightingTestApiWrapper) Unwrap() any {
	return w.UnwrapServer()
}

func (w *lightingTestApiWrapper) GetLightHealth(ctx context.Context, req *GetLightHealthRequest, _ ...grpc.CallOption) (*LightHealth, error) {
	return w.server.GetLightHealth(ctx, req)
}

func (w *lightingTestApiWrapper) ListLightHealth(ctx context.Context, req *ListLightHealthRequest, _ ...grpc.CallOption) (*ListLightHealthResponse, error) {
	return w.server.ListLightHealth(ctx, req)
}

func (w *lightingTestApiWrapper) ListLightEvents(ctx context.Context, req *ListLightEventsRequest, _ ...grpc.CallOption) (*ListLightEventsResponse, error) {
	return w.server.ListLightEvents(ctx, req)
}

func (w *lightingTestApiWrapper) GetReportCSV(ctx context.Context, req *GetReportCSVRequest, _ ...grpc.CallOption) (*ReportCSV, error) {
	return w.server.GetReportCSV(ctx, req)
}
