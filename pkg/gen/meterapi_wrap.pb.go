// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package gen

import (
	context "context"
	wrap "github.com/smart-core-os/sc-golang/pkg/wrap"
	grpc "google.golang.org/grpc"
)

// WrapMeterApi	adapts a MeterApiServer	and presents it as a MeterApiClient
func WrapMeterApi(server MeterApiServer) MeterApiClient {
	return &meterApiWrapper{server}
}

type meterApiWrapper struct {
	server MeterApiServer
}

// compile time check that we implement the interface we need
var _ MeterApiClient = (*meterApiWrapper)(nil)

// UnwrapServer returns the underlying server instance.
func (w *meterApiWrapper) UnwrapServer() MeterApiServer {
	return w.server
}

// Unwrap implements wrap.Unwrapper and returns the underlying server instance as an unknown type.
func (w *meterApiWrapper) Unwrap() any {
	return w.UnwrapServer()
}

func (w *meterApiWrapper) GetMeterReading(ctx context.Context, req *GetMeterReadingRequest, _ ...grpc.CallOption) (*MeterReading, error) {
	return w.server.GetMeterReading(ctx, req)
}

func (w *meterApiWrapper) PullMeterReadings(ctx context.Context, in *PullMeterReadingsRequest, opts ...grpc.CallOption) (MeterApi_PullMeterReadingsClient, error) {
	stream := wrap.NewClientServerStream(ctx)
	server := &pullMeterReadingsMeterApiServerWrapper{stream.Server()}
	client := &pullMeterReadingsMeterApiClientWrapper{stream.Client()}
	go func() {
		err := w.server.PullMeterReadings(in, server)
		stream.Close(err)
	}()
	return client, nil
}

type pullMeterReadingsMeterApiClientWrapper struct {
	grpc.ClientStream
}

func (w *pullMeterReadingsMeterApiClientWrapper) Recv() (*PullMeterReadingsResponse, error) {
	m := new(PullMeterReadingsResponse)
	if err := w.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

type pullMeterReadingsMeterApiServerWrapper struct {
	grpc.ServerStream
}

func (s *pullMeterReadingsMeterApiServerWrapper) Send(response *PullMeterReadingsResponse) error {
	return s.ServerStream.SendMsg(response)
}
