// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// WrapNodeApi	adapts a NodeApiServer	and presents it as a NodeApiClient
func WrapNodeApi(server NodeApiServer) NodeApiClient {
	return &nodeApiWrapper{server}
}

type nodeApiWrapper struct {
	server NodeApiServer
}

// compile time check that we implement the interface we need
var _ NodeApiClient = (*nodeApiWrapper)(nil)

// UnwrapServer returns the underlying server instance.
func (w *nodeApiWrapper) UnwrapServer() NodeApiServer {
	return w.server
}

// Unwrap implements wrap.Unwrapper and returns the underlying server instance as an unknown type.
func (w *nodeApiWrapper) Unwrap() any {
	return w.UnwrapServer()
}

func (w *nodeApiWrapper) GetNodeRegistration(ctx context.Context, req *GetNodeRegistrationRequest, _ ...grpc.CallOption) (*NodeRegistration, error) {
	return w.server.GetNodeRegistration(ctx, req)
}

func (w *nodeApiWrapper) CreateNodeRegistration(ctx context.Context, req *CreateNodeRegistrationRequest, _ ...grpc.CallOption) (*NodeRegistration, error) {
	return w.server.CreateNodeRegistration(ctx, req)
}

func (w *nodeApiWrapper) ListNodeRegistrations(ctx context.Context, req *ListNodeRegistrationsRequest, _ ...grpc.CallOption) (*ListNodeRegistrationsResponse, error) {
	return w.server.ListNodeRegistrations(ctx, req)
}

func (w *nodeApiWrapper) TestNodeCommunication(ctx context.Context, req *TestNodeCommunicationRequest, _ ...grpc.CallOption) (*TestNodeCommunicationResponse, error) {
	return w.server.TestNodeCommunication(ctx, req)
}
